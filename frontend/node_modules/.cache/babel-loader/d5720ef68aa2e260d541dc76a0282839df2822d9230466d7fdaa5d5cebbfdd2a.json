{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isNullish, keccak256 } from 'web3-utils';\nimport { encodeParameters } from './coders/encode.js';\nconst TYPE_REGEX = /^\\w+/;\nconst ARRAY_REGEX = /^(.*)\\[([0-9]*?)]$/;\n/**\n * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once\n * in the resulting array.\n */\nconst getDependencies = (typedData, type, dependencies = []) => {\n  const match = type.match(TYPE_REGEX);\n  const actualType = match[0];\n  if (dependencies.includes(actualType)) {\n    return dependencies;\n  }\n  if (!typedData.types[actualType]) {\n    return dependencies;\n  }\n  return [actualType, ...typedData.types[actualType].reduce((previous, _type) => [...previous, ...getDependencies(typedData, _type.type, previous).filter(dependency => !previous.includes(dependency))], [])];\n};\n/**\n * Encode a type to a string. All dependant types are alphabetically sorted.\n *\n * @param {TypedData} typedData\n * @param {string} type\n * @param {Options} [options]\n * @return {string}\n */\nconst encodeType = (typedData, type) => {\n  const [primary, ...dependencies] = getDependencies(typedData, type);\n  // eslint-disable-next-line @typescript-eslint/require-array-sort-compare\n  const types = [primary, ...dependencies.sort()];\n  return types.map(dependency =>\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  `${dependency}(${typedData.types[dependency].map(_type => `${_type.type} ${_type.name}`)})`).join('');\n};\n/**\n * Get a type string as hash.\n */\nconst getTypeHash = (typedData, type) => keccak256(encodeType(typedData, type));\n/**\n * Get encoded data as a hash. The data should be a key -> value object with all the required values. All dependant\n * types are automatically encoded.\n */\nconst getStructHash = (typedData, type, data) => keccak256(encodeData(typedData, type, data));\n/**\n * Get the EIP-191 encoded message to sign, from the typedData object. If `hash` is enabled, the message will be hashed\n * with Keccak256.\n */\nexport const getMessage = (typedData, hash) => {\n  const EIP_191_PREFIX = '1901';\n  const message = `0x${EIP_191_PREFIX}${getStructHash(typedData, 'EIP712Domain', typedData.domain).substring(2)}${getStructHash(typedData, typedData.primaryType, typedData.message).substring(2)}`;\n  if (hash) {\n    return keccak256(message);\n  }\n  return message;\n};\n/**\n * Encodes a single value to an ABI serialisable string, number or Buffer. Returns the data as tuple, which consists of\n * an array of ABI compatible types, and an array of corresponding values.\n */\nconst encodeValue = (typedData, type, data) => {\n  const match = type.match(ARRAY_REGEX);\n  // Checks for array types\n  if (match) {\n    const arrayType = match[1];\n    const length = Number(match[2]) || undefined;\n    if (!Array.isArray(data)) {\n      throw new Error('Cannot encode data: value is not of array type');\n    }\n    if (length && data.length !== length) {\n      throw new Error(`Cannot encode data: expected length of ${length}, but got ${data.length}`);\n    }\n    const encodedData = data.map(item => encodeValue(typedData, arrayType, item));\n    const types = encodedData.map(item => item[0]);\n    const values = encodedData.map(item => item[1]);\n    return ['bytes32', keccak256(encodeParameters(types, values))];\n  }\n  if (typedData.types[type]) {\n    return ['bytes32', getStructHash(typedData, type, data)];\n  }\n  // Strings and arbitrary byte arrays are hashed to bytes32\n  if (type === 'string') {\n    return ['bytes32', keccak256(data)];\n  }\n  if (type === 'bytes') {\n    return ['bytes32', keccak256(data)];\n  }\n  return [type, data];\n};\n/**\n * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values. All\n * dependant types are automatically encoded.\n */\nconst encodeData = (typedData, type, data) => {\n  const [types, values] = typedData.types[type].reduce(([_types, _values], field) => {\n    if (isNullish(data[field.name]) || isNullish(data[field.name])) {\n      throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n    }\n    const value = data[field.name];\n    const [_type, encodedValue] = encodeValue(typedData, field.type, value);\n    return [[..._types, _type], [..._values, encodedValue]];\n  }, [['bytes32'], [getTypeHash(typedData, type)]]);\n  return encodeParameters(types, values);\n};","map":{"version":3,"names":["isNullish","keccak256","encodeParameters","TYPE_REGEX","ARRAY_REGEX","getDependencies","typedData","type","dependencies","match","actualType","includes","types","reduce","previous","_type","filter","dependency","encodeType","primary","sort","map","name","join","getTypeHash","getStructHash","data","encodeData","getMessage","hash","EIP_191_PREFIX","message","domain","substring","primaryType","encodeValue","arrayType","length","Number","undefined","Array","isArray","Error","encodedData","item","values","_types","_values","field","value","encodedValue"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth-abi\\src\\eip_712.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @note This code was taken from: https://github.com/Mrtenz/eip-712/tree/master\n */\n\nimport { Eip712TypedData } from 'web3-types';\nimport { isNullish, keccak256 } from 'web3-utils';\nimport { encodeParameters } from './coders/encode.js';\n\nconst TYPE_REGEX = /^\\w+/;\nconst ARRAY_REGEX = /^(.*)\\[([0-9]*?)]$/;\n\n/**\n * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once\n * in the resulting array.\n */\nconst getDependencies = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdependencies: string[] = [],\n): string[] => {\n\tconst match = type.match(TYPE_REGEX)!;\n\tconst actualType = match[0];\n\tif (dependencies.includes(actualType)) {\n\t\treturn dependencies;\n\t}\n\n\tif (!typedData.types[actualType]) {\n\t\treturn dependencies;\n\t}\n\n\treturn [\n\t\tactualType,\n\t\t...typedData.types[actualType].reduce<string[]>(\n\t\t\t(previous, _type) => [\n\t\t\t\t...previous,\n\t\t\t\t...getDependencies(typedData, _type.type, previous).filter(\n\t\t\t\t\tdependency => !previous.includes(dependency),\n\t\t\t\t),\n\t\t\t],\n\t\t\t[],\n\t\t),\n\t];\n};\n\n/**\n * Encode a type to a string. All dependant types are alphabetically sorted.\n *\n * @param {TypedData} typedData\n * @param {string} type\n * @param {Options} [options]\n * @return {string}\n */\nconst encodeType = (typedData: Eip712TypedData, type: string): string => {\n\tconst [primary, ...dependencies] = getDependencies(typedData, type);\n\t// eslint-disable-next-line @typescript-eslint/require-array-sort-compare\n\tconst types = [primary, ...dependencies.sort()];\n\n\treturn types\n\t\t.map(\n\t\t\tdependency =>\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t`${dependency}(${typedData.types[dependency].map(\n\t\t\t\t\t_type => `${_type.type} ${_type.name}`,\n\t\t\t\t)})`,\n\t\t)\n\t\t.join('');\n};\n\n/**\n * Get a type string as hash.\n */\nconst getTypeHash = (typedData: Eip712TypedData, type: string) =>\n\tkeccak256(encodeType(typedData, type));\n\n/**\n * Get encoded data as a hash. The data should be a key -> value object with all the required values. All dependant\n * types are automatically encoded.\n */\nconst getStructHash = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: Record<string, unknown>,\n\t// eslint-disable-next-line  no-use-before-define\n): string => keccak256(encodeData(typedData, type, data));\n\n/**\n * Get the EIP-191 encoded message to sign, from the typedData object. If `hash` is enabled, the message will be hashed\n * with Keccak256.\n */\nexport const getMessage = (typedData: Eip712TypedData, hash?: boolean): string => {\n\tconst EIP_191_PREFIX = '1901';\n\tconst message = `0x${EIP_191_PREFIX}${getStructHash(\n\t\ttypedData,\n\t\t'EIP712Domain',\n\t\ttypedData.domain as Record<string, unknown>,\n\t).substring(2)}${getStructHash(typedData, typedData.primaryType, typedData.message).substring(\n\t\t2,\n\t)}`;\n\n\tif (hash) {\n\t\treturn keccak256(message);\n\t}\n\n\treturn message;\n};\n\n/**\n * Encodes a single value to an ABI serialisable string, number or Buffer. Returns the data as tuple, which consists of\n * an array of ABI compatible types, and an array of corresponding values.\n */\nconst encodeValue = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: unknown,\n): [string, string | Uint8Array | number] => {\n\tconst match = type.match(ARRAY_REGEX);\n\n\t// Checks for array types\n\tif (match) {\n\t\tconst arrayType = match[1];\n\t\tconst length = Number(match[2]) || undefined;\n\n\t\tif (!Array.isArray(data)) {\n\t\t\tthrow new Error('Cannot encode data: value is not of array type');\n\t\t}\n\n\t\tif (length && data.length !== length) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot encode data: expected length of ${length}, but got ${data.length}`,\n\t\t\t);\n\t\t}\n\n\t\tconst encodedData = data.map(item => encodeValue(typedData, arrayType, item));\n\t\tconst types = encodedData.map(item => item[0]);\n\t\tconst values = encodedData.map(item => item[1]);\n\n\t\treturn ['bytes32', keccak256(encodeParameters(types, values))];\n\t}\n\n\tif (typedData.types[type]) {\n\t\treturn ['bytes32', getStructHash(typedData, type, data as Record<string, unknown>)];\n\t}\n\n\t// Strings and arbitrary byte arrays are hashed to bytes32\n\tif (type === 'string') {\n\t\treturn ['bytes32', keccak256(data as string)];\n\t}\n\n\tif (type === 'bytes') {\n\t\treturn ['bytes32', keccak256(data as string)];\n\t}\n\n\treturn [type, data as string];\n};\n\n/**\n * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values. All\n * dependant types are automatically encoded.\n */\nconst encodeData = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: Record<string, unknown>,\n): string => {\n\tconst [types, values] = typedData.types[type].reduce<[string[], unknown[]]>(\n\t\t([_types, _values], field) => {\n\t\t\tif (isNullish(data[field.name]) || isNullish(data[field.name])) {\n\t\t\t\tthrow new Error(`Cannot encode data: missing data for '${field.name}'`);\n\t\t\t}\n\n\t\t\tconst value = data[field.name];\n\t\t\tconst [_type, encodedValue] = encodeValue(typedData, field.type, value);\n\n\t\t\treturn [\n\t\t\t\t[..._types, _type],\n\t\t\t\t[..._values, encodedValue],\n\t\t\t];\n\t\t},\n\t\t[['bytes32'], [getTypeHash(typedData, type)]],\n\t);\n\n\treturn encodeParameters(types, values);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}