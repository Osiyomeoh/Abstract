{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\Dapp\\\\Abstract\\\\frontend\\\\src\\\\Components\\\\depositFunds.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport SmartWalletABI from './abi/SmartWallet.json'; // Importing ABI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst smartWalletAddress = \"0xf3495e3f6F38DDb5874944c18247dF3708880450\"; // Replace with your contract's address\n\nconst DepositFunds = () => {\n  _s();\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [web3Instance, setWeb3Instance] = useState(null);\n  const [depositAmount, setDepositAmount] = useState('');\n  const connectWallet = async () => {\n    try {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const web3 = new Web3(window.ethereum);\n      setWeb3Instance(web3);\n      setIsWalletConnected(true);\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n      alert(\"Failed to connect wallet!\");\n    }\n  };\n  const depositFunds = async () => {\n    if (!isWalletConnected) {\n      alert(\"Please connect your wallet first!\");\n      return;\n    }\n    if (!depositAmount || isNaN(depositAmount)) {\n      alert(\"Please enter a valid deposit amount.\");\n      return;\n    }\n    try {\n      // Convert the deposit amount to wei\n      const depositAmountWei = web3Instance.utils.toWei(depositAmount, 'ether');\n\n      // Connect to your SmartWallet contract\n      const contract = new web3Instance.eth.Contract(SmartWalletABI.abi, smartWalletAddress);\n\n      // Example: Get the user's address\n      const accounts = await web3Instance.eth.getAccounts();\n      const userAddress = accounts[0];\n\n      // Send the deposit transaction\n      await contract.methods.deposit().send({\n        from: userAddress,\n        value: depositAmountWei\n      });\n      alert(`Successfully deposited ${depositAmount} Ether.`);\n    } catch (error) {\n      console.error(\"Error depositing funds:\", error);\n      alert(\"Failed to deposit funds. Check the console for more details.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isWalletConnected && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), isWalletConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: depositAmount,\n        onChange: e => setDepositAmount(e.target.value),\n        placeholder: \"Enter deposit amount in Ether\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: depositFunds,\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(DepositFunds, \"EPQAoxIyqKGipT+/qAErHcIqtgo=\");\n_c = DepositFunds;\nexport default DepositFunds;\nvar _c;\n$RefreshReg$(_c, \"DepositFunds\");","map":{"version":3,"names":["React","useState","Web3","SmartWalletABI","jsxDEV","_jsxDEV","smartWalletAddress","DepositFunds","_s","isWalletConnected","setIsWalletConnected","web3Instance","setWeb3Instance","depositAmount","setDepositAmount","connectWallet","window","ethereum","request","method","web3","error","console","alert","depositFunds","isNaN","depositAmountWei","utils","toWei","contract","eth","Contract","abi","accounts","getAccounts","userAddress","methods","deposit","send","from","value","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/Dapp/Abstract/frontend/src/Components/depositFunds.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Web3 from 'web3';\r\nimport SmartWalletABI from './abi/SmartWallet.json'; // Importing ABI\r\n\r\nconst smartWalletAddress = \"0xf3495e3f6F38DDb5874944c18247dF3708880450\"; // Replace with your contract's address\r\n\r\nconst DepositFunds = () => {\r\n    const [isWalletConnected, setIsWalletConnected] = useState(false);\r\n    const [web3Instance, setWeb3Instance] = useState(null);\r\n    const [depositAmount, setDepositAmount] = useState('');\r\n    \r\n    const connectWallet = async () => {\r\n        try {\r\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            const web3 = new Web3(window.ethereum);\r\n            setWeb3Instance(web3);\r\n            setIsWalletConnected(true);\r\n        } catch (error) {\r\n            console.error(\"Error connecting to wallet:\", error);\r\n            alert(\"Failed to connect wallet!\");\r\n        }\r\n    };\r\n\r\n    const depositFunds = async () => {\r\n        if (!isWalletConnected) {\r\n            alert(\"Please connect your wallet first!\");\r\n            return;\r\n        }\r\n\r\n        if (!depositAmount || isNaN(depositAmount)) {\r\n            alert(\"Please enter a valid deposit amount.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Convert the deposit amount to wei\r\n            const depositAmountWei = web3Instance.utils.toWei(depositAmount, 'ether');\r\n\r\n            // Connect to your SmartWallet contract\r\n            const contract = new web3Instance.eth.Contract(\r\n                SmartWalletABI.abi,\r\n                smartWalletAddress\r\n            );\r\n\r\n            // Example: Get the user's address\r\n            const accounts = await web3Instance.eth.getAccounts();\r\n            const userAddress = accounts[0];\r\n\r\n            // Send the deposit transaction\r\n            await contract.methods.deposit().send({\r\n                from: userAddress,\r\n                value: depositAmountWei,\r\n            });\r\n\r\n            alert(`Successfully deposited ${depositAmount} Ether.`);\r\n        } catch (error) {\r\n            console.error(\"Error depositing funds:\", error);\r\n            alert(\"Failed to deposit funds. Check the console for more details.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!isWalletConnected && (\r\n                <button onClick={connectWallet}>Connect Wallet</button>\r\n            )}\r\n            {isWalletConnected && (\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={depositAmount}\r\n                        onChange={(e) => setDepositAmount(e.target.value)}\r\n                        placeholder=\"Enter deposit amount in Ether\"\r\n                    />\r\n                    <button onClick={depositFunds}>Deposit</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DepositFunds;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}