{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @module Utils\n */\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToUtf8, utf8ToBytes as ecUtf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { isAddress, isHex, isHexStrict, isInt, isNullish, utils, utils as validatorUtils, validator } from 'web3-validator';\nimport { HexProcessingError, InvalidAddressError, InvalidBooleanError, InvalidBytesError, InvalidNumberError, InvalidUnitError } from 'web3-errors';\n// Ref: https://ethdocs.org/en/latest/ether.html\n// Note: this could be simplified using ** operator, but babel does not handle it well (https://github.com/babel/babel/issues/13109)\n/** @internal */\nexport const ethUnitMap = {\n  noether: BigInt(0),\n  wei: BigInt(1),\n  kwei: BigInt(1000),\n  Kwei: BigInt(1000),\n  babbage: BigInt(1000),\n  femtoether: BigInt(1000),\n  mwei: BigInt(1000000),\n  Mwei: BigInt(1000000),\n  lovelace: BigInt(1000000),\n  picoether: BigInt(1000000),\n  gwei: BigInt(1000000000),\n  Gwei: BigInt(1000000000),\n  shannon: BigInt(1000000000),\n  nanoether: BigInt(1000000000),\n  nano: BigInt(1000000000),\n  szabo: BigInt(1000000000000),\n  microether: BigInt(1000000000000),\n  micro: BigInt(1000000000000),\n  finney: BigInt(1000000000000000),\n  milliether: BigInt(1000000000000000),\n  milli: BigInt(1000000000000000),\n  ether: BigInt('1000000000000000000'),\n  kether: BigInt('1000000000000000000000'),\n  grand: BigInt('1000000000000000000000'),\n  mether: BigInt('1000000000000000000000000'),\n  gether: BigInt('1000000000000000000000000000'),\n  tether: BigInt('1000000000000000000000000000000')\n};\n/**\n * Convert a value from bytes to Uint8Array\n * @param data - Data to be converted\n * @returns - The Uint8Array representation of the input data\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToUint8Array(\"0xab\")));\n * > Uint8Array(1) [ 171 ]\n * ```\n */\nexport const bytesToUint8Array = data => {\n  validator.validate(['bytes'], [data]);\n  if (data instanceof Uint8Array) {\n    return data;\n  }\n  if (Array.isArray(data)) {\n    return new Uint8Array(data);\n  }\n  if (typeof data === 'string') {\n    return validatorUtils.hexToUint8Array(data);\n  }\n  throw new InvalidBytesError(data);\n};\n/**\n * @internal\n */\nconst {\n  uint8ArrayToHexString\n} = validatorUtils;\n/**\n * Convert a byte array to a hex string\n * @param bytes - Byte array to be converted\n * @returns - The hex string representation of the input byte array\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));\n * > \"0x480c\"\n *\n */\nexport const bytesToHex = bytes => uint8ArrayToHexString(bytesToUint8Array(bytes));\n/**\n * Convert a hex string to a byte array\n * @param hex - Hex string to be converted\n * @returns - The byte array representation of the input hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToBytes('0x74657374'));\n * > Uint8Array(4) [ 116, 101, 115, 116 ]\n * ```\n */\nexport const hexToBytes = bytes => {\n  if (typeof bytes === 'string' && bytes.slice(0, 2).toLowerCase() !== '0x') {\n    return bytesToUint8Array(`0x${bytes}`);\n  }\n  return bytesToUint8Array(bytes);\n};\n/**\n * Converts value to it's number representation\n * @param value - Hex string to be converted\n * @returns - The number representation of the input value\n *\n * @example\n * ```ts\n * conoslle.log(web3.utils.hexToNumber('0xa'));\n * > 10\n * ```\n */\nexport const hexToNumber = value => {\n  validator.validate(['hex'], [value]);\n  // To avoid duplicate code and circular dependency we will\n  // use `hexToNumber` implementation from `web3-validator`\n  return validatorUtils.hexToNumber(value);\n};\n/**\n * Converts value to it's number representation @alias `hexToNumber`\n */\nexport const toDecimal = hexToNumber;\n/**\n * Converts value to it's hex representation\n * @param value - Value to be converted\n * @param hexstrict - Add padding to converted value if odd, to make it hexstrict\n * @returns - The hex representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.numberToHex(10));\n * > \"0xa\"\n * ```\n */\nexport const numberToHex = (value, hexstrict) => {\n  if (typeof value !== 'bigint') validator.validate(['int'], [value]);\n  // To avoid duplicate code and circular dependency we will\n  // use `numberToHex` implementation from `web3-validator`\n  let updatedValue = validatorUtils.numberToHex(value);\n  if (hexstrict) {\n    if (!updatedValue.startsWith('-') && updatedValue.length % 2 === 1) {\n      // To avoid duplicate a circular dependancy we will not be using the padLeft method\n      updatedValue = '0x0'.concat(updatedValue.slice(2));\n    } else if (updatedValue.length % 2 === 0 && updatedValue.startsWith('-')) updatedValue = '-0x0'.concat(updatedValue.slice(3));\n  }\n  return updatedValue;\n};\n/**\n * Converts value to it's hex representation @alias `numberToHex`\n *\n */\nexport const fromDecimal = numberToHex;\n/**\n * Converts value to it's decimal representation in string\n * @param value - Hex string to be converted\n * @returns - The decimal representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToNumberString('0xa'));\n * > \"10\"\n * ```\n */\nexport const hexToNumberString = data => hexToNumber(data).toString();\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n * @param str - Utf8 string to be converted\n * @returns - The hex representation of the input string\n *\n * @example\n * ```ts\n * console.log(utf8ToHex('web3.js'));\n * > \"0x776562332e6a73\"\n *\n */\nexport const utf8ToHex = str => {\n  validator.validate(['string'], [str]);\n  // To be compatible with 1.x trim null character\n  // eslint-disable-next-line no-control-regex\n  let strWithoutNullCharacter = str.replace(/^(?:\\u0000)/, '');\n  // eslint-disable-next-line no-control-regex\n  strWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\\u0000)$/, '');\n  return bytesToHex(new TextEncoder().encode(strWithoutNullCharacter));\n};\n/**\n * @alias utf8ToHex\n */\nexport const fromUtf8 = utf8ToHex;\n/**\n * @alias utf8ToHex\n */\nexport const stringToHex = utf8ToHex;\n/**\n * Should be called to get utf8 from it's hex representation\n * @param str - Hex string to be converted\n * @returns - Utf8 string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToUtf8 = str => bytesToUtf8(hexToBytes(str));\n/**\n * @alias hexToUtf8\n */\nexport const toUtf8 = input => {\n  if (typeof input === 'string') {\n    return hexToUtf8(input);\n  }\n  validator.validate(['bytes'], [input]);\n  return bytesToUtf8(input);\n};\nexport const utf8ToBytes = ecUtf8ToBytes;\n/**\n * @alias hexToUtf8\n */\nexport const hexToString = hexToUtf8;\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n * @param str - String to be converted to hex\n * @returns - Hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.asciiToHex('Hello World'));\n * > 0x48656c6c6f20576f726c64\n * ```\n */\nexport const asciiToHex = str => {\n  validator.validate(['string'], [str]);\n  let hexString = '';\n  for (let i = 0; i < str.length; i += 1) {\n    const hexCharCode = str.charCodeAt(i).toString(16);\n    // might need a leading 0\n    hexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;\n  }\n  return `0x${hexString}`;\n};\n/**\n * @alias asciiToHex\n */\nexport const fromAscii = asciiToHex;\n/**\n * Should be called to get ascii from it's hex representation\n * @param str - Hex string to be converted to ascii\n * @returns - Ascii string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToAscii = str => {\n  const decoder = new TextDecoder('ascii');\n  return decoder.decode(hexToBytes(str));\n};\n/**\n * @alias hexToAscii\n */\nexport const toAscii = hexToAscii;\n/**\n * Auto converts any given value into it's hex representation.\n * @param value - Value to be converted to hex\n * @param returnType - If true, it will return the type of the value\n *\n * @example\n * ```ts\n * console.log(web3.utils.toHex(10));\n * > 0xa\n *\n * console.log(web3.utils.toHex('0x123', true));\n * > bytes\n *```\n */\nexport const toHex = (value, returnType) => {\n  if (typeof value === 'string' && isAddress(value)) {\n    return returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;\n  }\n  if (typeof value === 'boolean') {\n    // eslint-disable-next-line no-nested-ternary\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n  if (typeof value === 'number') {\n    // eslint-disable-next-line no-nested-ternary\n    return returnType ? value < 0 ? 'int256' : 'uint256' : numberToHex(value);\n  }\n  if (typeof value === 'bigint') {\n    return returnType ? 'bigint' : numberToHex(value);\n  }\n  if (typeof value === 'object' && !!value) {\n    return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n  }\n  if (typeof value === 'string') {\n    if (value.startsWith('-0x') || value.startsWith('-0X')) {\n      return returnType ? 'int256' : numberToHex(value);\n    }\n    if (isHexStrict(value)) {\n      return returnType ? 'bytes' : value;\n    }\n    if (isHex(value) && !isInt(value)) {\n      return returnType ? 'bytes' : `0x${value}`;\n    }\n    if (!Number.isFinite(value)) {\n      return returnType ? 'string' : utf8ToHex(value);\n    }\n  }\n  throw new HexProcessingError(value);\n};\n/**\n * Converts any given value into it's number representation, if possible, else into it's bigint representation.\n * @param value - The value to convert\n * @returns - Returns the value in number or bigint representation\n *\n * @example\n * ```ts\n * console.log(web3.utils.toNumber(1));\n * > 1\n * console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));\n * > 9007199254740992n\n *\n * ```\n */\nexport const toNumber = value => {\n  if (typeof value === 'number') {\n    return value;\n  }\n  if (typeof value === 'bigint') {\n    return value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER ? Number(value) : value;\n  }\n  if (typeof value === 'string' && isHexStrict(value)) {\n    return hexToNumber(value);\n  }\n  try {\n    return toNumber(BigInt(value));\n  } catch (_a) {\n    throw new InvalidNumberError(value);\n  }\n};\n/**\n * Auto converts any given value into it's bigint representation\n *\n * @param value - The value to convert\n * @returns - Returns the value in bigint representation\n\n * @example\n * ```ts\n * console.log(web3.utils.toBigInt(1));\n * > 1n\n * ```\n */\nexport const toBigInt = value => {\n  if (typeof value === 'number') {\n    return BigInt(value);\n  }\n  if (typeof value === 'bigint') {\n    return value;\n  }\n  // isHex passes for dec, too\n  if (typeof value === 'string' && isHex(value)) {\n    if (value.startsWith('-')) {\n      return -BigInt(value.substring(1));\n    }\n    return BigInt(value);\n  }\n  throw new InvalidNumberError(value);\n};\n/**\n * Takes a number of wei and converts it to any other ether unit.\n * @param number - The value in wei\n * @param unit - The unit to convert to\n * @returns - Returns the converted value in the given unit\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromWei(\"1\", \"ether\"));\n * > 0.000000000000000001\n *\n * console.log(web3.utils.fromWei(\"1\", \"shannon\"));\n * > 0.000000001\n * ```\n */\nexport const fromWei = (number, unit) => {\n  const denomination = ethUnitMap[unit];\n  if (!denomination) {\n    throw new InvalidUnitError(unit);\n  }\n  // value in wei would always be integer\n  // 13456789, 1234\n  const value = String(toNumber(number));\n  // count number of zeros in denomination\n  // 1000000 -> 6\n  const numberOfZerosInDenomination = denomination.toString().length - 1;\n  if (numberOfZerosInDenomination <= 0) {\n    return value.toString();\n  }\n  // pad the value with required zeros\n  // 13456789 -> 13456789, 1234 -> 001234\n  const zeroPaddedValue = value.padStart(numberOfZerosInDenomination, '0');\n  // get the integer part of value by counting number of zeros from start\n  // 13456789 -> '13'\n  // 001234 -> ''\n  const integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);\n  // get the fraction part of value by counting number of zeros backward\n  // 13456789 -> '456789'\n  // 001234 -> '001234'\n  const fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\\.?0+$/, '');\n  if (integer === '') {\n    return `0.${fraction}`;\n  }\n  if (fraction === '') {\n    return integer;\n  }\n  return `${integer}.${fraction}`;\n};\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * @param number - The number to convert.\n * @param unit - {@link EtherUnits} The unit of the number passed.\n * @returns The number converted to wei.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toWei(\"0.001\", \"ether\"));\n * > 1000000000000000 //(wei)\n * ```\n */\n// todo in 1.x unit defaults to 'ether'\nexport const toWei = (number, unit) => {\n  validator.validate(['number'], [number]);\n  const denomination = ethUnitMap[unit];\n  if (!denomination) {\n    throw new InvalidUnitError(unit);\n  }\n  // if value is decimal e.g. 24.56 extract `integer` and `fraction` part\n  // to avoid `fraction` to be null use `concat` with empty string\n  const [integer, fraction] = String(typeof number === 'string' && !isHexStrict(number) ? number : toNumber(number)).split('.').concat('');\n  // join the value removing `.` from\n  // 24.56 -> 2456\n  const value = BigInt(`${integer}${fraction}`);\n  // multiply value with denomination\n  // 2456 * 1000000 -> 2456000000\n  const updatedValue = value * denomination;\n  // count number of zeros in denomination\n  const numberOfZerosInDenomination = denomination.toString().length - 1;\n  // check which either `fraction` or `denomination` have lower number of zeros\n  const decimals = Math.min(fraction.length, numberOfZerosInDenomination);\n  if (decimals === 0) {\n    return updatedValue.toString();\n  }\n  // Add zeros to make length equal to required decimal points\n  // If string is larger than decimal points required then remove last zeros\n  return updatedValue.toString().padStart(decimals, '0').slice(0, -decimals);\n};\n/**\n * Will convert an upper or lowercase Ethereum address to a checksum address.\n * @param address - An address string\n * @returns\tThe checksum address\n * @example\n * ```ts\n * web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n * > \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n * ```\n */\nexport const toChecksumAddress = address => {\n  if (!isAddress(address, false)) {\n    throw new InvalidAddressError(address);\n  }\n  const lowerCaseAddress = address.toLowerCase().replace(/^0x/i, '');\n  const hash = utils.uint8ArrayToHexString(keccak256(utf8ToBytes(lowerCaseAddress)));\n  if (isNullish(hash) || hash === '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470') return ''; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n  let checksumAddress = '0x';\n  const addressHash = hash.replace(/^0x/i, '');\n  for (let i = 0; i < lowerCaseAddress.length; i += 1) {\n    // If ith character is 8 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += lowerCaseAddress[i].toUpperCase();\n    } else {\n      checksumAddress += lowerCaseAddress[i];\n    }\n  }\n  return checksumAddress;\n};\nexport const toBool = value => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  if (typeof value === 'number' && (value === 0 || value === 1)) {\n    return Boolean(value);\n  }\n  if (typeof value === 'bigint' && (value === BigInt(0) || value === BigInt(1))) {\n    return Boolean(value);\n  }\n  if (typeof value === 'string' && !isHexStrict(value) && (value === '1' || value === '0' || value === 'false' || value === 'true')) {\n    if (value === 'true') {\n      return true;\n    }\n    if (value === 'false') {\n      return false;\n    }\n    return Boolean(Number(value));\n  }\n  if (typeof value === 'string' && isHexStrict(value) && (value === '0x1' || value === '0x0')) {\n    return Boolean(toNumber(value));\n  }\n  throw new InvalidBooleanError(value);\n};","map":{"version":3,"names":["keccak256","bytesToUtf8","utf8ToBytes","ecUtf8ToBytes","isAddress","isHex","isHexStrict","isInt","isNullish","utils","validatorUtils","validator","HexProcessingError","InvalidAddressError","InvalidBooleanError","InvalidBytesError","InvalidNumberError","InvalidUnitError","ethUnitMap","noether","BigInt","wei","kwei","Kwei","babbage","femtoether","mwei","Mwei","lovelace","picoether","gwei","Gwei","shannon","nanoether","nano","szabo","microether","micro","finney","milliether","milli","ether","kether","grand","mether","gether","tether","bytesToUint8Array","data","validate","Uint8Array","Array","isArray","hexToUint8Array","uint8ArrayToHexString","bytesToHex","bytes","hexToBytes","slice","toLowerCase","hexToNumber","value","toDecimal","numberToHex","hexstrict","updatedValue","startsWith","length","concat","fromDecimal","hexToNumberString","toString","utf8ToHex","str","strWithoutNullCharacter","replace","TextEncoder","encode","fromUtf8","stringToHex","hexToUtf8","toUtf8","input","hexToString","asciiToHex","hexString","i","hexCharCode","charCodeAt","fromAscii","hexToAscii","decoder","TextDecoder","decode","toAscii","toHex","returnType","JSON","stringify","Number","isFinite","toNumber","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","_a","toBigInt","substring","fromWei","number","unit","denomination","String","numberOfZerosInDenomination","zeroPaddedValue","padStart","integer","fraction","toWei","split","decimals","Math","min","toChecksumAddress","address","lowerCaseAddress","hash","checksumAddress","addressHash","parseInt","toUpperCase","toBool","Boolean"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-utils\\src\\converters.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @module Utils\n */\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToUtf8, utf8ToBytes as ecUtf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { Address, Bytes, HexString, Numbers, ValueTypes } from 'web3-types';\nimport {\n\tisAddress,\n\tisHex,\n\tisHexStrict,\n\tisInt,\n\tisNullish,\n\tutils,\n\tutils as validatorUtils,\n\tvalidator,\n} from 'web3-validator';\n\nimport {\n\tHexProcessingError,\n\tInvalidAddressError,\n\tInvalidBooleanError,\n\tInvalidBytesError,\n\tInvalidNumberError,\n\tInvalidUnitError,\n} from 'web3-errors';\n\n// Ref: https://ethdocs.org/en/latest/ether.html\n// Note: this could be simplified using ** operator, but babel does not handle it well (https://github.com/babel/babel/issues/13109)\n/** @internal */\nexport const ethUnitMap = {\n\tnoether: BigInt(0),\n\twei: BigInt(1),\n\tkwei: BigInt(1000),\n\tKwei: BigInt(1000),\n\tbabbage: BigInt(1000),\n\tfemtoether: BigInt(1000),\n\tmwei: BigInt(1000000),\n\tMwei: BigInt(1000000),\n\tlovelace: BigInt(1000000),\n\tpicoether: BigInt(1000000),\n\tgwei: BigInt(1000000000),\n\tGwei: BigInt(1000000000),\n\tshannon: BigInt(1000000000),\n\tnanoether: BigInt(1000000000),\n\tnano: BigInt(1000000000),\n\tszabo: BigInt(1000000000000),\n\tmicroether: BigInt(1000000000000),\n\tmicro: BigInt(1000000000000),\n\tfinney: BigInt(1000000000000000),\n\tmilliether: BigInt(1000000000000000),\n\tmilli: BigInt(1000000000000000),\n\tether: BigInt('1000000000000000000'),\n\tkether: BigInt('1000000000000000000000'),\n\tgrand: BigInt('1000000000000000000000'),\n\tmether: BigInt('1000000000000000000000000'),\n\tgether: BigInt('1000000000000000000000000000'),\n\ttether: BigInt('1000000000000000000000000000000'),\n};\n\nexport type EtherUnits = keyof typeof ethUnitMap;\n/**\n * Convert a value from bytes to Uint8Array\n * @param data - Data to be converted\n * @returns - The Uint8Array representation of the input data\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToUint8Array(\"0xab\")));\n * > Uint8Array(1) [ 171 ]\n * ```\n */\nexport const bytesToUint8Array = (data: Bytes): Uint8Array | never => {\n\tvalidator.validate(['bytes'], [data]);\n\n\tif (data instanceof Uint8Array) {\n\t\treturn data;\n\t}\n\n\tif (Array.isArray(data)) {\n\t\treturn new Uint8Array(data);\n\t}\n\n\tif (typeof data === 'string') {\n\t\treturn validatorUtils.hexToUint8Array(data);\n\t}\n\n\tthrow new InvalidBytesError(data);\n};\n\n/**\n * @internal\n */\nconst { uint8ArrayToHexString } = validatorUtils;\n\n/**\n * Convert a byte array to a hex string\n * @param bytes - Byte array to be converted\n * @returns - The hex string representation of the input byte array\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));\n * > \"0x480c\"\n *\n */\nexport const bytesToHex = (bytes: Bytes): HexString =>\n\tuint8ArrayToHexString(bytesToUint8Array(bytes));\n\n/**\n * Convert a hex string to a byte array\n * @param hex - Hex string to be converted\n * @returns - The byte array representation of the input hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToBytes('0x74657374'));\n * > Uint8Array(4) [ 116, 101, 115, 116 ]\n * ```\n */\nexport const hexToBytes = (bytes: HexString): Uint8Array => {\n\tif (typeof bytes === 'string' && bytes.slice(0, 2).toLowerCase() !== '0x') {\n\t\treturn bytesToUint8Array(`0x${bytes}`);\n\t}\n\treturn bytesToUint8Array(bytes);\n};\n\n/**\n * Converts value to it's number representation\n * @param value - Hex string to be converted\n * @returns - The number representation of the input value\n *\n * @example\n * ```ts\n * conoslle.log(web3.utils.hexToNumber('0xa'));\n * > 10\n * ```\n */\nexport const hexToNumber = (value: HexString): bigint | number => {\n\tvalidator.validate(['hex'], [value]);\n\n\t// To avoid duplicate code and circular dependency we will\n\t// use `hexToNumber` implementation from `web3-validator`\n\treturn validatorUtils.hexToNumber(value);\n};\n\n/**\n * Converts value to it's number representation @alias `hexToNumber`\n */\nexport const toDecimal = hexToNumber;\n\n/**\n * Converts value to it's hex representation\n * @param value - Value to be converted\n * @param hexstrict - Add padding to converted value if odd, to make it hexstrict\n * @returns - The hex representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.numberToHex(10));\n * > \"0xa\"\n * ```\n */\nexport const numberToHex = (value: Numbers, hexstrict?: boolean): HexString => {\n\tif (typeof value !== 'bigint') validator.validate(['int'], [value]);\n\t// To avoid duplicate code and circular dependency we will\n\t// use `numberToHex` implementation from `web3-validator`\n\tlet updatedValue = validatorUtils.numberToHex(value);\n\tif (hexstrict) {\n\t\tif (!updatedValue.startsWith('-') && updatedValue.length % 2 === 1) {\n\t\t\t// To avoid duplicate a circular dependancy we will not be using the padLeft method\n\t\t\tupdatedValue = '0x0'.concat(updatedValue.slice(2));\n\t\t} else if (updatedValue.length % 2 === 0 && updatedValue.startsWith('-'))\n\t\t\tupdatedValue = '-0x0'.concat(updatedValue.slice(3));\n\t}\n\treturn updatedValue;\n};\n/**\n * Converts value to it's hex representation @alias `numberToHex`\n *\n */\nexport const fromDecimal = numberToHex;\n\n/**\n * Converts value to it's decimal representation in string\n * @param value - Hex string to be converted\n * @returns - The decimal representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToNumberString('0xa'));\n * > \"10\"\n * ```\n */\nexport const hexToNumberString = (data: HexString): string => hexToNumber(data).toString();\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n * @param str - Utf8 string to be converted\n * @returns - The hex representation of the input string\n *\n * @example\n * ```ts\n * console.log(utf8ToHex('web3.js'));\n * > \"0x776562332e6a73\"\n *\n */\nexport const utf8ToHex = (str: string): HexString => {\n\tvalidator.validate(['string'], [str]);\n\n\t// To be compatible with 1.x trim null character\n\t// eslint-disable-next-line no-control-regex\n\tlet strWithoutNullCharacter = str.replace(/^(?:\\u0000)/, '');\n\t// eslint-disable-next-line no-control-regex\n\tstrWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\\u0000)$/, '');\n\n\treturn bytesToHex(new TextEncoder().encode(strWithoutNullCharacter));\n};\n\n/**\n * @alias utf8ToHex\n */\n\nexport const fromUtf8 = utf8ToHex;\n/**\n * @alias utf8ToHex\n */\nexport const stringToHex = utf8ToHex;\n\n/**\n * Should be called to get utf8 from it's hex representation\n * @param str - Hex string to be converted\n * @returns - Utf8 string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToUtf8 = (str: HexString): string => bytesToUtf8(hexToBytes(str));\n\n/**\n * @alias hexToUtf8\n */\nexport const toUtf8 = (input: HexString | Uint8Array) => {\n\tif (typeof input === 'string') {\n\t\treturn hexToUtf8(input);\n\t}\n\tvalidator.validate(['bytes'], [input]);\n\treturn bytesToUtf8(input);\n};\n\nexport const utf8ToBytes = ecUtf8ToBytes;\n\n/**\n * @alias hexToUtf8\n */\nexport const hexToString = hexToUtf8;\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n * @param str - String to be converted to hex\n * @returns - Hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.asciiToHex('Hello World'));\n * > 0x48656c6c6f20576f726c64\n * ```\n */\nexport const asciiToHex = (str: string): HexString => {\n\tvalidator.validate(['string'], [str]);\n\tlet hexString = '';\n\tfor (let i = 0; i < str.length; i += 1) {\n\t\tconst hexCharCode = str.charCodeAt(i).toString(16);\n\t\t// might need a leading 0\n\t\thexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;\n\t}\n\treturn `0x${hexString}`;\n};\n\n/**\n * @alias asciiToHex\n */\nexport const fromAscii = asciiToHex;\n\n/**\n * Should be called to get ascii from it's hex representation\n * @param str - Hex string to be converted to ascii\n * @returns - Ascii string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToAscii = (str: HexString): string => {\n\tconst decoder = new TextDecoder('ascii');\n\treturn decoder.decode(hexToBytes(str));\n};\n\n/**\n * @alias hexToAscii\n */\nexport const toAscii = hexToAscii;\n\n/**\n * Auto converts any given value into it's hex representation.\n * @param value - Value to be converted to hex\n * @param returnType - If true, it will return the type of the value\n *\n * @example\n * ```ts\n * console.log(web3.utils.toHex(10));\n * > 0xa\n *\n * console.log(web3.utils.toHex('0x123', true));\n * > bytes\n *```\n */\nexport const toHex = (\n\tvalue: Numbers | Bytes | Address | boolean | object,\n\treturnType?: boolean,\n): HexString | ValueTypes => {\n\tif (typeof value === 'string' && isAddress(value)) {\n\t\treturn returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;\n\t}\n\n\tif (typeof value === 'boolean') {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\treturn returnType ? 'bool' : value ? '0x01' : '0x00';\n\t}\n\n\tif (typeof value === 'number') {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\treturn returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn returnType ? 'bigint' : numberToHex(value);\n\t}\n\n\tif (typeof value === 'object' && !!value) {\n\t\treturn returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n\t}\n\n\tif (typeof value === 'string') {\n\t\tif (value.startsWith('-0x') || value.startsWith('-0X')) {\n\t\t\treturn returnType ? 'int256' : numberToHex(value);\n\t\t}\n\n\t\tif (isHexStrict(value)) {\n\t\t\treturn returnType ? 'bytes' : value;\n\t\t}\n\t\tif (isHex(value) && !isInt(value)) {\n\t\t\treturn returnType ? 'bytes' : `0x${value}`;\n\t\t}\n\n\t\tif (!Number.isFinite(value)) {\n\t\t\treturn returnType ? 'string' : utf8ToHex(value);\n\t\t}\n\t}\n\n\tthrow new HexProcessingError(value);\n};\n\n/**\n * Converts any given value into it's number representation, if possible, else into it's bigint representation.\n * @param value - The value to convert\n * @returns - Returns the value in number or bigint representation\n *\n * @example\n * ```ts\n * console.log(web3.utils.toNumber(1));\n * > 1\n * console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));\n * > 9007199254740992n\n *\n * ```\n */\nexport const toNumber = (value: Numbers): number | bigint => {\n\tif (typeof value === 'number') {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER\n\t\t\t? Number(value)\n\t\t\t: value;\n\t}\n\n\tif (typeof value === 'string' && isHexStrict(value)) {\n\t\treturn hexToNumber(value);\n\t}\n\n\ttry {\n\t\treturn toNumber(BigInt(value));\n\t} catch {\n\t\tthrow new InvalidNumberError(value);\n\t}\n};\n\n/**\n * Auto converts any given value into it's bigint representation\n *\n * @param value - The value to convert\n * @returns - Returns the value in bigint representation\n\n * @example\n * ```ts\n * console.log(web3.utils.toBigInt(1));\n * > 1n\n * ```\n */\nexport const toBigInt = (value: unknown): bigint => {\n\tif (typeof value === 'number') {\n\t\treturn BigInt(value);\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn value;\n\t}\n\n\t// isHex passes for dec, too\n\tif (typeof value === 'string' && isHex(value)) {\n\t\tif (value.startsWith('-')) {\n\t\t\treturn -BigInt(value.substring(1));\n\t\t}\n\t\treturn BigInt(value);\n\t}\n\n\tthrow new InvalidNumberError(value);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n * @param number - The value in wei\n * @param unit - The unit to convert to\n * @returns - Returns the converted value in the given unit\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromWei(\"1\", \"ether\"));\n * > 0.000000000000000001\n *\n * console.log(web3.utils.fromWei(\"1\", \"shannon\"));\n * > 0.000000001\n * ```\n */\nexport const fromWei = (number: Numbers, unit: EtherUnits): string => {\n\tconst denomination = ethUnitMap[unit];\n\n\tif (!denomination) {\n\t\tthrow new InvalidUnitError(unit);\n\t}\n\n\t// value in wei would always be integer\n\t// 13456789, 1234\n\tconst value = String(toNumber(number));\n\n\t// count number of zeros in denomination\n\t// 1000000 -> 6\n\tconst numberOfZerosInDenomination = denomination.toString().length - 1;\n\n\tif (numberOfZerosInDenomination <= 0) {\n\t\treturn value.toString();\n\t}\n\n\t// pad the value with required zeros\n\t// 13456789 -> 13456789, 1234 -> 001234\n\tconst zeroPaddedValue = value.padStart(numberOfZerosInDenomination, '0');\n\n\t// get the integer part of value by counting number of zeros from start\n\t// 13456789 -> '13'\n\t// 001234 -> ''\n\tconst integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);\n\n\t// get the fraction part of value by counting number of zeros backward\n\t// 13456789 -> '456789'\n\t// 001234 -> '001234'\n\tconst fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\\.?0+$/, '');\n\n\tif (integer === '') {\n\t\treturn `0.${fraction}`;\n\t}\n\n\tif (fraction === '') {\n\t\treturn integer;\n\t}\n\n\treturn `${integer}.${fraction}`;\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * @param number - The number to convert.\n * @param unit - {@link EtherUnits} The unit of the number passed.\n * @returns The number converted to wei.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toWei(\"0.001\", \"ether\"));\n * > 1000000000000000 //(wei)\n * ```\n */\n// todo in 1.x unit defaults to 'ether'\nexport const toWei = (number: Numbers, unit: EtherUnits): string => {\n\tvalidator.validate(['number'], [number]);\n\n\tconst denomination = ethUnitMap[unit];\n\n\tif (!denomination) {\n\t\tthrow new InvalidUnitError(unit);\n\t}\n\n\t// if value is decimal e.g. 24.56 extract `integer` and `fraction` part\n\t// to avoid `fraction` to be null use `concat` with empty string\n\tconst [integer, fraction] = String(\n\t\ttypeof number === 'string' && !isHexStrict(number) ? number : toNumber(number),\n\t)\n\t\t.split('.')\n\t\t.concat('');\n\n\t// join the value removing `.` from\n\t// 24.56 -> 2456\n\tconst value = BigInt(`${integer}${fraction}`);\n\n\t// multiply value with denomination\n\t// 2456 * 1000000 -> 2456000000\n\tconst updatedValue = value * denomination;\n\n\t// count number of zeros in denomination\n\tconst numberOfZerosInDenomination = denomination.toString().length - 1;\n\n\t// check which either `fraction` or `denomination` have lower number of zeros\n\tconst decimals = Math.min(fraction.length, numberOfZerosInDenomination);\n\n\tif (decimals === 0) {\n\t\treturn updatedValue.toString();\n\t}\n\n\t// Add zeros to make length equal to required decimal points\n\t// If string is larger than decimal points required then remove last zeros\n\treturn updatedValue.toString().padStart(decimals, '0').slice(0, -decimals);\n};\n\n/**\n * Will convert an upper or lowercase Ethereum address to a checksum address.\n * @param address - An address string\n * @returns\tThe checksum address\n * @example\n * ```ts\n * web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n * > \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n * ```\n */\nexport const toChecksumAddress = (address: Address): string => {\n\tif (!isAddress(address, false)) {\n\t\tthrow new InvalidAddressError(address);\n\t}\n\n\tconst lowerCaseAddress = address.toLowerCase().replace(/^0x/i, '');\n\n\tconst hash = utils.uint8ArrayToHexString(keccak256(utf8ToBytes(lowerCaseAddress)));\n\n\tif (\n\t\tisNullish(hash) ||\n\t\thash === '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\t)\n\t\treturn ''; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n\n\tlet checksumAddress = '0x';\n\n\tconst addressHash = hash.replace(/^0x/i, '');\n\n\tfor (let i = 0; i < lowerCaseAddress.length; i += 1) {\n\t\t// If ith character is 8 to f then make it uppercase\n\t\tif (parseInt(addressHash[i], 16) > 7) {\n\t\t\tchecksumAddress += lowerCaseAddress[i].toUpperCase();\n\t\t} else {\n\t\t\tchecksumAddress += lowerCaseAddress[i];\n\t\t}\n\t}\n\treturn checksumAddress;\n};\n\nexport const toBool = (value: boolean | string | number | unknown): boolean => {\n\tif (typeof value === 'boolean') {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'number' && (value === 0 || value === 1)) {\n\t\treturn Boolean(value);\n\t}\n\n\tif (typeof value === 'bigint' && (value === BigInt(0) || value === BigInt(1))) {\n\t\treturn Boolean(value);\n\t}\n\n\tif (\n\t\ttypeof value === 'string' &&\n\t\t!isHexStrict(value) &&\n\t\t(value === '1' || value === '0' || value === 'false' || value === 'true')\n\t) {\n\t\tif (value === 'true') {\n\t\t\treturn true;\n\t\t}\n\t\tif (value === 'false') {\n\t\t\treturn false;\n\t\t}\n\t\treturn Boolean(Number(value));\n\t}\n\n\tif (typeof value === 'string' && isHexStrict(value) && (value === '0x1' || value === '0x0')) {\n\t\treturn Boolean(toNumber(value));\n\t}\n\n\tthrow new InvalidBooleanError(value);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}