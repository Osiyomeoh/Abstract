{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-types\\src\\utility_types.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Numbers } from './primitives_types.js';\n\n// Make each attribute mutable by removing `readonly`\nexport type Mutable<T> = {\n\t-readonly [P in keyof T]: T[P];\n};\n\nexport type ConnectionEvent = {\n\tcode: number;\n\treason: string;\n\twasClean?: boolean; // if WS connection was closed properly\n};\n\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\nexport type EncodingTypes = Numbers | boolean | Numbers[] | boolean[];\n\nexport type TypedObject = {\n\ttype: string;\n\tvalue: EncodingTypes;\n};\n\nexport type TypedObjectAbbreviated = {\n\tt: string;\n\tv: EncodingTypes;\n};\n\nexport type Sha3Input = TypedObject | TypedObjectAbbreviated | Numbers | boolean | object;\n\nexport type IndexKeysForArray<A extends readonly unknown[]> = Exclude<keyof A, keyof []>;\n\nexport type ArrayToIndexObject<T extends ReadonlyArray<unknown>> = {\n\t[K in IndexKeysForArray<T>]: T[K];\n};\n\ntype _Grow<T, A extends Array<T>> = ((x: T, ...xs: A) => void) extends (...a: infer X) => void\n\t? X\n\t: never;\n\nexport type GrowToSize<T, A extends Array<T>, N extends number> = {\n\t0: A;\n\t1: GrowToSize<T, _Grow<T, A>, N>;\n}[A['length'] extends N ? 0 : 1];\n\nexport type FixedSizeArray<T, N extends number> = GrowToSize<T, [], N>;\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}