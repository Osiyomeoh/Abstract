{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { isSupportedProvider, Web3Context } from 'web3-core';\nimport { TransactionNotFound } from 'web3-errors';\nimport { toChecksumAddress, isNullish } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport * as rpcMethodsWrappers from './rpc_method_wrappers.js';\nimport { LogsSubscription, NewPendingTransactionsSubscription, NewHeadsSubscription, SyncingSubscription } from './web3_subscriptions.js';\nexport const registeredSubscriptions = {\n  logs: LogsSubscription,\n  newPendingTransactions: NewPendingTransactionsSubscription,\n  newHeads: NewHeadsSubscription,\n  syncing: SyncingSubscription,\n  pendingTransactions: NewPendingTransactionsSubscription,\n  newBlockHeaders: NewHeadsSubscription // the same as newHeads. just for support API like in version 1.x\n};\nexport class Web3Eth extends Web3Context {\n  constructor(providerOrContext) {\n    if (typeof providerOrContext === 'string' || isSupportedProvider(providerOrContext)) {\n      super({\n        provider: providerOrContext,\n        registeredSubscriptions\n      });\n      return;\n    }\n    if (providerOrContext.registeredSubscriptions) {\n      super(providerOrContext);\n      return;\n    }\n    super(Object.assign(Object.assign({}, providerOrContext), {\n      registeredSubscriptions\n    }));\n  }\n  /**\n   * @returns Returns the ethereum protocol version of the node.\n   *\n   * ```ts\n   * web3.eth.getProtocolVersion().then(console.log);\n   * > \"63\"\n   * ```\n   */\n  getProtocolVersion() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getProtocolVersion(this.requestManager);\n    });\n  }\n  // TODO Add returnFormat parameter\n  /**\n   * Checks if the node is currently syncing.\n   *\n   * @returns Either a {@link SyncingStatusAPI}, or `false`.\n   *\n   * ```ts\n   * web3.eth.isSyncing().then(console.log);\n   * > {\n   *     startingBlock: 100,\n   *     currentBlock: 312,\n   *     highestBlock: 512,\n   *     knownStates: 234566,\n   *     pulledStates: 123455\n   * }\n   * ```\n   */\n  isSyncing() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getSyncing(this.requestManager);\n    });\n  }\n  // TODO consider adding returnFormat parameter (to format address as bytes)\n  /**\n   * @returns Returns the coinbase address to which mining rewards will go.\n   *\n   * ```ts\n   * web3.eth.getCoinbase().then(console.log);\n   * > \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\"\n   * ```\n   */\n  getCoinbase() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getCoinbase(this.requestManager);\n    });\n  }\n  /**\n   * Checks whether the node is mining or not.\n   *\n   * @returns `true` if the node is mining, otherwise `false`.\n   *\n   * ```ts\n   * web3.eth.isMining().then(console.log);\n   * > true\n   * ```\n   */\n  isMining() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getMining(this.requestManager);\n    });\n  }\n  /**\n   * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.\n   *\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The number of hashes per second that the node is mining with.\n   *\n   * ```ts\n   * web3.eth.getHashrate().then(console.log);\n   * > 493736n\n   *\n   * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > \"0x788a8\"\n   * ```\n   */\n  getHashrate(returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.getHashRate(returnFormat);\n    });\n  }\n  /**\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The number of hashes per second that the node is mining with.\n   *\n   * ```ts\n   * web3.eth.getHashRate().then(console.log);\n   * > 493736n\n   *\n   * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > \"0x788a8\"\n   * ```\n   */\n  getHashRate(returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getHashRate(this, returnFormat);\n    });\n  }\n  /**\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The gas price determined by the last few blocks median gas price.\n   *\n   * ```ts\n   * web3.eth.getGasPrice().then(console.log);\n   * > 20000000000n\n   *\n   * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > \"0x4a817c800\"\n   * ```\n   */\n  getGasPrice(returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getGasPrice(this, returnFormat);\n    });\n  }\n  /**\n   * @returns A list of accounts the node controls (addresses are checksummed).\n   *\n   * ```ts\n   * web3.eth.getAccounts().then(console.log);\n   * > [\"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", \"0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf\"]\n   * ```\n   */\n  getAccounts() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const hexAddresses = (_a = yield ethRpcMethods.getAccounts(this.requestManager)) !== null && _a !== void 0 ? _a : [];\n      return hexAddresses.map(address => toChecksumAddress(address));\n    });\n  }\n  /**\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The current block number.\n   *\n   * ```ts\n   * web3.eth.getBlockNumber().then(console.log);\n   * > 2744n\n   *\n   * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > \"0xab8\"\n   * ```\n   */\n  getBlockNumber(returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBlockNumber(this, returnFormat);\n    });\n  }\n  /**\n   * Get the balance of an address at a given block.\n   *\n   * @param address The address to get the balance of.\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The current balance for the given address in `wei`.\n   *\n   * ```ts\n   * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n   * > 1000000000000n\n   *\n   * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n   * > \"0xe8d4a51000\"\n   * ```\n   */\n  getBalance(address, blockNumber = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);\n    });\n  }\n  /**\n   * Get the storage at a specific position of an address.\n   *\n   * @param address The address to get the storage from.\n   * @param storageSlot The index position of the storage.\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The value in storage at the given position.\n   *\n   * ```ts\n   * web3.eth.getStorageAt(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\", 0).then(console.log);\n   * > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"\n   *\n   * web3.eth.getStorageAt(\n   *      \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\",\n   *      0,\n   *      undefined,\n   *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n   * ).then(console.log);\n   * > Uint8Array(31) [\n   *       3, 52,  86, 115,  33,  35, 255, 255,\n   *       35, 66,  52,  45, 209,  35,  66,  67,\n   *       67, 36,  35,  66,  52, 253,  35,  79,\n   *       210, 63, 212, 242,  61,  66,  52\n   *    ]\n   * ```\n   */\n  getStorageAt(address, storageSlot, blockNumber = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getStorageAt(this, address, storageSlot, blockNumber, returnFormat);\n    });\n  }\n  /**\n   * Get the code at a specific address.\n   *\n   * @param address The address to get the code from.\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.\n   *\n   * ```ts\n   * web3.eth.getCode(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\").then(console.log);\n   * > \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"\n   *\n   * web3.eth.getCode(\n   *      \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n   *      undefined,\n   *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n   * ).then(console.log);\n   * > Uint8Array(50) [\n   *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,\n   *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,\n   *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,\n   *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,\n   *   144, 80, 145, 144,  80, 86\n   * ]\n   * ```\n   */\n  getCode(address, blockNumber = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);\n    });\n  }\n  /**\n   * Retrieves a {@link Block} matching the provided block number, block hash or block tag.\n   *\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n   * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).\n   * @returns A {@link Block} object matching the provided block number or block hash.\n   *\n   * ```ts\n   * web3.eth.getBlock(0).then(console.log);\n   * > {\n   *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n   *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n   *    miner: '0x0000000000000000000000000000000000000000',\n   *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n   *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n   *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n   *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *    difficulty: 1n,\n   *    number: 0n,\n   *    gasLimit: 30000000n,\n   *    gasUsed: 0n,\n   *    timestamp: 1658281638n,\n   *    extraData: '0x',\n   *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *    nonce: 0n,\n   *    totalDifficulty: 1n,\n   *    baseFeePerGas: 1000000000n,\n   *    size: 514n,\n   *    transactions: [],\n   *    uncles: []\n   *  }\n   *\n   * web3.eth.getBlock(\n   *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n   *      false,\n   *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * > {\n   *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n   *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n   *    miner: '0x0000000000000000000000000000000000000000',\n   *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n   *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n   *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n   *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *    difficulty: 1,\n   *    number: 0,\n   *    gasLimit: 30000000,\n   *    gasUsed: 0,\n   *    timestamp: 1658281638,\n   *    extraData: '0x',\n   *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *    nonce: 0,\n   *    totalDifficulty: 1,\n   *    baseFeePerGas: 1000000000,\n   *    size: 514,\n   *    transactions: [],\n   *    uncles: []\n   *  }\n   * ```\n   */\n  getBlock(block = this.defaultBlock, hydrated = false, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);\n    });\n  }\n  /**\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The number of transactions in the provided block.\n   *\n   * ```ts\n   * web3.eth.getBlockTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n   * > 1n\n   *\n   * web3.eth.getBlockTransactionCount(\n   *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * > 1\n   * ```\n   */\n  getBlockTransactionCount(block = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);\n    });\n  }\n  /**\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.\n   *\n   * ```ts\n   * web3.eth.getBlockUncleCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n   * > 1n\n   *\n   * web3.eth.getBlockUncleCount(\n   *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * > 1\n   * ```\n   */\n  getBlockUncleCount(block = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);\n    });\n  }\n  /**\n   *\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n   * @param uncleIndex The index position of the uncle.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.\n   *\n   * ```ts\n   * web3.eth.getUncle(0, 1).then(console.log);\n   * > {\n   *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n   *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n   *    miner: '0x0000000000000000000000000000000000000000',\n   *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n   *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n   *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n   *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *    difficulty: 1n,\n   *    number: 0n,\n   *    gasLimit: 30000000n,\n   *    gasUsed: 0n,\n   *    timestamp: 1658281638n,\n   *    extraData: '0x',\n   *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *    nonce: 0n,\n   *    totalDifficulty: 1n,\n   *    baseFeePerGas: 1000000000n,\n   *    size: 514n,\n   *    transactions: [],\n   *    uncles: []\n   *  }\n   *\n   * web3.eth.getUncle(\n   *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n   *      1,\n   *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * > {\n   *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n   *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n   *    miner: '0x0000000000000000000000000000000000000000',\n   *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n   *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n   *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n   *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *    difficulty: 1,\n   *    number: 0,\n   *    gasLimit: 30000000,\n   *    gasUsed: 0,\n   *    timestamp: 1658281638,\n   *    extraData: '0x',\n   *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *    nonce: 0,\n   *    totalDifficulty: 1,\n   *    baseFeePerGas: 1000000000,\n   *    size: 514,\n   *    transactions: [],\n   *    uncles: []\n   *  }\n   * ```\n   */\n  getUncle(block = this.defaultBlock, uncleIndex, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);\n    });\n  }\n  /**\n   * @param transactionHash The hash of the desired transaction.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The desired transaction object.\n   *\n   * ```ts\n   * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);\n   * {\n   *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n   *    type: 0n,\n   *    nonce: 0n,\n   *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n   *    blockNumber: 1n,\n   *    transactionIndex: 0n,\n   *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *    value: 1n,\n   *    gas: 90000n,\n   *    gasPrice: 2000000000n,\n   *    input: '0x',\n   *    v: 2709n,\n   *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n   *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n   *  }\n   *\n   * web3.eth.getTransaction(\n   *     web3.utils.hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * {\n   *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n   *    type: 0,\n   *    nonce: 0,\n   *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n   *    blockNumber: 1,\n   *    transactionIndex: 0,\n   *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *    value: 1,\n   *    gas: 90000,\n   *    gasPrice: 2000000000,\n   *    input: '0x',\n   *    v: 2709,\n   *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n   *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n   *  }\n   * ```\n   */\n  getTransaction(transactionHash, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield rpcMethodsWrappers.getTransaction(this, transactionHash, returnFormat);\n      if (!response) throw new TransactionNotFound();\n      return response;\n    });\n  }\n  /**\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns A list of pending transactions.\n   *\n   * ```ts\n   * web3.eth.getPendingTransactions().then(console.log);\n   * > [\n   *      {\n   *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n   *          type: 0n,\n   *          nonce: 0n,\n   *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *          blockNumber: null,\n   *          transactionIndex: 0n,\n   *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *          value: 1n,\n   *          gas: 90000n,\n   *          gasPrice: 2000000000n,\n   *          input: '0x',\n   *          v: 2709n,\n   *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n   *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n   *      },\n   *      {\n   *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n   *          type: 0n,\n   *          nonce: 1n,\n   *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *          blockNumber: null,\n   *          transactionIndex: 0n,\n   *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *          value: 1n,\n   *          gas: 90000n,\n   *          gasPrice: 2000000000n,\n   *          input: '0x',\n   *          v: 2710n,\n   *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n   *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n   *      }\n   *   ]\n   *\n   * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > [\n   *      {\n   *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n   *          type: 0,\n   *          nonce: 0,\n   *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *          blockNumber: null,\n   *          transactionIndex: 0,\n   *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *          value: 1,\n   *          gas: 90000,\n   *          gasPrice: 2000000000,\n   *          input: '0x',\n   *          v: 2709,\n   *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n   *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n   *      },\n   *      {\n   *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n   *          type: 0,\n   *          nonce: 1,\n   *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n   *          blockNumber: null,\n   *          transactionIndex: 0,\n   *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *          value: 1,\n   *          gas: 90000,\n   *          gasPrice: 2000000000,\n   *          input: '0x',\n   *          v: 2710,\n   *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n   *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n   *      }\n   *   ]\n   * ```\n   */\n  getPendingTransactions(returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getPendingTransactions(this, returnFormat);\n    });\n  }\n  /**\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n   * @param transactionIndex The index position of the transaction.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The desired transaction object.\n   *\n   * ```ts\n   * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);\n   * {\n   *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n   *    type: 0n,\n   *    nonce: 0n,\n   *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n   *    blockNumber: 1n,\n   *    transactionIndex: 0n,\n   *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *    value: 1n,\n   *    gas: 90000n,\n   *    gasPrice: 2000000000n,\n   *    input: '0x',\n   *    v: 2709n,\n   *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n   *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n   *  }\n   *\n   * web3.eth.getTransactionFromBlock(\n   *     hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n   *     0,\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * {\n   *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n   *    type: 0,\n   *    nonce: 0,\n   *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n   *    blockNumber: 1,\n   *    transactionIndex: 0,\n   *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *    value: 1,\n   *    gas: 90000,\n   *    gasPrice: 2000000000,\n   *    input: '0x',\n   *    v: 2709,\n   *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n   *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n   *  }\n   * ```\n   */\n  getTransactionFromBlock(block = this.defaultBlock, transactionIndex, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getTransactionFromBlock(this, block, transactionIndex, returnFormat);\n    });\n  }\n  /**\n   * @param transactionHash Hash of the transaction to retrieve the receipt for.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The desired {@link TransactionReceipt} object.\n   *\n   * ```ts\n   * web3.eth.getTransactionReceipt(\"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\").then(console.log);\n   * > {\n   *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n   *      transactionIndex: 0n,\n   *      blockNumber: 2n,\n   *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n   *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *      cumulativeGasUsed: 21000n,\n   *      gasUsed: 21000n,\n   *      logs: [],\n   *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *      status: 1n,\n   *      effectiveGasPrice: 2000000000n,\n   *      type: 0n\n   *  }\n   *\n   * web3.eth.getTransactionReceipt(\n   *      \"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\",\n   *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * > {\n   *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n   *      transactionIndex: 0,\n   *      blockNumber: 2,\n   *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n   *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *      cumulativeGasUsed: 21000,\n   *      gasUsed: 21000,\n   *      logs: [],\n   *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *      status: 1,\n   *      effectiveGasPrice: 2000000000,\n   *      type: 0n\n   *  }\n   * ```\n   */\n  getTransactionReceipt(transactionHash, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield rpcMethodsWrappers.getTransactionReceipt(this, transactionHash, returnFormat);\n      if (!response) throw new TransactionNotFound();\n      return response;\n    });\n  }\n  /**\n   * @param address The address to get the number of transactions for.\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The number of transactions sent from the provided address.\n   *\n   * ```ts\n   * web3.eth.getTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n   * > 1n\n   *\n   * web3.eth.getTransactionCount(\n   *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n   *     undefined,\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * > 1\n   * ```\n   */\n  getTransactionCount(address, blockNumber = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);\n    });\n  }\n  /**\n   * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @param options A configuration object used to change the behavior of the `sendTransaction` method.\n   * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n   * ```ts\n   * const transaction = {\n   *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n   *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n   *   value: '0x1'\n   * }\n   *\n   * const transactionHash = await web3.eth.sendTransaction(transaction);\n   * console.log(transactionHash);\n   * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n   *\n   * web3.eth.sendTransaction(transaction).then(console.log);\n   * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n   *\n   * web3.eth.sendTransaction(transaction).catch(console.log);\n   * > <Some TransactionError>\n   *\n   * // Example using options.ignoreGasPricing = true\n   * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);\n   * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n   * ```\n   *\n   *\n   * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n   * - `sending`\n   * ```ts\n   * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n   * > {\n   *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n   *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n   *    value: '0x1',\n   *    gasPrice: '0x77359400',\n   *    maxPriorityFeePerGas: undefined,\n   *    maxFeePerGas: undefined\n   * }\n   * ```\n   * - `sent`\n   * ```ts\n   * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));\n   * > {\n   *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n   *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n   *    value: '0x1',\n   *    gasPrice: '0x77359400',\n   *    maxPriorityFeePerGas: undefined,\n   *    maxFeePerGas: undefined\n   * }\n   * ```\n   * - `transactionHash`\n   * ```ts\n   * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));\n   * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n   * ```\n   * - `receipt`\n   * ```ts\n   * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));\n   * > {\n   *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n   *      transactionIndex: 0n,\n   *      blockNumber: 2n,\n   *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n   *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *      cumulativeGasUsed: 21000n,\n   *      gasUsed: 21000n,\n   *      logs: [],\n   *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *      status: 1n,\n   *      effectiveGasPrice: 2000000000n,\n   *      type: 0n\n   * }\n   * ```\n   * - `confirmation`\n   * ```ts\n   * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));\n   * > {\n   *     confirmations: 1n,\n   *     receipt: {\n   *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',\n   *         transactionIndex: 0n,\n   *         blockNumber: 5n,\n   *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',\n   *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n   *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n   *         cumulativeGasUsed: 21000n,\n   *         gasUsed: 21000n,\n   *         logs: [],\n   *         logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *         status: 1n,\n   *         effectiveGasPrice: 2000000000n,\n   *         type: 0n\n   *     },\n   *     latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'\n   * }\n   * ```\n   * - `error`\n   * ```ts\n   * web3.eth.sendTransaction(transaction).on('error', error => console.log);\n   * > <Some TransactionError>\n   * ```\n   */\n  sendTransaction(transaction, returnFormat = DEFAULT_RETURN_FORMAT, options) {\n    return rpcMethodsWrappers.sendTransaction(this, transaction, returnFormat, options);\n  }\n  /**\n   * @param transaction Signed transaction in one of the valid {@link Bytes} format.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n   * ```ts\n   * const signedTransaction = \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n   *\n   * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);\n   * console.log(transactionHash);\n   * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n   *\n   * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);\n   * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n   *\n   * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);\n   * > <Some TransactionError>\n   * ```\n   *\n   *\n   * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n   * - `sending`\n   * ```ts\n   * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n   * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n   * ```\n   * - `sent`\n   * ```ts\n   * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));\n   * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n   * ```\n   * - `transactionHash`\n   * ```ts\n   * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));\n   * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n   * ```\n   * - `receipt`\n   * ```ts\n   * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));\n   * > {\n   *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n   *      blockNumber: 1n,\n   *      cumulativeGasUsed: 21000n,\n   *      effectiveGasPrice: 1000000001n,\n   *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n   *      gasUsed: 21000n,\n   *      logs: [],\n   *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *      status: 1n,\n   *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n   *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n   *      transactionIndex: 0n,\n   *      type: 0n\n   * }\n   * ```\n   * - `confirmation`\n   * ```ts\n   * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));\n   * > {\n   *     confirmations: 1n,\n   *     receipt: {\n   *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n   *          blockNumber: 1n,\n   *          cumulativeGasUsed: 21000n,\n   *          effectiveGasPrice: 1000000001n,\n   *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n   *          gasUsed: 21000n,\n   *          logs: [],\n   *          logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n   *          status: 1n,\n   *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n   *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n   *          transactionIndex: 0n,\n   *          type: 0n\n   *     },\n   *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'\n   * }\n   * ```\n   * - `error`\n   * ```ts\n   * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));\n   * > <Some TransactionError>\n   * ```\n   */\n  sendSignedTransaction(transaction, returnFormat = DEFAULT_RETURN_FORMAT, options) {\n    return rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);\n  }\n  /**\n   * @param message Data to sign in one of the valid {@link Bytes} format.\n   * @param address Address to sign data with, can be an address or the index of a local wallet.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns The signed `message`.\n   *\n   * ```ts\n   * // Using an unlocked account managed by connected RPC client\n   * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\").then(console.log);\n   * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n   *\n   * // Using an unlocked account managed by connected RPC client\n   * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);\n   * > Uint8Array(65) [\n   *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,\n   *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,\n   *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,\n   *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,\n   *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,\n   *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0\n   * ]\n   * ```\n   *\n   * // Using an indexed account managed by local Web3 wallet\n   * web3.eth.sign(\"0x48656c6c6f20776f726c64\", 0).then(console.log);\n   * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n   */\n  sign(message, address, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.sign(this, message, address, returnFormat);\n    });\n  }\n  /**\n   * @param transaction The transaction object to sign.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n   * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n   *\n   * ```ts\n   * const transaction = {\n   *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n   *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n   *      value: '0x1',\n   *      gas: '21000',\n   *      gasPrice: await web3Eth.getGasPrice(),\n   *      nonce: '0x1',\n   *      type: '0x0'\n   * }\n   *\n   * web3.eth.signTransaction(transaction).then(console.log);\n   * > {\n   *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n   *   tx: {\n   *      type: 0n,\n   *      nonce: 1n,\n   *      gasPrice: 1000000001n,\n   *      gas: 21000n,\n   *      value: 1n,\n   *      v: 2710n,\n   *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n   *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n   *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n   *      data: '0x'\n   *   }\n   * }\n   *\n   * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > {\n   *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n   *   tx: {\n   *      type: 0,\n   *      nonce: 1,\n   *      gasPrice: 1000000001,\n   *      gas: 21000,\n   *      value: 1,\n   *      v: 2710,\n   *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n   *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n   *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n   *      data: '0x'\n   *   }\n   * }\n   * ```\n   */\n  signTransaction(transaction, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);\n    });\n  }\n  // TODO Decide what to do with transaction.to\n  // https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n  /**\n   * Executes a message call within the EVM without creating a transaction.\n   * It does not publish anything to the blockchain and does not consume any gas.\n   *\n   * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   * @returns The returned data of the call, e.g. a smart contract function's return value.\n   */\n  call(transaction, blockNumber = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);\n    });\n  }\n  /**\n   * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.\n   * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting\n   * with a contract as a result of updating the contract's state.\n   *\n   * @param transaction The {@link Transaction} object to estimate the gas for.\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   * @returns The used gas for the simulated transaction execution.\n   *\n   * ```ts\n   * const transaction = {\n   *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n   *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n   *       value: '0x1',\n   *       nonce: '0x1',\n   *       type: '0x0'\n   * }\n   *\n   * web3.eth.estimateGas(transaction).then(console.log);\n   * > 21000n\n   *\n   * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > 21000\n   * ```\n   */\n  estimateGas(transaction, blockNumber = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);\n    });\n  }\n  /**\n   * Gets past logs, matching the provided `filter`.\n   *\n   * @param filter A {@link Filter} object containing the properties for the desired logs.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\n   *\n   * ```ts\n   * web3.eth.getPastLogs({\n   *      address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n   *      topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n   *  }).then(console.log);\n   * > [{\n   *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n   *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n   *       logIndex: 0n,\n   *       transactionIndex: 0n,\n   *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n   *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n   *       blockNumber: 1234n,\n   *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n   *   },\n   *   {...}]\n   *\n   * web3.eth.getPastLogs(\n   *     {\n   *       address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n   *       topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n   *     },\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * > [{\n   *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n   *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n   *       logIndex: 0,\n   *       transactionIndex: 0,\n   *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n   *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n   *       blockNumber: 1234,\n   *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n   *   },\n   *   {...}]\n   * ```\n   */\n  getPastLogs(filter, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getLogs(this, filter, returnFormat);\n    });\n  }\n  /**\n   * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\n   *\n   * @returns The mining work as an array of strings with the following structure:\n   *\n   * String 32 Bytes - at index 0: current block header pow-hash\n   * String 32 Bytes - at index 1: the seed hash used for the DAG.\n   * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.\n   *\n   * ```ts\n   * web3.eth.getWork().then(console.log);\n   * > [\n   *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n   *     \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\",\n   *     \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\"\n   * ]\n   * ```\n   */\n  getWork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getWork(this.requestManager);\n    });\n  }\n  /**\n   * Used for submitting a proof-of-work solution.\n   *\n   * @param nonce The nonce found (8 bytes).\n   * @param hash  The header’s pow-hash (32 bytes).\n   * @param digest The mix digest (32 bytes).\n   * @returns Returns `true` if the provided solution is valid, otherwise `false`.\n   *\n   * ```ts\n   * web3.eth.submitWork([\n   *     \"0x0000000000000001\",\n   *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n   *     \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\"\n   * ]).then(console.log);\n   * > true\n   * ```\n   */\n  submitWork(nonce, hash, digest) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);\n    });\n  }\n  // TODO - Format addresses\n  /**\n   * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)\n   * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.\n   * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).\n   * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.\n   *\n   * @returns An array of enabled accounts.\n   *\n   * ```ts\n   * web3.eth.requestAccounts().then(console.log);\n   * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']\n   * ```\n   */\n  requestAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.requestAccounts(this.requestManager);\n    });\n  }\n  /**\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).\n   *\n   * ```ts\n   * web3.eth.getChainId().then(console.log);\n   * > 61n\n   *\n   * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > 61\n   * ```\n   */\n  getChainId(returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getChainId(this, returnFormat);\n    });\n  }\n  /**\n   * @returns The current client version.\n   *\n   * ```ts\n   * web3.eth.getNodeInfo().then(console.log);\n   * > \"Mist/v0.9.3/darwin/go1.4.1\"\n   * ```\n   */\n  getNodeInfo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getNodeInfo(this.requestManager);\n    });\n  }\n  /**\n   * @param address The Address of the account or contract.\n   * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).\n   *\n   * ```ts\n   * web3.eth.getProof(\n   *     \"0x1234567890123456789012345678901234567890\",\n   *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n   *     \"latest\"\n   * ).then(console.log);\n   * > {\n   *     \"address\": \"0x1234567890123456789012345678901234567890\",\n   *     \"accountProof\": [\n   *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n   *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n   *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n   *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n   *     ],\n   *     \"balance\": 0n,\n   *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n   *     \"nonce\": 0n,\n   *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n   *     \"storageProof\": [\n   *         {\n   *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   *             \"value\": 0n,\n   *             \"proof\": []\n   *         },\n   *         {\n   *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n   *             \"value\": 0n,\n   *             \"proof\": []\n   *         }\n   *     ]\n   * }\n   *\n   * web3.eth.getProof(\n   *     \"0x1234567890123456789012345678901234567890\",\n   *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n   *     undefined,\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n   * ).then(console.log);\n   * > {\n   *     \"address\": \"0x1234567890123456789012345678901234567890\",\n   *     \"accountProof\": [\n   *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n   *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n   *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n   *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n   *     ],\n   *     \"balance\": 0,\n   *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n   *     \"nonce\": 0,\n   *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n   *     \"storageProof\": [\n   *         {\n   *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   *             \"value\": 0,\n   *             \"proof\": []\n   *         },\n   *         {\n   *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n   *             \"value\": 0,\n   *             \"proof\": []\n   *         }\n   *     ]\n   * }\n   * ```\n   */\n  getProof(address, storageKeys, blockNumber = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);\n    });\n  }\n  // TODO Throwing an error with Geth, but not Infura\n  // TODO gasUsedRatio and reward not formatting\n  /**\n   * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n   * @param newestBlock Highest number block of the requested range.\n   * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.\n   * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.\n   * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.\n   *\n   * ```ts\n   * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);\n   * > {\n   *     baseFeePerGas: [\n   *         22983878621n,\n   *         21417903463n,\n   *         19989260230n,\n   *         17770954829n,\n   *         18850641304n\n   *     ],\n   *     gasUsedRatio: [\n   *         0.22746546666666667,\n   *         0.2331871,\n   *         0.05610054885262125,\n   *         0.7430227268212117\n   *     ],\n   *     oldestBlock: 15216343n,\n   *     reward: [\n   *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n   *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n   *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n   *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n   *     ]\n   * }\n   *\n   * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n   * > {\n   *     baseFeePerGas: [\n   *         22983878621,\n   *         21417903463,\n   *         19989260230,\n   *         17770954829,\n   *         18850641304\n   *     ],\n   *     gasUsedRatio: [\n   *         0.22746546666666667,\n   *         0.2331871,\n   *         0.05610054885262125,\n   *         0.7430227268212117\n   *     ],\n   *     oldestBlock: 15216343,\n   *     reward: [\n   *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n   *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n   *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n   *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n   *     ]\n   * }\n   * ```\n   */\n  getFeeHistory(blockCount, newestBlock = this.defaultBlock, rewardPercentiles, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);\n    });\n  }\n  /**\n   * This method generates an access list for a transaction.\n   *\n   * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.\n   * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n   * @example\n   * ```ts\n   * web3.eth.createAccessList({\n   * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',\n   * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',\n   * gasPrice: '0x3b9aca00',\n   * gas: '0x3d0900',\n   * to: '0x940b25304947ae863568B3804434EC77E2160b87'\n   * })\n   * .then(console.log);\n   *\n   * > {\n   *  \"accessList\": [\n   *     {\n   *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n   *       \"storageKeys\": [\n   *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n   *       ]\n   *     }\n   *   ],\n   *   \"gasUsed\": \"0x7671\"\n   * }\n   * ```\n   */\n  createAccessList(transaction, blockNumber = this.defaultBlock, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);\n    });\n  }\n  /**\n   * This method sends EIP-712 typed data to the RPC provider to be signed.\n   *\n   * @param address The address that corresponds with the private key used to sign the typed data.\n   * @param typedData The EIP-712 typed data object.\n   * @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.\n   * @returns The signed typed data.\n   */\n  signTypedData(address, typedData, useLegacy = false, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.signTypedData(this, address, typedData, useLegacy, returnFormat);\n    });\n  }\n  /**\n   * Lets you subscribe to specific events in the blockchain.\n   *\n   * @param name - The subscription you want to subscribe to.\n   * @param args - Optional additional parameters, depending on the subscription type.\n   * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:\n   *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.\n   *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.\n   *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.\n   *  - subscription.args: The subscription arguments, used when re-subscribing.\n   *\n   *\n   * You can use the subscription object to listen on:\n   *\n   * - on(\"data\") - Fires on each incoming log with the log object as argument.\n   * - on(\"changed\") - Fires on each log which was removed from the blockchain. The log will have the additional property \"removed: true\".\n   * - on(\"error\") - Fires when an error in the subscription occurs.\n   * - on(\"connected\") - Fires once after the subscription successfully connected. Returns the subscription id.\n   *\n   * @example **Subscribe to Smart Contract events**\n   * ```ts\n   * // Subscribe to `logs`\n   * const logSubscription = web3.eth.subscribe('logs', {\n   *     address: '0x1234567890123456789012345678901234567890',\n   *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']\n   * });\n   * logSubscription.on('data', (data: any) => console.log(data));\n   * logSubscription.on('error', (error: any) => console.log(error));\n   *\n   * ```\n   *\n   * @example **Subscribe to new block headers**\n   * ```ts\n   * // Subscribe to `newBlockHeaders`\n   * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');\n   *\n   * newBlocksSubscription.on('data', async blockhead => {\n   * \tconsole.log('New block header: ', blockhead);\n   *\n   * \t// You do not need the next line, if you like to keep notified for every new block\n   * \tawait newBlocksSubscription.unsubscribe();\n   * \tconsole.log('Unsubscribed from new block headers.');\n   * });\n   * newBlocksSubscription.on('error', error =>\n   * \tconsole.log('Error when subscribing to New block header: ', error),\n   * );\n   * ```\n   */\n  subscribe(name, args, returnFormat = DEFAULT_RETURN_FORMAT) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const subscription = yield (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe(name, args, returnFormat);\n      if (subscription instanceof LogsSubscription && name === 'logs' && typeof args === 'object' && !isNullish(args.fromBlock) && Number.isFinite(Number(args.fromBlock))) {\n        setImmediate(() => {\n          this.getPastLogs(args).then(logs => {\n            for (const log of logs) {\n              subscription._processSubscriptionResult(log);\n            }\n          }).catch(e => {\n            subscription._processSubscriptionError(e);\n          });\n        });\n      }\n      return subscription;\n    });\n  }\n  static shouldClearSubscription({\n    sub\n  }) {\n    return !(sub instanceof SyncingSubscription);\n  }\n  /**\n   * Resets subscriptions.\n   *\n   * @param notClearSyncing If `true` it keeps the `syncing` subscription.\n   * @returns A promise to an array of subscription ids that were cleared.\n   *\n   * ```ts\n   * web3.eth.clearSubscriptions().then(console.log);\n   * > [...] An array of subscription ids that were cleared\n   * ```\n   */\n  clearSubscriptions(notClearSyncing = false) {\n    var _a;\n    return (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.unsubscribe(\n    // eslint-disable-next-line\n    notClearSyncing ? Web3Eth.shouldClearSubscription : undefined);\n  }\n}","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","isSupportedProvider","Web3Context","TransactionNotFound","toChecksumAddress","isNullish","ethRpcMethods","rpcMethodsWrappers","LogsSubscription","NewPendingTransactionsSubscription","NewHeadsSubscription","SyncingSubscription","registeredSubscriptions","logs","newPendingTransactions","newHeads","syncing","pendingTransactions","newBlockHeaders","Web3Eth","constructor","providerOrContext","provider","Object","assign","getProtocolVersion","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashrate","returnFormat","getHashRate","getGasPrice","getAccounts","hexAddresses","_a","map","address","getBlockNumber","getBalance","blockNumber","defaultBlock","getStorageAt","storageSlot","getCode","getBlock","block","hydrated","getBlockTransactionCount","getBlockUncleCount","getUncle","uncleIndex","getTransaction","transactionHash","response","getPendingTransactions","getTransactionFromBlock","transactionIndex","getTransactionReceipt","getTransactionCount","sendTransaction","transaction","options","sendSignedTransaction","sign","message","signTransaction","call","estimateGas","getPastLogs","filter","getLogs","getWork","submitWork","nonce","hash","digest","requestAccounts","getChainId","getNodeInfo","getProof","storageKeys","getFeeHistory","blockCount","newestBlock","rewardPercentiles","createAccessList","signTypedData","typedData","useLegacy","subscribe","name","args","subscription","subscriptionManager","fromBlock","Number","isFinite","setImmediate","then","log","_processSubscriptionResult","catch","e","_processSubscriptionError","shouldClearSubscription","sub","clearSubscriptions","notClearSyncing","unsubscribe","undefined"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth\\src\\web3_eth.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\n\nimport {\n\tSupportedProviders,\n\tAddress,\n\tBytes,\n\tFilter,\n\tHexString32Bytes,\n\tHexString8Bytes,\n\tNumbers,\n\tBlockNumberOrTag,\n\tLogsOutput,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEip712TypedData,\n} from 'web3-types';\nimport { isSupportedProvider, Web3Context, Web3ContextInitOptions } from 'web3-core';\nimport { TransactionNotFound } from 'web3-errors';\nimport { toChecksumAddress, isNullish } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport * as rpcMethodsWrappers from './rpc_method_wrappers.js';\nimport { SendTransactionOptions } from './types.js';\nimport {\n\tLogsSubscription,\n\tNewPendingTransactionsSubscription,\n\tNewHeadsSubscription,\n\tSyncingSubscription,\n} from './web3_subscriptions.js';\n\nexport type RegisteredSubscription = {\n\tlogs: typeof LogsSubscription;\n\tnewPendingTransactions: typeof NewPendingTransactionsSubscription;\n\tpendingTransactions: typeof NewPendingTransactionsSubscription;\n\tnewHeads: typeof NewHeadsSubscription;\n\tnewBlockHeaders: typeof NewHeadsSubscription;\n\tsyncing: typeof SyncingSubscription;\n};\n\nexport const registeredSubscriptions = {\n\tlogs: LogsSubscription,\n\tnewPendingTransactions: NewPendingTransactionsSubscription,\n\tnewHeads: NewHeadsSubscription,\n\tsyncing: SyncingSubscription,\n\tpendingTransactions: NewPendingTransactionsSubscription, // the same as newPendingTransactions. just for support API like in version 1.x\n\tnewBlockHeaders: NewHeadsSubscription, // the same as newHeads. just for support API like in version 1.x\n};\n\nexport class Web3Eth extends Web3Context<Web3EthExecutionAPI, RegisteredSubscription> {\n\tpublic constructor(\n\t\tproviderOrContext?: SupportedProviders<any> | Web3ContextInitOptions | string,\n\t) {\n\t\tif (\n\t\t\ttypeof providerOrContext === 'string' ||\n\t\t\tisSupportedProvider(providerOrContext as SupportedProviders<any>)\n\t\t) {\n\t\t\tsuper({\n\t\t\t\tprovider: providerOrContext as SupportedProviders<any>,\n\t\t\t\tregisteredSubscriptions,\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ((providerOrContext as Web3ContextInitOptions).registeredSubscriptions) {\n\t\t\tsuper(providerOrContext as Web3ContextInitOptions);\n\t\t\treturn;\n\t\t}\n\n\t\tsuper({\n\t\t\t...(providerOrContext as Web3ContextInitOptions),\n\t\t\tregisteredSubscriptions,\n\t\t});\n\t}\n\n\t/**\n\t * @returns Returns the ethereum protocol version of the node.\n\t *\n\t * ```ts\n\t * web3.eth.getProtocolVersion().then(console.log);\n\t * > \"63\"\n\t * ```\n\t */\n\tpublic async getProtocolVersion() {\n\t\treturn ethRpcMethods.getProtocolVersion(this.requestManager);\n\t}\n\n\t// TODO Add returnFormat parameter\n\t/**\n\t * Checks if the node is currently syncing.\n\t *\n\t * @returns Either a {@link SyncingStatusAPI}, or `false`.\n\t *\n\t * ```ts\n\t * web3.eth.isSyncing().then(console.log);\n\t * > {\n\t *     startingBlock: 100,\n\t *     currentBlock: 312,\n\t *     highestBlock: 512,\n\t *     knownStates: 234566,\n\t *     pulledStates: 123455\n\t * }\n\t * ```\n\t */\n\tpublic async isSyncing() {\n\t\treturn ethRpcMethods.getSyncing(this.requestManager);\n\t}\n\n\t// TODO consider adding returnFormat parameter (to format address as bytes)\n\t/**\n\t * @returns Returns the coinbase address to which mining rewards will go.\n\t *\n\t * ```ts\n\t * web3.eth.getCoinbase().then(console.log);\n\t * > \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\"\n\t * ```\n\t */\n\tpublic async getCoinbase() {\n\t\treturn ethRpcMethods.getCoinbase(this.requestManager);\n\t}\n\n\t/**\n\t * Checks whether the node is mining or not.\n\t *\n\t * @returns `true` if the node is mining, otherwise `false`.\n\t *\n\t * ```ts\n\t * web3.eth.isMining().then(console.log);\n\t * > true\n\t * ```\n\t */\n\tpublic async isMining() {\n\t\treturn ethRpcMethods.getMining(this.requestManager);\n\t}\n\n\t/**\n\t * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.\n\t *\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of hashes per second that the node is mining with.\n\t *\n\t * ```ts\n\t * web3.eth.getHashrate().then(console.log);\n\t * > 493736n\n\t *\n\t * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x788a8\"\n\t * ```\n\t */\n\tpublic async getHashrate<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn this.getHashRate(returnFormat);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of hashes per second that the node is mining with.\n\t *\n\t * ```ts\n\t * web3.eth.getHashRate().then(console.log);\n\t * > 493736n\n\t *\n\t * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x788a8\"\n\t * ```\n\t */\n\tpublic async getHashRate<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getHashRate(this, returnFormat);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The gas price determined by the last few blocks median gas price.\n\t *\n\t * ```ts\n\t * web3.eth.getGasPrice().then(console.log);\n\t * > 20000000000n\n\t *\n\t * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x4a817c800\"\n\t * ```\n\t */\n\tpublic async getGasPrice<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getGasPrice(this, returnFormat);\n\t}\n\n\t/**\n\t * @returns A list of accounts the node controls (addresses are checksummed).\n\t *\n\t * ```ts\n\t * web3.eth.getAccounts().then(console.log);\n\t * > [\"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", \"0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf\"]\n\t * ```\n\t */\n\tpublic async getAccounts() {\n\t\tconst hexAddresses = (await ethRpcMethods.getAccounts(this.requestManager)) ?? [];\n\t\treturn hexAddresses.map(address => toChecksumAddress(address));\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The current block number.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockNumber().then(console.log);\n\t * > 2744n\n\t *\n\t * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0xab8\"\n\t * ```\n\t */\n\tpublic async getBlockNumber<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockNumber(this, returnFormat);\n\t}\n\n\t/**\n\t * Get the balance of an address at a given block.\n\t *\n\t * @param address The address to get the balance of.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The current balance for the given address in `wei`.\n\t *\n\t * ```ts\n\t * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1000000000000n\n\t *\n\t * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > \"0xe8d4a51000\"\n\t * ```\n\t */\n\tpublic async getBalance<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Get the storage at a specific position of an address.\n\t *\n\t * @param address The address to get the storage from.\n\t * @param storageSlot The index position of the storage.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The value in storage at the given position.\n\t *\n\t * ```ts\n\t * web3.eth.getStorageAt(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\", 0).then(console.log);\n\t * > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"\n\t *\n\t * web3.eth.getStorageAt(\n\t *      \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\",\n\t *      0,\n\t *      undefined,\n\t *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n\t * ).then(console.log);\n\t * > Uint8Array(31) [\n\t *       3, 52,  86, 115,  33,  35, 255, 255,\n\t *       35, 66,  52,  45, 209,  35,  66,  67,\n\t *       67, 36,  35,  66,  52, 253,  35,  79,\n\t *       210, 63, 212, 242,  61,  66,  52\n\t *    ]\n\t * ```\n\t */\n\tpublic async getStorageAt<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tstorageSlot: Numbers,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getStorageAt(\n\t\t\tthis,\n\t\t\taddress,\n\t\t\tstorageSlot,\n\t\t\tblockNumber,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * Get the code at a specific address.\n\t *\n\t * @param address The address to get the code from.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.\n\t *\n\t * ```ts\n\t * web3.eth.getCode(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\").then(console.log);\n\t * > \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"\n\t *\n\t * web3.eth.getCode(\n\t *      \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *      undefined,\n\t *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n\t * ).then(console.log);\n\t * > Uint8Array(50) [\n\t *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,\n\t *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,\n\t *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,\n\t *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,\n\t *   144, 80, 145, 144,  80, 86\n\t * ]\n\t * ```\n\t */\n\tpublic async getCode<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Retrieves a {@link Block} matching the provided block number, block hash or block tag.\n\t *\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).\n\t * @returns A {@link Block} object matching the provided block number or block hash.\n\t *\n\t * ```ts\n\t * web3.eth.getBlock(0).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1n,\n\t *    number: 0n,\n\t *    gasLimit: 30000000n,\n\t *    gasUsed: 0n,\n\t *    timestamp: 1658281638n,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0n,\n\t *    totalDifficulty: 1n,\n\t *    baseFeePerGas: 1000000000n,\n\t *    size: 514n,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t *\n\t * web3.eth.getBlock(\n\t *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n\t *      false,\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1,\n\t *    number: 0,\n\t *    gasLimit: 30000000,\n\t *    gasUsed: 0,\n\t *    timestamp: 1658281638,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0,\n\t *    totalDifficulty: 1,\n\t *    baseFeePerGas: 1000000000,\n\t *    size: 514,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t * ```\n\t */\n\tpublic async getBlock<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\thydrated = false,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of transactions in the provided block.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getBlockTransactionCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getBlockTransactionCount<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockUncleCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getBlockUncleCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getBlockUncleCount<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);\n\t}\n\n\t/**\n\t *\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param uncleIndex The index position of the uncle.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.\n\t *\n\t * ```ts\n\t * web3.eth.getUncle(0, 1).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1n,\n\t *    number: 0n,\n\t *    gasLimit: 30000000n,\n\t *    gasUsed: 0n,\n\t *    timestamp: 1658281638n,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0n,\n\t *    totalDifficulty: 1n,\n\t *    baseFeePerGas: 1000000000n,\n\t *    size: 514n,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t *\n\t * web3.eth.getUncle(\n\t *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n\t *      1,\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1,\n\t *    number: 0,\n\t *    gasLimit: 30000000,\n\t *    gasUsed: 0,\n\t *    timestamp: 1658281638,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0,\n\t *    totalDifficulty: 1,\n\t *    baseFeePerGas: 1000000000,\n\t *    size: 514,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t * ```\n\t */\n\tpublic async getUncle<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\tuncleIndex: Numbers,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);\n\t}\n\n\t/**\n\t * @param transactionHash The hash of the desired transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired transaction object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0n,\n\t *    nonce: 0n,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1n,\n\t *    transactionIndex: 0n,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1n,\n\t *    gas: 90000n,\n\t *    gasPrice: 2000000000n,\n\t *    input: '0x',\n\t *    v: 2709n,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t *\n\t * web3.eth.getTransaction(\n\t *     web3.utils.hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0,\n\t *    nonce: 0,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1,\n\t *    transactionIndex: 0,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1,\n\t *    gas: 90000,\n\t *    gasPrice: 2000000000,\n\t *    input: '0x',\n\t *    v: 2709,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransactionHash: Bytes,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\tconst response = await rpcMethodsWrappers.getTransaction(\n\t\t\tthis,\n\t\t\ttransactionHash,\n\t\t\treturnFormat,\n\t\t);\n\n\t\tif (!response) throw new TransactionNotFound();\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A list of pending transactions.\n\t *\n\t * ```ts\n\t * web3.eth.getPendingTransactions().then(console.log);\n\t * > [\n\t *      {\n\t *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *          type: 0n,\n\t *          nonce: 0n,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0n,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1n,\n\t *          gas: 90000n,\n\t *          gasPrice: 2000000000n,\n\t *          input: '0x',\n\t *          v: 2709n,\n\t *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *      },\n\t *      {\n\t *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *          type: 0n,\n\t *          nonce: 1n,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0n,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1n,\n\t *          gas: 90000n,\n\t *          gasPrice: 2000000000n,\n\t *          input: '0x',\n\t *          v: 2710n,\n\t *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n\t *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n\t *      }\n\t *   ]\n\t *\n\t * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > [\n\t *      {\n\t *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *          type: 0,\n\t *          nonce: 0,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1,\n\t *          gas: 90000,\n\t *          gasPrice: 2000000000,\n\t *          input: '0x',\n\t *          v: 2709,\n\t *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *      },\n\t *      {\n\t *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *          type: 0,\n\t *          nonce: 1,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1,\n\t *          gas: 90000,\n\t *          gasPrice: 2000000000,\n\t *          input: '0x',\n\t *          v: 2710,\n\t *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n\t *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n\t *      }\n\t *   ]\n\t * ```\n\t */\n\tpublic async getPendingTransactions<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat) {\n\t\treturn rpcMethodsWrappers.getPendingTransactions(this, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param transactionIndex The index position of the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired transaction object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0n,\n\t *    nonce: 0n,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1n,\n\t *    transactionIndex: 0n,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1n,\n\t *    gas: 90000n,\n\t *    gasPrice: 2000000000n,\n\t *    input: '0x',\n\t *    v: 2709n,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t *\n\t * web3.eth.getTransactionFromBlock(\n\t *     hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n\t *     0,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0,\n\t *    nonce: 0,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1,\n\t *    transactionIndex: 0,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1,\n\t *    gas: 90000,\n\t *    gasPrice: 2000000000,\n\t *    input: '0x',\n\t *    v: 2709,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransactionFromBlock<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\ttransactionIndex: Numbers,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getTransactionFromBlock(\n\t\t\tthis,\n\t\t\tblock,\n\t\t\ttransactionIndex,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * @param transactionHash Hash of the transaction to retrieve the receipt for.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired {@link TransactionReceipt} object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionReceipt(\"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\").then(console.log);\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0n,\n\t *      blockNumber: 2n,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000n,\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      effectiveGasPrice: 2000000000n,\n\t *      type: 0n\n\t *  }\n\t *\n\t * web3.eth.getTransactionReceipt(\n\t *      \"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\",\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0,\n\t *      blockNumber: 2,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000,\n\t *      gasUsed: 21000,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1,\n\t *      effectiveGasPrice: 2000000000,\n\t *      type: 0n\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransactionReceipt<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(transactionHash: Bytes, returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat) {\n\t\tconst response = await rpcMethodsWrappers.getTransactionReceipt(\n\t\t\tthis,\n\t\t\ttransactionHash,\n\t\t\treturnFormat,\n\t\t);\n\n\t\tif (!response) throw new TransactionNotFound();\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * @param address The address to get the number of transactions for.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of transactions sent from the provided address.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getTransactionCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     undefined,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getTransactionCount<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @param options A configuration object used to change the behavior of the `sendTransaction` method.\n\t * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n\t * ```ts\n\t * const transaction = {\n\t *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *   value: '0x1'\n\t * }\n\t *\n\t * const transactionHash = await web3.eth.sendTransaction(transaction);\n\t * console.log(transactionHash);\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t *\n\t * web3.eth.sendTransaction(transaction).then(console.log);\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t *\n\t * web3.eth.sendTransaction(transaction).catch(console.log);\n\t * > <Some TransactionError>\n\t *\n\t * // Example using options.ignoreGasPricing = true\n\t * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t * ```\n\t *\n\t *\n\t * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n\t * - `sending`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n\t * > {\n\t *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *    value: '0x1',\n\t *    gasPrice: '0x77359400',\n\t *    maxPriorityFeePerGas: undefined,\n\t *    maxFeePerGas: undefined\n\t * }\n\t * ```\n\t * - `sent`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));\n\t * > {\n\t *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *    value: '0x1',\n\t *    gasPrice: '0x77359400',\n\t *    maxPriorityFeePerGas: undefined,\n\t *    maxFeePerGas: undefined\n\t * }\n\t * ```\n\t * - `transactionHash`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t * ```\n\t * - `receipt`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0n,\n\t *      blockNumber: 2n,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000n,\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      effectiveGasPrice: 2000000000n,\n\t *      type: 0n\n\t * }\n\t * ```\n\t * - `confirmation`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));\n\t * > {\n\t *     confirmations: 1n,\n\t *     receipt: {\n\t *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',\n\t *         transactionIndex: 0n,\n\t *         blockNumber: 5n,\n\t *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',\n\t *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *         cumulativeGasUsed: 21000n,\n\t *         gasUsed: 21000n,\n\t *         logs: [],\n\t *         logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *         status: 1n,\n\t *         effectiveGasPrice: 2000000000n,\n\t *         type: 0n\n\t *     },\n\t *     latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'\n\t * }\n\t * ```\n\t * - `error`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('error', error => console.log);\n\t * > <Some TransactionError>\n\t * ```\n\t */\n\tpublic sendTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction:\n\t\t\t| Transaction\n\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t| TransactionWithFromAndToLocalWalletIndex,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t\toptions?: SendTransactionOptions,\n\t) {\n\t\treturn rpcMethodsWrappers.sendTransaction(this, transaction, returnFormat, options);\n\t}\n\n\t/**\n\t * @param transaction Signed transaction in one of the valid {@link Bytes} format.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n\t * ```ts\n\t * const signedTransaction = \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t *\n\t * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);\n\t * console.log(transactionHash);\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t *\n\t * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t *\n\t * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);\n\t * > <Some TransactionError>\n\t * ```\n\t *\n\t *\n\t * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n\t * - `sending`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n\t * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t * ```\n\t * - `sent`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));\n\t * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t * ```\n\t * - `transactionHash`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t * ```\n\t * - `receipt`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));\n\t * > {\n\t *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n\t *      blockNumber: 1n,\n\t *      cumulativeGasUsed: 21000n,\n\t *      effectiveGasPrice: 1000000001n,\n\t *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n\t *      transactionIndex: 0n,\n\t *      type: 0n\n\t * }\n\t * ```\n\t * - `confirmation`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));\n\t * > {\n\t *     confirmations: 1n,\n\t *     receipt: {\n\t *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n\t *          blockNumber: 1n,\n\t *          cumulativeGasUsed: 21000n,\n\t *          effectiveGasPrice: 1000000001n,\n\t *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *          gasUsed: 21000n,\n\t *          logs: [],\n\t *          logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *          status: 1n,\n\t *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n\t *          transactionIndex: 0n,\n\t *          type: 0n\n\t *     },\n\t *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'\n\t * }\n\t * ```\n\t * - `error`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));\n\t * > <Some TransactionError>\n\t * ```\n\t */\n\tpublic sendSignedTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Bytes,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t\toptions?: SendTransactionOptions,\n\t) {\n\t\treturn rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);\n\t}\n\n\t/**\n\t * @param message Data to sign in one of the valid {@link Bytes} format.\n\t * @param address Address to sign data with, can be an address or the index of a local wallet.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The signed `message`.\n\t *\n\t * ```ts\n\t * // Using an unlocked account managed by connected RPC client\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\").then(console.log);\n\t * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n\t *\n\t * // Using an unlocked account managed by connected RPC client\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);\n\t * > Uint8Array(65) [\n\t *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,\n\t *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,\n\t *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,\n\t *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,\n\t *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,\n\t *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0\n\t * ]\n\t * ```\n\t *\n\t * // Using an indexed account managed by local Web3 wallet\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", 0).then(console.log);\n\t * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n\t */\n\tpublic async sign<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tmessage: Bytes,\n\t\taddress: Address,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.sign(this, message, address, returnFormat);\n\t}\n\n\t/**\n\t * @param transaction The transaction object to sign.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n\t *\n\t * ```ts\n\t * const transaction = {\n\t *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *      value: '0x1',\n\t *      gas: '21000',\n\t *      gasPrice: await web3Eth.getGasPrice(),\n\t *      nonce: '0x1',\n\t *      type: '0x0'\n\t * }\n\t *\n\t * web3.eth.signTransaction(transaction).then(console.log);\n\t * > {\n\t *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *   tx: {\n\t *      type: 0n,\n\t *      nonce: 1n,\n\t *      gasPrice: 1000000001n,\n\t *      gas: 21000n,\n\t *      value: 1n,\n\t *      v: 2710n,\n\t *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n\t *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      data: '0x'\n\t *   }\n\t * }\n\t *\n\t * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > {\n\t *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *   tx: {\n\t *      type: 0,\n\t *      nonce: 1,\n\t *      gasPrice: 1000000001,\n\t *      gas: 21000,\n\t *      value: 1,\n\t *      v: 2710,\n\t *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n\t *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      data: '0x'\n\t *   }\n\t * }\n\t * ```\n\t */\n\tpublic async signTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Transaction,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);\n\t}\n\n\t// TODO Decide what to do with transaction.to\n\t// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n\t/**\n\t * Executes a message call within the EVM without creating a transaction.\n\t * It does not publish anything to the blockchain and does not consume any gas.\n\t *\n\t * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The returned data of the call, e.g. a smart contract function's return value.\n\t */\n\tpublic async call<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: TransactionCall,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.\n\t * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting\n\t * with a contract as a result of updating the contract's state.\n\t *\n\t * @param transaction The {@link Transaction} object to estimate the gas for.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The used gas for the simulated transaction execution.\n\t *\n\t * ```ts\n\t * const transaction = {\n\t *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *       value: '0x1',\n\t *       nonce: '0x1',\n\t *       type: '0x0'\n\t * }\n\t *\n\t * web3.eth.estimateGas(transaction).then(console.log);\n\t * > 21000n\n\t *\n\t * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > 21000\n\t * ```\n\t */\n\tpublic async estimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Transaction,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Gets past logs, matching the provided `filter`.\n\t *\n\t * @param filter A {@link Filter} object containing the properties for the desired logs.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\n\t *\n\t * ```ts\n\t * web3.eth.getPastLogs({\n\t *      address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *      topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n\t *  }).then(console.log);\n\t * > [{\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *       logIndex: 0n,\n\t *       transactionIndex: 0n,\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *       blockNumber: 1234n,\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *   },\n\t *   {...}]\n\t *\n\t * web3.eth.getPastLogs(\n\t *     {\n\t *       address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *       topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n\t *     },\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > [{\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *       logIndex: 0,\n\t *       transactionIndex: 0,\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *       blockNumber: 1234,\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *   },\n\t *   {...}]\n\t * ```\n\t */\n\tpublic async getPastLogs<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilter: Filter,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getLogs(this, filter, returnFormat);\n\t}\n\n\t/**\n\t * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\n\t *\n\t * @returns The mining work as an array of strings with the following structure:\n\t *\n\t * String 32 Bytes - at index 0: current block header pow-hash\n\t * String 32 Bytes - at index 1: the seed hash used for the DAG.\n\t * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.\n\t *\n\t * ```ts\n\t * web3.eth.getWork().then(console.log);\n\t * > [\n\t *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n\t *     \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\",\n\t *     \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\"\n\t * ]\n\t * ```\n\t */\n\tpublic async getWork() {\n\t\treturn ethRpcMethods.getWork(this.requestManager);\n\t}\n\n\t/**\n\t * Used for submitting a proof-of-work solution.\n\t *\n\t * @param nonce The nonce found (8 bytes).\n\t * @param hash  The header’s pow-hash (32 bytes).\n\t * @param digest The mix digest (32 bytes).\n\t * @returns Returns `true` if the provided solution is valid, otherwise `false`.\n\t *\n\t * ```ts\n\t * web3.eth.submitWork([\n\t *     \"0x0000000000000001\",\n\t *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n\t *     \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\"\n\t * ]).then(console.log);\n\t * > true\n\t * ```\n\t */\n\tpublic async submitWork(\n\t\tnonce: HexString8Bytes,\n\t\thash: HexString32Bytes,\n\t\tdigest: HexString32Bytes,\n\t) {\n\t\treturn ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);\n\t}\n\n\t// TODO - Format addresses\n\t/**\n\t * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)\n\t * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.\n\t * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).\n\t * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.\n\t *\n\t * @returns An array of enabled accounts.\n\t *\n\t * ```ts\n\t * web3.eth.requestAccounts().then(console.log);\n\t * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']\n\t * ```\n\t */\n\tpublic async requestAccounts() {\n\t\treturn ethRpcMethods.requestAccounts(this.requestManager);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).\n\t *\n\t * ```ts\n\t * web3.eth.getChainId().then(console.log);\n\t * > 61n\n\t *\n\t * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > 61\n\t * ```\n\t */\n\tpublic async getChainId<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getChainId(this, returnFormat);\n\t}\n\n\t/**\n\t * @returns The current client version.\n\t *\n\t * ```ts\n\t * web3.eth.getNodeInfo().then(console.log);\n\t * > \"Mist/v0.9.3/darwin/go1.4.1\"\n\t * ```\n\t */\n\tpublic async getNodeInfo() {\n\t\treturn ethRpcMethods.getNodeInfo(this.requestManager);\n\t}\n\n\t/**\n\t * @param address The Address of the account or contract.\n\t * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).\n\t *\n\t * ```ts\n\t * web3.eth.getProof(\n\t *     \"0x1234567890123456789012345678901234567890\",\n\t *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n\t *     \"latest\"\n\t * ).then(console.log);\n\t * > {\n\t *     \"address\": \"0x1234567890123456789012345678901234567890\",\n\t *     \"accountProof\": [\n\t *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n\t *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n\t *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n\t *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n\t *     ],\n\t *     \"balance\": 0n,\n\t *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n\t *     \"nonce\": 0n,\n\t *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n\t *     \"storageProof\": [\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t *             \"value\": 0n,\n\t *             \"proof\": []\n\t *         },\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n\t *             \"value\": 0n,\n\t *             \"proof\": []\n\t *         }\n\t *     ]\n\t * }\n\t *\n\t * web3.eth.getProof(\n\t *     \"0x1234567890123456789012345678901234567890\",\n\t *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n\t *     undefined,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *     \"address\": \"0x1234567890123456789012345678901234567890\",\n\t *     \"accountProof\": [\n\t *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n\t *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n\t *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n\t *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n\t *     ],\n\t *     \"balance\": 0,\n\t *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n\t *     \"nonce\": 0,\n\t *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n\t *     \"storageProof\": [\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t *             \"value\": 0,\n\t *             \"proof\": []\n\t *         },\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n\t *             \"value\": 0,\n\t *             \"proof\": []\n\t *         }\n\t *     ]\n\t * }\n\t * ```\n\t */\n\tpublic async getProof<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tstorageKeys: Bytes[],\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);\n\t}\n\n\t// TODO Throwing an error with Geth, but not Infura\n\t// TODO gasUsedRatio and reward not formatting\n\t/**\n\t * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n\t * @param newestBlock Highest number block of the requested range.\n\t * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.\n\t * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.\n\t * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.\n\t *\n\t * ```ts\n\t * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);\n\t * > {\n\t *     baseFeePerGas: [\n\t *         22983878621n,\n\t *         21417903463n,\n\t *         19989260230n,\n\t *         17770954829n,\n\t *         18850641304n\n\t *     ],\n\t *     gasUsedRatio: [\n\t *         0.22746546666666667,\n\t *         0.2331871,\n\t *         0.05610054885262125,\n\t *         0.7430227268212117\n\t *     ],\n\t *     oldestBlock: 15216343n,\n\t *     reward: [\n\t *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n\t *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n\t *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n\t *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n\t *     ]\n\t * }\n\t *\n\t * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > {\n\t *     baseFeePerGas: [\n\t *         22983878621,\n\t *         21417903463,\n\t *         19989260230,\n\t *         17770954829,\n\t *         18850641304\n\t *     ],\n\t *     gasUsedRatio: [\n\t *         0.22746546666666667,\n\t *         0.2331871,\n\t *         0.05610054885262125,\n\t *         0.7430227268212117\n\t *     ],\n\t *     oldestBlock: 15216343,\n\t *     reward: [\n\t *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n\t *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n\t *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n\t *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n\t *     ]\n\t * }\n\t * ```\n\t */\n\tpublic async getFeeHistory<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblockCount: Numbers,\n\t\tnewestBlock: BlockNumberOrTag = this.defaultBlock,\n\t\trewardPercentiles: Numbers[],\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getFeeHistory(\n\t\t\tthis,\n\t\t\tblockCount,\n\t\t\tnewestBlock,\n\t\t\trewardPercentiles,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * This method generates an access list for a transaction.\n\t *\n\t * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.\n\t * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n\t * @example\n\t * ```ts\n\t * web3.eth.createAccessList({\n\t * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',\n\t * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',\n\t * gasPrice: '0x3b9aca00',\n\t * gas: '0x3d0900',\n\t * to: '0x940b25304947ae863568B3804434EC77E2160b87'\n\t * })\n\t * .then(console.log);\n\t *\n\t * > {\n\t *  \"accessList\": [\n\t *     {\n\t *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n\t *       \"storageKeys\": [\n\t *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t *       ]\n\t *     }\n\t *   ],\n\t *   \"gasUsed\": \"0x7671\"\n\t * }\n\t * ```\n\t */\n\tpublic async createAccessList<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: TransactionForAccessList,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * This method sends EIP-712 typed data to the RPC provider to be signed.\n\t *\n\t * @param address The address that corresponds with the private key used to sign the typed data.\n\t * @param typedData The EIP-712 typed data object.\n\t * @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.\n\t * @returns The signed typed data.\n\t */\n\tpublic async signTypedData<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\ttypedData: Eip712TypedData,\n\t\tuseLegacy = false,\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.signTypedData(this, address, typedData, useLegacy, returnFormat);\n\t}\n\n\t/**\n\t * Lets you subscribe to specific events in the blockchain.\n\t *\n\t * @param name - The subscription you want to subscribe to.\n\t * @param args - Optional additional parameters, depending on the subscription type.\n\t * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:\n\t *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.\n\t *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.\n\t *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.\n\t *  - subscription.args: The subscription arguments, used when re-subscribing.\n\t *\n\t *\n\t * You can use the subscription object to listen on:\n\t *\n\t * - on(\"data\") - Fires on each incoming log with the log object as argument.\n\t * - on(\"changed\") - Fires on each log which was removed from the blockchain. The log will have the additional property \"removed: true\".\n\t * - on(\"error\") - Fires when an error in the subscription occurs.\n\t * - on(\"connected\") - Fires once after the subscription successfully connected. Returns the subscription id.\n\t *\n\t * @example **Subscribe to Smart Contract events**\n\t * ```ts\n\t * // Subscribe to `logs`\n\t * const logSubscription = web3.eth.subscribe('logs', {\n\t *     address: '0x1234567890123456789012345678901234567890',\n\t *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']\n\t * });\n\t * logSubscription.on('data', (data: any) => console.log(data));\n\t * logSubscription.on('error', (error: any) => console.log(error));\n\t *\n\t * ```\n\t *\n\t * @example **Subscribe to new block headers**\n\t * ```ts\n\t * // Subscribe to `newBlockHeaders`\n\t * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t *\n\t * newBlocksSubscription.on('data', async blockhead => {\n\t * \tconsole.log('New block header: ', blockhead);\n\t *\n\t * \t// You do not need the next line, if you like to keep notified for every new block\n\t * \tawait newBlocksSubscription.unsubscribe();\n\t * \tconsole.log('Unsubscribed from new block headers.');\n\t * });\n\t * newBlocksSubscription.on('error', error =>\n\t * \tconsole.log('Error when subscribing to New block header: ', error),\n\t * );\n\t * ```\n\t */\n\tpublic async subscribe<\n\t\tT extends keyof RegisteredSubscription,\n\t\tReturnType extends DataFormat = DataFormat,\n\t>(\n\t\tname: T,\n\t\targs?: ConstructorParameters<RegisteredSubscription[T]>[0],\n\t\treturnFormat: ReturnType = DEFAULT_RETURN_FORMAT as ReturnType,\n\t): Promise<InstanceType<RegisteredSubscription[T]>> {\n\t\tconst subscription = await this.subscriptionManager?.subscribe(name, args, returnFormat);\n\t\tif (\n\t\t\tsubscription instanceof LogsSubscription &&\n\t\t\tname === 'logs' &&\n\t\t\ttypeof args === 'object' &&\n\t\t\t!isNullish(args.fromBlock) &&\n\t\t\tNumber.isFinite(Number(args.fromBlock))\n\t\t) {\n\t\t\tsetImmediate(() => {\n\t\t\t\tthis.getPastLogs(args)\n\t\t\t\t\t.then(logs => {\n\t\t\t\t\t\tfor (const log of logs) {\n\t\t\t\t\t\t\tsubscription._processSubscriptionResult(log as LogsOutput);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\tsubscription._processSubscriptionError(e as Error);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn subscription;\n\t}\n\n\tprivate static shouldClearSubscription({ sub }: { sub: unknown }): boolean {\n\t\treturn !(sub instanceof SyncingSubscription);\n\t}\n\n\t/**\n\t * Resets subscriptions.\n\t *\n\t * @param notClearSyncing If `true` it keeps the `syncing` subscription.\n\t * @returns A promise to an array of subscription ids that were cleared.\n\t *\n\t * ```ts\n\t * web3.eth.clearSubscriptions().then(console.log);\n\t * > [...] An array of subscription ids that were cleared\n\t * ```\n\t */\n\tpublic clearSubscriptions(notClearSyncing = false): Promise<string[]> | undefined {\n\t\treturn this.subscriptionManager?.unsubscribe(\n\t\t\t// eslint-disable-next-line\n\t\t\tnotClearSyncing ? Web3Eth.shouldClearSubscription : undefined,\n\t\t);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}