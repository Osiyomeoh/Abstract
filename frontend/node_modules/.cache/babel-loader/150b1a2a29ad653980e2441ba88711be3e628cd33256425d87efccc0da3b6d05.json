{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\Dapp\\\\Abstract\\\\frontend\\\\src\\\\Components\\\\depositFunds.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport SmartWalletABI from './abi/SmartWallet.json'; // Importing ABI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst smartWalletAddress = \"0x8dAF17A20c9DBA35f005b6324F493785D239719d\"; // Replace with your contract's address\n\nconst DepositFunds = () => {\n  _s();\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [web3Instance, setWeb3Instance] = useState(null);\n  const [depositAmount, setDepositAmount] = useState('');\n\n  // Check if the wallet is connected when the component mounts\n  React.useEffect(() => {\n    checkWalletConnection();\n  }, []);\n  const checkWalletConnection = async () => {\n    try {\n      // Check if there's an Ethereum provider (wallet) available\n      if (window.ethereum) {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const web3 = new Web3(window.ethereum);\n        setWeb3Instance(web3);\n        setIsWalletConnected(true);\n      } else {\n        setIsWalletConnected(false);\n      }\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n      setIsWalletConnected(false);\n    }\n  };\n  const depositFunds = async () => {\n    if (!isWalletConnected) {\n      alert(\"Please connect your wallet first!\");\n      return;\n    }\n    if (!depositAmount || isNaN(depositAmount)) {\n      alert(\"Please enter a valid deposit amount.\");\n      return;\n    }\n    try {\n      // Convert the deposit amount to wei\n      const depositAmountWei = web3Instance.utils.toWei(depositAmount, 'ether');\n\n      // Connect to your SmartWallet contract\n      const contract = new web3Instance.eth.Contract(SmartWalletABI.abi, smartWalletAddress);\n\n      // Example: Get the user's address\n      const accounts = await web3Instance.eth.getAccounts();\n      const userAddress = accounts[0];\n\n      // Send the deposit transaction\n      await contract.methods.deposit().send({\n        from: userAddress,\n        value: depositAmountWei\n      });\n      alert(`Successfully deposited ${depositAmount} Ether.`);\n    } catch (error) {\n      console.error(\"Error depositing funds:\", error);\n      alert(\"Failed to deposit funds. Check the console for more details.\");\n    }\n  };\n\n  // Define the inline CSS for your input and button\n  const inputStyle = {\n    padding: '10px',\n    margin: '10px',\n    fontSize: '16px'\n  };\n  const buttonStyle = {\n    padding: '10px 20px',\n    background: 'blue',\n    color: 'white',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isWalletConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: depositAmount,\n        onChange: e => setDepositAmount(e.target.value),\n        placeholder: \"Enter deposit amount in Ether\",\n        style: inputStyle // Apply input style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: depositFunds,\n        style: buttonStyle,\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this), !isWalletConnected && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please connect your wallet to deposit funds.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(DepositFunds, \"MwTt5yOs0ubF7grwUSkoUk0UOPM=\");\n_c = DepositFunds;\nexport default DepositFunds;\nvar _c;\n$RefreshReg$(_c, \"DepositFunds\");","map":{"version":3,"names":["React","useState","Web3","SmartWalletABI","jsxDEV","_jsxDEV","smartWalletAddress","DepositFunds","_s","isWalletConnected","setIsWalletConnected","web3Instance","setWeb3Instance","depositAmount","setDepositAmount","useEffect","checkWalletConnection","window","ethereum","request","method","web3","error","console","depositFunds","alert","isNaN","depositAmountWei","utils","toWei","contract","eth","Contract","abi","accounts","getAccounts","userAddress","methods","deposit","send","from","value","inputStyle","padding","margin","fontSize","buttonStyle","background","color","border","borderRadius","cursor","children","type","onChange","e","target","placeholder","style","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/Dapp/Abstract/frontend/src/Components/depositFunds.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Web3 from 'web3';\r\nimport SmartWalletABI from './abi/SmartWallet.json'; // Importing ABI\r\n\r\nconst smartWalletAddress = \"0x8dAF17A20c9DBA35f005b6324F493785D239719d\"; // Replace with your contract's address\r\n\r\nconst DepositFunds = () => {\r\n    const [isWalletConnected, setIsWalletConnected] = useState(false);\r\n    const [web3Instance, setWeb3Instance] = useState(null);\r\n    const [depositAmount, setDepositAmount] = useState('');\r\n\r\n    // Check if the wallet is connected when the component mounts\r\n    React.useEffect(() => {\r\n        checkWalletConnection();\r\n    }, []);\r\n\r\n    const checkWalletConnection = async () => {\r\n        try {\r\n            // Check if there's an Ethereum provider (wallet) available\r\n            if (window.ethereum) {\r\n                await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n                const web3 = new Web3(window.ethereum);\r\n                setWeb3Instance(web3);\r\n                setIsWalletConnected(true);\r\n            } else {\r\n                setIsWalletConnected(false);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error connecting to wallet:\", error);\r\n            setIsWalletConnected(false);\r\n        }\r\n    };\r\n\r\n    const depositFunds = async () => {\r\n        if (!isWalletConnected) {\r\n            alert(\"Please connect your wallet first!\");\r\n            return;\r\n        }\r\n\r\n        if (!depositAmount || isNaN(depositAmount)) {\r\n            alert(\"Please enter a valid deposit amount.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Convert the deposit amount to wei\r\n            const depositAmountWei = web3Instance.utils.toWei(depositAmount, 'ether');\r\n\r\n            // Connect to your SmartWallet contract\r\n            const contract = new web3Instance.eth.Contract(\r\n                SmartWalletABI.abi,\r\n                smartWalletAddress\r\n            );\r\n\r\n            // Example: Get the user's address\r\n            const accounts = await web3Instance.eth.getAccounts();\r\n            const userAddress = accounts[0];\r\n\r\n            // Send the deposit transaction\r\n            await contract.methods.deposit().send({\r\n                from: userAddress,\r\n                value: depositAmountWei,\r\n            });\r\n\r\n            alert(`Successfully deposited ${depositAmount} Ether.`);\r\n        } catch (error) {\r\n            console.error(\"Error depositing funds:\", error);\r\n            alert(\"Failed to deposit funds. Check the console for more details.\");\r\n        }\r\n    };\r\n\r\n    // Define the inline CSS for your input and button\r\n    const inputStyle = {\r\n        padding: '10px',\r\n        margin: '10px',\r\n        fontSize: '16px',\r\n    };\r\n\r\n    const buttonStyle = {\r\n        padding: '10px 20px',\r\n        background: 'blue',\r\n        color: 'white',\r\n        border: 'none',\r\n        borderRadius: '5px',\r\n        cursor: 'pointer',\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isWalletConnected && (\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={depositAmount}\r\n                        onChange={(e) => setDepositAmount(e.target.value)}\r\n                        placeholder=\"Enter deposit amount in Ether\"\r\n                        style={inputStyle} // Apply input style\r\n                    />\r\n                    <button onClick={depositFunds} style={buttonStyle}>Deposit</button> {/* Apply button style */}\r\n                </div>\r\n            )}\r\n\r\n            {!isWalletConnected && (\r\n                <p>Please connect your wallet to deposit funds.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DepositFunds;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}