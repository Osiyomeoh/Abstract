{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3Context, Web3ConfigEvent } from 'web3-core';\nimport { ContractExecutionError, ContractTransactionDataAndInputError, SubscriptionError, Web3ContractError } from 'web3-errors';\nimport { createAccessList, call, estimateGas, getLogs, sendTransaction, decodeEventABI, NewHeadsSubscription, ALL_EVENTS, ALL_EVENTS_ABI } from 'web3-eth';\nimport { encodeEventSignature, encodeFunctionSignature, decodeContractErrorData, isAbiErrorFragment, isAbiEventFragment, isAbiFunctionFragment, jsonInterfaceMethodToString } from 'web3-eth-abi';\nimport { BlockTags, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { format, isDataFormat, keccak256, toChecksumAddress } from 'web3-utils';\nimport { isNullish, validator, utils as validatorUtils, Web3ValidatorError } from 'web3-validator';\nimport { decodeMethodReturn, encodeEventABI, encodeMethodABI } from './encoding.js';\nimport { LogsSubscription } from './log_subscription.js';\nimport { getCreateAccessListParams, getEstimateGasParams, getEthTxCallParams, getSendTxParams, isContractInitOptions, isWeb3ContractContext } from './utils.js';\nconst contractSubscriptions = {\n  logs: LogsSubscription,\n  newHeads: NewHeadsSubscription,\n  newBlockHeaders: NewHeadsSubscription\n};\n/**\n * The class designed to interact with smart contracts on the Ethereum blockchain.\n */\nexport class Contract extends Web3Context {\n  constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {\n    var _a, _b, _c;\n    // eslint-disable-next-line no-nested-ternary\n    const options = isContractInitOptions(addressOrOptionsOrContext) ? addressOrOptionsOrContext : isContractInitOptions(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : undefined;\n    let contractContext;\n    if (isWeb3ContractContext(addressOrOptionsOrContext)) {\n      contractContext = addressOrOptionsOrContext;\n    } else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {\n      contractContext = optionsOrContextOrReturnFormat;\n    } else {\n      contractContext = contextOrReturnFormat;\n    }\n    let provider;\n    if (typeof addressOrOptionsOrContext === 'object' && 'provider' in addressOrOptionsOrContext) {\n      provider = addressOrOptionsOrContext.provider;\n    } else if (typeof optionsOrContextOrReturnFormat === 'object' && 'provider' in optionsOrContextOrReturnFormat) {\n      provider = optionsOrContextOrReturnFormat.provider;\n    } else if (typeof contextOrReturnFormat === 'object' && 'provider' in contextOrReturnFormat) {\n      provider = contextOrReturnFormat.provider;\n    } else {\n      provider = Contract.givenProvider;\n    }\n    super(Object.assign(Object.assign({}, contractContext), {\n      provider,\n      registeredSubscriptions: contractSubscriptions\n    }));\n    /**\n     * Set to true if you want contracts' defaults to sync with global defaults.\n     */\n    this.syncWithContext = false;\n    this._functions = {};\n    if (!isNullish(options) && !isNullish(options.data) && !isNullish(options.input) && this.config.contractDataInputFill !== 'both') throw new ContractTransactionDataAndInputError({\n      data: options.data,\n      input: options.input\n    });\n    this._overloadedMethodAbis = new Map();\n    // eslint-disable-next-line no-nested-ternary\n    const returnDataFormat = isDataFormat(contextOrReturnFormat) ? contextOrReturnFormat : isDataFormat(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : DEFAULT_RETURN_FORMAT;\n    const address = typeof addressOrOptionsOrContext === 'string' ? addressOrOptionsOrContext : undefined;\n    this.config.contractDataInputFill = (_a = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a !== void 0 ? _a : this.config.contractDataInputFill;\n    this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n    if (!isNullish(address)) {\n      this._parseAndSetAddress(address, returnDataFormat);\n    }\n    this.options = {\n      address,\n      jsonInterface: this._jsonInterface,\n      gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,\n      gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,\n      from: options === null || options === void 0 ? void 0 : options.from,\n      input: options === null || options === void 0 ? void 0 : options.input,\n      data: options === null || options === void 0 ? void 0 : options.data\n    };\n    this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;\n    if (contractContext instanceof Web3Context) {\n      this.subscribeToContextEvents(contractContext);\n    }\n    Object.defineProperty(this.options, 'address', {\n      set: value => this._parseAndSetAddress(value, returnDataFormat),\n      get: () => this._address\n    });\n    Object.defineProperty(this.options, 'jsonInterface', {\n      set: value => this._parseAndSetJsonInterface(value, returnDataFormat),\n      get: () => this._jsonInterface\n    });\n    if (contractContext instanceof Web3Context) {\n      contractContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.setConfig({\n          [event.name]: event.newValue\n        });\n      });\n    }\n  }\n  /**\n   * Subscribe to an event.\n   *\n   * ```ts\n   * await myContract.events.MyEvent([options])\n   * ```\n   *\n   * There is a special event `allEvents` that can be used to subscribe all events.\n   *\n   * ```ts\n   * await myContract.events.allEvents([options])\n   * ```\n   *\n   * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n   */\n  get events() {\n    return this._events;\n  }\n  /**\n   * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n   *\n   * The methods of this smart contract are available through:\n   *\n   * The name: `myContract.methods.myMethod(123)`\n   * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n   * The signature `myContract.methods['0x58cf5f10'](123)`\n   *\n   * This allows calling functions with same name but different parameters from the JavaScript contract object.\n   *\n   * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n   *\n   * ```ts\n   * // calling a method\n   * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   *\n   * // or sending and using a promise\n   * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   *\n   * // or sending and using the events\n   * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   * sendObject.on('transactionHash', function(hash){\n   *   ...\n   * });\n   * sendObject.on('receipt', function(receipt){\n   *   ...\n   * });\n   * sendObject.on('confirmation', function(confirmationNumber, receipt){\n   *   ...\n   * });\n   * sendObject.on('error', function(error, receipt) {\n   *   ...\n   * });\n   * ```\n   *\n   * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.\n   */\n  get methods() {\n    return this._methods;\n  }\n  /**\n   * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n   *\n   * @returns - The new contract instance.\n   *\n   * ```ts\n   * const contract1 = new eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n   *\n   * const contract2 = contract1.clone();\n   * contract2.options.address = address2;\n   *\n   * (contract1.options.address !== contract2.options.address);\n   * > true\n   * ```\n   */\n  clone() {\n    let newContract;\n    if (this.options.address) {\n      newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], this.options.address, {\n        gas: this.options.gas,\n        gasPrice: this.options.gasPrice,\n        from: this.options.from,\n        input: this.options.input,\n        data: this.options.data,\n        provider: this.currentProvider,\n        syncWithContext: this.syncWithContext,\n        dataInputFill: this.config.contractDataInputFill\n      }, this.getContextObject());\n    } else {\n      newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], {\n        gas: this.options.gas,\n        gasPrice: this.options.gasPrice,\n        from: this.options.from,\n        input: this.options.input,\n        data: this.options.data,\n        provider: this.currentProvider,\n        syncWithContext: this.syncWithContext,\n        dataInputFill: this.config.contractDataInputFill\n      }, this.getContextObject());\n    }\n    if (this.context) newContract.subscribeToContextEvents(this.context);\n    return newContract;\n  }\n  /**\n   * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n   *\n   * ```ts\n   * myContract.deploy({\n   *   input: '0x12345...', // data keyword can be used, too. If input is used, data will be ignored.\n   *   arguments: [123, 'My String']\n   * })\n   * .send({\n   *   from: '0x1234567890123456789012345678901234567891',\n   *   gas: 1500000,\n   *   gasPrice: '30000000000000'\n   * }, function(error, transactionHash){ ... })\n   * .on('error', function(error){ ... })\n   * .on('transactionHash', function(transactionHash){ ... })\n   * .on('receipt', function(receipt){\n   *  console.log(receipt.contractAddress) // contains the new contract address\n   * })\n   * .on('confirmation', function(confirmationNumber, receipt){ ... })\n   * .then(function(newContractInstance){\n   *   console.log(newContractInstance.options.address) // instance with the new contract address\n   * });\n   *\n   *\n   * // When the data is already set as an option to the contract itself\n   * myContract.options.data = '0x12345...';\n   *\n   * myContract.deploy({\n   *   arguments: [123, 'My String']\n   * })\n   * .send({\n   *   from: '0x1234567890123456789012345678901234567891',\n   *   gas: 1500000,\n   *   gasPrice: '30000000000000'\n   * })\n   * .then(function(newContractInstance){\n   *   console.log(newContractInstance.options.address) // instance with the new contract address\n   * });\n   *\n   *\n   * // Simply encoding\n   * myContract.deploy({\n   *   input: '0x12345...',\n   *   arguments: [123, 'My String']\n   * })\n   * .encodeABI();\n   * > '0x12345...0000012345678765432'\n   *\n   *\n   * // Gas estimation\n   * myContract.deploy({\n   *   input: '0x12345...',\n   *   arguments: [123, 'My String']\n   * })\n   * .estimateGas(function(err, gas){\n   *   console.log(gas);\n   * });\n   * ```\n   *\n   * @returns - The transaction object\n   */\n  deploy(deployOptions) {\n    var _a, _b, _c;\n    let abi = this._jsonInterface.find(j => j.type === 'constructor');\n    if (!abi) {\n      abi = {\n        type: 'constructor',\n        inputs: [],\n        stateMutability: ''\n      };\n    }\n    const _input = format({\n      format: 'bytes'\n    }, (_a = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.input) !== null && _a !== void 0 ? _a : this.options.input, DEFAULT_RETURN_FORMAT);\n    const _data = format({\n      format: 'bytes'\n    }, (_b = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.data) !== null && _b !== void 0 ? _b : this.options.data, DEFAULT_RETURN_FORMAT);\n    if ((!_input || _input.trim() === '0x') && (!_data || _data.trim() === '0x')) {\n      throw new Web3ContractError('contract creation without any data provided.');\n    }\n    const args = (_c = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.arguments) !== null && _c !== void 0 ? _c : [];\n    const contractOptions = Object.assign(Object.assign({}, this.options), {\n      input: _input,\n      data: _data\n    });\n    const deployData = _input !== null && _input !== void 0 ? _input : _data;\n    return {\n      arguments: args,\n      send: options => {\n        const modifiedOptions = Object.assign({}, options);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return this._contractMethodDeploySend(abi, args, modifiedOptions, contractOptions);\n      },\n      estimateGas: (options, returnFormat = DEFAULT_RETURN_FORMAT) => __awaiter(this, void 0, void 0, function* () {\n        const modifiedOptions = Object.assign({}, options);\n        return this._contractMethodEstimateGas({\n          abi: abi,\n          params: args,\n          returnFormat,\n          options: modifiedOptions,\n          contractOptions\n        });\n      }),\n      encodeABI: () => encodeMethodABI(abi, args, format({\n        format: 'bytes'\n      }, deployData, DEFAULT_RETURN_FORMAT))\n    };\n  }\n  getPastEvents(param1, param2, param3) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const eventName = typeof param1 === 'string' ? param1 : ALL_EVENTS;\n      const options =\n      // eslint-disable-next-line no-nested-ternary\n      typeof param1 !== 'string' && !isDataFormat(param1) ? param1 : !isDataFormat(param2) ? param2 : {};\n      // eslint-disable-next-line no-nested-ternary\n      const returnFormat = isDataFormat(param1) ? param1 : isDataFormat(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : DEFAULT_RETURN_FORMAT;\n      const abi = eventName === 'allEvents' || eventName === ALL_EVENTS ? ALL_EVENTS_ABI : this._jsonInterface.find(j => 'name' in j && j.name === eventName);\n      if (!abi) {\n        throw new Web3ContractError(`Event ${eventName} not found.`);\n      }\n      const {\n        fromBlock,\n        toBlock,\n        topics,\n        address\n      } = encodeEventABI(this.options, abi, options !== null && options !== void 0 ? options : {});\n      const logs = yield getLogs(this, {\n        fromBlock,\n        toBlock,\n        topics,\n        address\n      }, returnFormat);\n      const decodedLogs = logs.map(log => typeof log === 'string' ? log : decodeEventABI(abi, log, this._jsonInterface, returnFormat));\n      const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n      const filterKeys = Object.keys(filter);\n      if (filterKeys.length > 0) {\n        return decodedLogs.filter(log => {\n          if (typeof log === 'string') return true;\n          return filterKeys.every(key => {\n            var _a;\n            if (Array.isArray(filter[key])) {\n              return filter[key].some(v => String(log.returnValues[key]).toUpperCase() === String(v).toUpperCase());\n            }\n            const inputAbi = (_a = abi.inputs) === null || _a === void 0 ? void 0 : _a.filter(input => input.name === key)[0];\n            if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === 'string') {\n              const hashedIndexedString = keccak256(filter[key]);\n              if (hashedIndexedString === String(log.returnValues[key])) return true;\n            }\n            return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();\n          });\n        });\n      }\n      return decodedLogs;\n    });\n  }\n  _parseAndSetAddress(value, returnFormat = DEFAULT_RETURN_FORMAT) {\n    this._address = value ? toChecksumAddress(format({\n      format: 'address'\n    }, value, returnFormat)) : value;\n  }\n  _parseAndSetJsonInterface(abis, returnFormat = DEFAULT_RETURN_FORMAT) {\n    var _a, _b, _c, _d, _e;\n    this._functions = {};\n    this._methods = {};\n    this._events = {};\n    let result = [];\n    const functionsAbi = abis.filter(abi => abi.type !== 'error');\n    const errorsAbi = abis.filter(abi => isAbiErrorFragment(abi));\n    for (const a of functionsAbi) {\n      const abi = Object.assign(Object.assign({}, a), {\n        signature: ''\n      });\n      if (isAbiFunctionFragment(abi)) {\n        const methodName = jsonInterfaceMethodToString(abi);\n        const methodSignature = encodeFunctionSignature(methodName);\n        abi.signature = methodSignature;\n        // make constant and payable backwards compatible\n        abi.constant = (_b = (_a = abi.stateMutability === 'view') !== null && _a !== void 0 ? _a : abi.stateMutability === 'pure') !== null && _b !== void 0 ? _b : abi.constant;\n        abi.payable = (_c = abi.stateMutability === 'payable') !== null && _c !== void 0 ? _c : abi.payable;\n        this._overloadedMethodAbis.set(abi.name, [...((_d = this._overloadedMethodAbis.get(abi.name)) !== null && _d !== void 0 ? _d : []), abi]);\n        const abiFragment = (_e = this._overloadedMethodAbis.get(abi.name)) !== null && _e !== void 0 ? _e : [];\n        const contractMethod = this._createContractMethod(abiFragment, errorsAbi);\n        this._functions[methodName] = {\n          signature: methodSignature,\n          method: contractMethod\n        };\n        // We don't know a particular type of the Abi method so can't type check\n        this._methods[abi.name] = this._functions[methodName].method;\n        // We don't know a particular type of the Abi method so can't type check\n        this._methods[methodName] = this._functions[methodName].method;\n        // We don't know a particular type of the Abi method so can't type check\n        this._methods[methodSignature] = this._functions[methodName].method;\n      } else if (isAbiEventFragment(abi)) {\n        const eventName = jsonInterfaceMethodToString(abi);\n        const eventSignature = encodeEventSignature(eventName);\n        const event = this._createContractEvent(abi, returnFormat);\n        abi.signature = eventSignature;\n        if (!(eventName in this._events) || abi.name === 'bound') {\n          // It's a private type and we don't want to expose it and no need to check\n          this._events[eventName] = event;\n        }\n        // It's a private type and we don't want to expose it and no need to check\n        this._events[abi.name] = event;\n        // It's a private type and we don't want to expose it and no need to check\n        this._events[eventSignature] = event;\n      }\n      result = [...result, abi];\n    }\n    this._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);\n    this._jsonInterface = [...result];\n    this._errorsInterface = errorsAbi;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _getAbiParams(abi, params) {\n    var _a;\n    try {\n      return validatorUtils.transformJsonDataToAbiFormat((_a = abi.inputs) !== null && _a !== void 0 ? _a : [], params);\n    } catch (error) {\n      throw new Web3ContractError(`Invalid parameters for method ${abi.name}: ${error.message}`);\n    }\n  }\n  _createContractMethod(abiArr, errorsAbis) {\n    const abi = abiArr[abiArr.length - 1];\n    return (...params) => {\n      var _a, _b;\n      let abiParams;\n      const abis = (_a = this._overloadedMethodAbis.get(abi.name)) !== null && _a !== void 0 ? _a : [];\n      let methodAbi = abis[0];\n      const internalErrorsAbis = errorsAbis;\n      const arrayOfAbis = abis.filter(_abi => {\n        var _a;\n        return ((_a = _abi.inputs) !== null && _a !== void 0 ? _a : []).length === params.length;\n      });\n      if (abis.length === 1 || arrayOfAbis.length === 0) {\n        abiParams = this._getAbiParams(methodAbi, params);\n        validator.validate((_b = abi.inputs) !== null && _b !== void 0 ? _b : [], abiParams);\n      } else {\n        const errors = [];\n        for (const _abi of arrayOfAbis) {\n          try {\n            abiParams = this._getAbiParams(_abi, params);\n            validator.validate(_abi.inputs, abiParams);\n            methodAbi = _abi;\n            break;\n          } catch (e) {\n            errors.push(e);\n          }\n        }\n        if (errors.length === arrayOfAbis.length) {\n          throw new Web3ValidatorError(errors);\n        }\n      }\n      const methods = {\n        arguments: abiParams,\n        call: (options, block) => __awaiter(this, void 0, void 0, function* () {\n          return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);\n        }),\n        send: options => this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n        estimateGas: (options, returnFormat = DEFAULT_RETURN_FORMAT) => __awaiter(this, void 0, void 0, function* () {\n          return this._contractMethodEstimateGas({\n            abi: methodAbi,\n            params: abiParams,\n            returnFormat,\n            options\n          });\n        }),\n        encodeABI: () => encodeMethodABI(methodAbi, abiParams),\n        createAccessList: (options, block) => __awaiter(this, void 0, void 0, function* () {\n          return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);\n        })\n      };\n      if (methodAbi.stateMutability === 'payable') {\n        return methods;\n      }\n      return methods;\n    };\n  }\n  _contractMethodCall(abi, params, errorsAbi, options, block) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = getEthTxCallParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this.config.contractDataInputFill\n        }),\n        contractOptions: Object.assign(Object.assign({}, this.options), {\n          from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n        })\n      });\n      try {\n        const result = yield call(this, tx, block, DEFAULT_RETURN_FORMAT);\n        return decodeMethodReturn(abi, result);\n      } catch (error) {\n        if (error instanceof ContractExecutionError) {\n          // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n          decodeContractErrorData(errorsAbi, error.innerError);\n        }\n        throw error;\n      }\n    });\n  }\n  _contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = getCreateAccessListParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this.config.contractDataInputFill\n        }),\n        contractOptions: Object.assign(Object.assign({}, this.options), {\n          from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n        })\n      });\n      try {\n        return createAccessList(this, tx, block, DEFAULT_RETURN_FORMAT);\n      } catch (error) {\n        if (error instanceof ContractExecutionError) {\n          // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n          decodeContractErrorData(errorsAbi, error.innerError);\n        }\n        throw error;\n      }\n    });\n  }\n  _contractMethodSend(abi, params, errorsAbi, options, contractOptions) {\n    var _a, _b;\n    let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n    modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n      input: undefined,\n      from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n    });\n    const tx = getSendTxParams({\n      abi,\n      params,\n      options: Object.assign(Object.assign({}, options), {\n        dataInputFill: this.config.contractDataInputFill\n      }),\n      contractOptions: modifiedContractOptions\n    });\n    const transactionToSend = sendTransaction(this, tx, DEFAULT_RETURN_FORMAT, {\n      // TODO Should make this configurable by the user\n      checkRevertBeforeSending: false,\n      contractAbi: this._jsonInterface\n    });\n    // eslint-disable-next-line no-void\n    void transactionToSend.on('error', error => {\n      if (error instanceof ContractExecutionError) {\n        // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n        decodeContractErrorData(errorsAbi, error.innerError);\n      }\n    });\n    return transactionToSend;\n  }\n  _contractMethodDeploySend(abi, params, options, contractOptions) {\n    var _a, _b;\n    let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n    modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n      from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n    });\n    const tx = getSendTxParams({\n      abi,\n      params,\n      options: Object.assign(Object.assign({}, options), {\n        dataInputFill: this.config.contractDataInputFill\n      }),\n      contractOptions: modifiedContractOptions\n    });\n    return sendTransaction(this, tx, DEFAULT_RETURN_FORMAT, {\n      transactionResolver: receipt => {\n        if (receipt.status === BigInt(0)) {\n          throw new Web3ContractError(\"code couldn't be stored\", receipt);\n        }\n        const newContract = this.clone();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        newContract.options.address = receipt.contractAddress;\n        return newContract;\n      },\n      contractAbi: this._jsonInterface,\n      // TODO Should make this configurable by the user\n      checkRevertBeforeSending: false\n    });\n  }\n  _contractMethodEstimateGas({\n    abi,\n    params,\n    returnFormat,\n    options,\n    contractOptions\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = getEstimateGasParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this.config.contractDataInputFill\n        }),\n        contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options\n      });\n      return estimateGas(this, tx, BlockTags.LATEST, returnFormat);\n    });\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _createContractEvent(abi, returnFormat = DEFAULT_RETURN_FORMAT) {\n    return (...params) => {\n      var _a;\n      const {\n        topics,\n        fromBlock\n      } = encodeEventABI(this.options, abi, params[0]);\n      const sub = new LogsSubscription({\n        address: this.options.address,\n        topics,\n        abi,\n        jsonInterface: this._jsonInterface\n      }, {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        subscriptionManager: this.subscriptionManager,\n        returnFormat\n      });\n      if (!isNullish(fromBlock)) {\n        // emit past events when fromBlock is defined\n        this.getPastEvents(abi.name, {\n          fromBlock,\n          topics\n        }, returnFormat).then(logs => {\n          logs.forEach(log => sub.emit('data', log));\n        }).catch(error => {\n          sub.emit('error', new SubscriptionError('Failed to get past events.', error));\n        });\n      }\n      (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.addSubscription(sub).catch(error => {\n        sub.emit('error', new SubscriptionError('Failed to subscribe.', error));\n      });\n      return sub;\n    };\n  }\n  subscribeToContextEvents(context) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const contractThis = this;\n    this.context = context;\n    if (contractThis.syncWithContext) {\n      context.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n        contractThis.setConfig({\n          [event.name]: event.newValue\n        });\n      });\n    }\n  }\n}","map":{"version":3,"names":["Web3Context","Web3ConfigEvent","ContractExecutionError","ContractTransactionDataAndInputError","SubscriptionError","Web3ContractError","createAccessList","call","estimateGas","getLogs","sendTransaction","decodeEventABI","NewHeadsSubscription","ALL_EVENTS","ALL_EVENTS_ABI","encodeEventSignature","encodeFunctionSignature","decodeContractErrorData","isAbiErrorFragment","isAbiEventFragment","isAbiFunctionFragment","jsonInterfaceMethodToString","BlockTags","DEFAULT_RETURN_FORMAT","format","isDataFormat","keccak256","toChecksumAddress","isNullish","validator","utils","validatorUtils","Web3ValidatorError","decodeMethodReturn","encodeEventABI","encodeMethodABI","LogsSubscription","getCreateAccessListParams","getEstimateGasParams","getEthTxCallParams","getSendTxParams","isContractInitOptions","isWeb3ContractContext","contractSubscriptions","logs","newHeads","newBlockHeaders","Contract","constructor","jsonInterface","addressOrOptionsOrContext","optionsOrContextOrReturnFormat","contextOrReturnFormat","returnFormat","options","undefined","contractContext","provider","givenProvider","Object","assign","registeredSubscriptions","syncWithContext","_functions","data","input","config","contractDataInputFill","_overloadedMethodAbis","Map","returnDataFormat","address","_a","dataInputFill","_parseAndSetJsonInterface","_parseAndSetAddress","_jsonInterface","gas","_b","gasLimit","gasPrice","from","_c","subscribeToContextEvents","defineProperty","set","value","get","_address","on","CONFIG_CHANGE","event","setConfig","name","newValue","events","_events","methods","_methods","clone","newContract","_errorsInterface","currentProvider","getContextObject","context","deploy","deployOptions","abi","find","j","type","inputs","stateMutability","_input","_data","trim","args","arguments","contractOptions","deployData","send","modifiedOptions","_contractMethodDeploySend","__awaiter","_contractMethodEstimateGas","params","encodeABI","getPastEvents","param1","param2","param3","eventName","fromBlock","toBlock","topics","decodedLogs","map","log","filter","filterKeys","keys","length","every","key","Array","isArray","some","v","String","returnValues","toUpperCase","inputAbi","indexed","hashedIndexedString","abis","result","functionsAbi","errorsAbi","a","signature","methodName","methodSignature","constant","payable","_d","abiFragment","_e","contractMethod","_createContractMethod","method","eventSignature","_createContractEvent","allEvents","_getAbiParams","transformJsonDataToAbiFormat","error","message","abiArr","errorsAbis","abiParams","methodAbi","internalErrorsAbis","arrayOfAbis","_abi","validate","errors","e","push","block","_contractMethodCall","_contractMethodSend","_contractMethodCreateAccessList","tx","defaultAccount","innerError","modifiedContractOptions","transactionToSend","checkRevertBeforeSending","contractAbi","transactionResolver","receipt","status","BigInt","contractAddress","LATEST","sub","subscriptionManager","then","forEach","emit","catch","addSubscription","contractThis"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth-contract\\src\\contract.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tWeb3Context,\n\tWeb3EventEmitter,\n\tWeb3PromiEvent,\n\tWeb3ConfigEvent,\n\tWeb3SubscriptionManager,\n} from 'web3-core';\nimport {\n\tContractExecutionError,\n\tContractTransactionDataAndInputError,\n\tSubscriptionError,\n\tWeb3ContractError,\n} from 'web3-errors';\nimport {\n\tcreateAccessList,\n\tcall,\n\testimateGas,\n\tgetLogs,\n\tsendTransaction,\n\tdecodeEventABI,\n\tNewHeadsSubscription,\n\tALL_EVENTS,\n\tALL_EVENTS_ABI,\n\tSendTransactionEvents,\n} from 'web3-eth';\nimport {\n\tencodeEventSignature,\n\tencodeFunctionSignature,\n\tdecodeContractErrorData,\n\tisAbiErrorFragment,\n\tisAbiEventFragment,\n\tisAbiFunctionFragment,\n\tjsonInterfaceMethodToString,\n} from 'web3-eth-abi';\nimport {\n\tAbiConstructorFragment,\n\tAbiErrorFragment,\n\tAbiEventFragment,\n\tAbiFragment,\n\tAbiFunctionFragment,\n\tContractAbi,\n\tContractConstructorArgs,\n\tContractEvent,\n\tContractEvents,\n\tContractMethod,\n\tContractMethodInputParameters,\n\tContractMethodOutputParameters,\n\tAddress,\n\tBlockNumberOrTag,\n\tBlockTags,\n\tBytes,\n\tEthExecutionAPI,\n\tFilter,\n\tFilterAbis,\n\tHexString,\n\tLogsInput,\n\tMutable,\n\tContractInitOptions,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tNumbers,\n\tWeb3ValidationErrorObject,\n\tEventLog,\n\tContractAbiWithSignature,\n\tContractOptions,\n} from 'web3-types';\nimport { format, isDataFormat, keccak256, toChecksumAddress } from 'web3-utils';\nimport {\n\tisNullish,\n\tvalidator,\n\tutils as validatorUtils,\n\tValidationSchemaInput,\n\tWeb3ValidatorError,\n} from 'web3-validator';\nimport { decodeMethodReturn, encodeEventABI, encodeMethodABI } from './encoding.js';\nimport { LogsSubscription } from './log_subscription.js';\nimport {\n\tContractEventOptions,\n\tNonPayableMethodObject,\n\tNonPayableTxOptions,\n\tPayableMethodObject,\n\tPayableTxOptions,\n\tWeb3ContractContext,\n} from './types.js';\nimport {\n\tgetCreateAccessListParams,\n\tgetEstimateGasParams,\n\tgetEthTxCallParams,\n\tgetSendTxParams,\n\tisContractInitOptions,\n\tisWeb3ContractContext,\n} from './utils.js';\n\ntype ContractBoundMethod<\n\tAbi extends AbiFunctionFragment,\n\tMethod extends ContractMethod<Abi> = ContractMethod<Abi>,\n> = (\n\t...args: Method['Inputs']\n) => Method['Abi']['stateMutability'] extends 'payable' | 'pure'\n\t? PayableMethodObject<Method['Inputs'], Method['Outputs']>\n\t: NonPayableMethodObject<Method['Inputs'], Method['Outputs']>;\n\nexport type ContractOverloadedMethodInputs<AbiArr extends ReadonlyArray<unknown>> = NonNullable<\n\tAbiArr extends readonly []\n\t\t? undefined\n\t\t: AbiArr extends readonly [infer A, ...infer R]\n\t\t? A extends AbiFunctionFragment\n\t\t\t? ContractMethodInputParameters<A['inputs']> | ContractOverloadedMethodInputs<R>\n\t\t\t: undefined\n\t\t: undefined\n>;\n\nexport type ContractOverloadedMethodOutputs<AbiArr extends ReadonlyArray<unknown>> = NonNullable<\n\tAbiArr extends readonly []\n\t\t? undefined\n\t\t: AbiArr extends readonly [infer A, ...infer R]\n\t\t? A extends AbiFunctionFragment\n\t\t\t? ContractMethodOutputParameters<A['outputs']> | ContractOverloadedMethodOutputs<R>\n\t\t\t: undefined\n\t\t: undefined\n>;\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractMethodsInterface<Abi extends ContractAbi> = {\n\t[MethodAbi in FilterAbis<\n\t\tAbi,\n\t\tAbiFunctionFragment & { type: 'function' }\n\t> as MethodAbi['name']]: ContractBoundMethod<MethodAbi>;\n\t// To allow users to use method signatures\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n} & { [key: string]: ContractBoundMethod<any> };\n\n/**\n * @hidden\n * The event object can be accessed from `myContract.events.myEvent`.\n *\n * \\> Remember: To subscribe to an event, your provider must have support for subscriptions.\n *\n * ```ts\n * const subscription = await myContract.events.MyEvent([options])\n * ```\n *\n * @param options - The options used to subscribe for the event\n * @returns - A Promise resolved with {@link LogsSubscription} object\n */\nexport type ContractBoundEvent = (options?: ContractEventOptions) => LogsSubscription;\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractEventsInterface<\n\tAbi extends ContractAbi,\n\tEvents extends ContractEvents<Abi> = ContractEvents<Abi>,\n> = {\n\t[Name in keyof Events | 'allEvents']: ContractBoundEvent;\n} & {\n\t[key: string]: ContractBoundEvent;\n};\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractEventEmitterInterface<Abi extends ContractAbi> = {\n\t[EventAbi in FilterAbis<\n\t\tAbi,\n\t\tAbiFunctionFragment & { type: 'event' }\n\t> as EventAbi['name']]: ContractEvent<EventAbi>['Inputs'];\n};\n\ntype EventParameters = Parameters<typeof encodeEventABI>[2];\n\nconst contractSubscriptions = {\n\tlogs: LogsSubscription,\n\tnewHeads: NewHeadsSubscription,\n\tnewBlockHeaders: NewHeadsSubscription,\n};\n\n/**\n * The class designed to interact with smart contracts on the Ethereum blockchain.\n */\nexport class Contract<Abi extends ContractAbi>\n\textends Web3Context<EthExecutionAPI, typeof contractSubscriptions>\n\timplements Web3EventEmitter<ContractEventEmitterInterface<Abi>>\n{\n\t/**\n\t * The options `object` for the contract instance. `from`, `gas` and `gasPrice` are used as fallback values when sending transactions.\n\t *\n\t * ```ts\n\t * myContract.options;\n\t * > {\n\t *     address: '0x1234567890123456789012345678901234567891',\n\t *     jsonInterface: [...],\n\t *     from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\n\t *     gasPrice: '10000000000000',\n\t *     gas: 1000000\n\t * }\n\t *\n\t * myContract.options.from = '0x1234567890123456789012345678901234567891'; // default from address\n\t * myContract.options.gasPrice = '20000000000000'; // default gas price in wei\n\t * myContract.options.gas = 5000000; // provide as fallback always 5M gas\n\t * ```\n\t */\n\n\tpublic readonly options: ContractOptions;\n\n\t/**\n\t * Set to true if you want contracts' defaults to sync with global defaults.\n\t */\n\tpublic syncWithContext = false;\n\n\tprivate _errorsInterface!: AbiErrorFragment[];\n\tprivate _jsonInterface!: ContractAbiWithSignature;\n\tprivate _address?: Address;\n\tprivate _functions: Record<\n\t\tstring,\n\t\t{\n\t\t\tsignature: string;\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tmethod: ContractBoundMethod<any>;\n\t\t}\n\t> = {};\n\tprivate readonly _overloadedMethodAbis: Map<string, AbiFunctionFragment[]>;\n\tprivate _methods!: ContractMethodsInterface<Abi>;\n\tprivate _events!: ContractEventsInterface<Abi>;\n\t/**\n\t * Set property to `data`, `input`, or `both` to change the property of the contract being sent to the\n\t * RPC provider when using contract methods.\n\t * Default is `input`\n\t */\n\n\tprivate context?: Web3Context;\n\t/**\n\t * Creates a new contract instance with all its methods and events defined in its ABI provided.\n\t *\n\t * ```ts\n\t * new web3.eth.Contract(jsonInterface[, address][, options])\n\t * ```\n\t *\n\t * @param jsonInterface - The JSON interface for the contract to instantiate.\n\t * @param address - The address of the smart contract to call.\n\t * @param options - The options of the contract. Some are used as fallbacks for calls and transactions.\n\t * @param context - The context of the contract used for customizing the behavior of the contract.\n\t * @returns - The contract instance with all its methods and events.\n\t *\n\t * ```ts title=\"Example\"\n\t * var myContract = new web3.eth.Contract([...], '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe', {\n\t *   from: '0x1234567890123456789012345678901234567891', // default from address\n\t *   gasPrice: '20000000000' // default gas price in wei, 20 gwei in this case\n\t * });\n\t * ```\n\t *\n\t * To use the type safe interface for these contracts you have to include the ABI definitions in your Typescript project and then declare these as `const`.\n\t *\n\t * ```ts title=\"Example\"\n\t * const myContractAbi = [....] as const; // ABI definitions\n\t * const myContract = new web3.eth.Contract(myContractAbi, '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe');\n\t * ```\n\t */\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\tcontext?: Web3ContractContext | Web3Context,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddress?: Address,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\toptions?: ContractInitOptions,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddress: Address | undefined,\n\t\toptions: ContractInitOptions,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddressOrOptionsOrContext?:\n\t\t\t| Address\n\t\t\t| ContractInitOptions\n\t\t\t| Web3ContractContext\n\t\t\t| Web3Context,\n\t\toptionsOrContextOrReturnFormat?:\n\t\t\t| ContractInitOptions\n\t\t\t| Web3ContractContext\n\t\t\t| Web3Context\n\t\t\t| DataFormat,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t) {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst options = isContractInitOptions(addressOrOptionsOrContext)\n\t\t\t? addressOrOptionsOrContext\n\t\t\t: isContractInitOptions(optionsOrContextOrReturnFormat)\n\t\t\t? optionsOrContextOrReturnFormat\n\t\t\t: undefined;\n\n\t\tlet contractContext;\n\t\tif (isWeb3ContractContext(addressOrOptionsOrContext)) {\n\t\t\tcontractContext = addressOrOptionsOrContext;\n\t\t} else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {\n\t\t\tcontractContext = optionsOrContextOrReturnFormat;\n\t\t} else {\n\t\t\tcontractContext = contextOrReturnFormat;\n\t\t}\n\n\t\tlet provider;\n\t\tif (\n\t\t\ttypeof addressOrOptionsOrContext === 'object' &&\n\t\t\t'provider' in addressOrOptionsOrContext\n\t\t) {\n\t\t\tprovider = addressOrOptionsOrContext.provider;\n\t\t} else if (\n\t\t\ttypeof optionsOrContextOrReturnFormat === 'object' &&\n\t\t\t'provider' in optionsOrContextOrReturnFormat\n\t\t) {\n\t\t\tprovider = optionsOrContextOrReturnFormat.provider;\n\t\t} else if (\n\t\t\ttypeof contextOrReturnFormat === 'object' &&\n\t\t\t'provider' in contextOrReturnFormat\n\t\t) {\n\t\t\tprovider = contextOrReturnFormat.provider;\n\t\t} else {\n\t\t\tprovider = Contract.givenProvider;\n\t\t}\n\n\t\tsuper({\n\t\t\t...contractContext,\n\t\t\tprovider,\n\t\t\tregisteredSubscriptions: contractSubscriptions,\n\t\t});\n\t\tif (\n\t\t\t!isNullish(options) &&\n\t\t\t!isNullish(options.data) &&\n\t\t\t!isNullish(options.input) &&\n\t\t\tthis.config.contractDataInputFill !== 'both'\n\t\t)\n\t\t\tthrow new ContractTransactionDataAndInputError({\n\t\t\t\tdata: options.data as HexString,\n\t\t\t\tinput: options.input as HexString,\n\t\t\t});\n\t\tthis._overloadedMethodAbis = new Map<string, AbiFunctionFragment[]>();\n\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst returnDataFormat = isDataFormat(contextOrReturnFormat)\n\t\t\t? contextOrReturnFormat\n\t\t\t: isDataFormat(optionsOrContextOrReturnFormat)\n\t\t\t? optionsOrContextOrReturnFormat\n\t\t\t: returnFormat ?? DEFAULT_RETURN_FORMAT;\n\t\tconst address =\n\t\t\ttypeof addressOrOptionsOrContext === 'string' ? addressOrOptionsOrContext : undefined;\n\t\t\tthis.config.contractDataInputFill =\n\t\t\t\t(options as ContractInitOptions)?.dataInputFill ??\n\t\t\t\tthis.config.contractDataInputFill;\n\t\tthis._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n\n\t\tif (!isNullish(address)) {\n\t\t\tthis._parseAndSetAddress(address, returnDataFormat);\n\t\t}\n\n\t\tthis.options = {\n\t\t\taddress,\n\t\t\tjsonInterface: this._jsonInterface,\n\t\t\tgas: options?.gas ?? options?.gasLimit,\n\t\t\tgasPrice: options?.gasPrice,\n\t\t\tfrom: options?.from,\n\t\t\tinput: options?.input,\n\t\t\tdata: options?.data,\n\t\t};\n\n\t\tthis.syncWithContext = (options as ContractInitOptions)?.syncWithContext ?? false;\n\t\tif (contractContext instanceof Web3Context) {\n\t\t\tthis.subscribeToContextEvents(contractContext);\n\t\t}\n\t\tObject.defineProperty(this.options, 'address', {\n\t\t\tset: (value: Address) => this._parseAndSetAddress(value, returnDataFormat),\n\t\t\tget: () => this._address,\n\t\t});\n\n\t\tObject.defineProperty(this.options, 'jsonInterface', {\n\t\t\tset: (value: ContractAbi) => this._parseAndSetJsonInterface(value, returnDataFormat),\n\t\t\tget: () => this._jsonInterface,\n\t\t});\n\n\t\tif (contractContext instanceof Web3Context) {\n\t\t\tcontractContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\tthis.setConfig({ [event.name]: event.newValue });\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Subscribe to an event.\n\t *\n\t * ```ts\n\t * await myContract.events.MyEvent([options])\n\t * ```\n\t *\n\t * There is a special event `allEvents` that can be used to subscribe all events.\n\t *\n\t * ```ts\n\t * await myContract.events.allEvents([options])\n\t * ```\n\t *\n\t * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n\t */\n\tpublic get events() {\n\t\treturn this._events;\n\t}\n\n\t/**\n\t * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n\t *\n\t * The methods of this smart contract are available through:\n\t *\n\t * The name: `myContract.methods.myMethod(123)`\n\t * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n\t * The signature `myContract.methods['0x58cf5f10'](123)`\n\t *\n\t * This allows calling functions with same name but different parameters from the JavaScript contract object.\n\t *\n\t * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n\t *\n\t * ```ts\n\t * // calling a method\n\t * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // or sending and using a promise\n\t * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // or sending and using the events\n\t * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t * sendObject.on('transactionHash', function(hash){\n\t *   ...\n\t * });\n\t * sendObject.on('receipt', function(receipt){\n\t *   ...\n\t * });\n\t * sendObject.on('confirmation', function(confirmationNumber, receipt){\n\t *   ...\n\t * });\n\t * sendObject.on('error', function(error, receipt) {\n\t *   ...\n\t * });\n\t * ```\n\t *\n\t * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.\n\t */\n\tpublic get methods() {\n\t\treturn this._methods;\n\t}\n\n\t/**\n\t * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n\t *\n\t * @returns - The new contract instance.\n\t *\n\t * ```ts\n\t * const contract1 = new eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n\t *\n\t * const contract2 = contract1.clone();\n\t * contract2.options.address = address2;\n\t *\n\t * (contract1.options.address !== contract2.options.address);\n\t * > true\n\t * ```\n\t */\n\tpublic clone() {\n\t\tlet newContract: Contract<any>;\n\t\tif (this.options.address) {\n\t\t\tnewContract = new Contract<Abi>(\n\t\t\t\t[...this._jsonInterface, ...this._errorsInterface] as unknown as Abi,\n\t\t\t\tthis.options.address,\n\t\t\t\t{\n\t\t\t\t\tgas: this.options.gas,\n\t\t\t\t\tgasPrice: this.options.gasPrice,\n\t\t\t\t\tfrom: this.options.from,\n\t\t\t\t\tinput: this.options.input,\n\t\t\t\t\tdata: this.options.data,\n\t\t\t\t\tprovider: this.currentProvider,\n\t\t\t\t\tsyncWithContext: this.syncWithContext,\n\t\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t\t},\n\t\t\t\tthis.getContextObject(),\n\t\t\t);\n\t\t} else {\n\t\t\tnewContract = new Contract<Abi>(\n\t\t\t\t[...this._jsonInterface, ...this._errorsInterface] as unknown as Abi,\n\t\t\t\t{\n\t\t\t\t\tgas: this.options.gas,\n\t\t\t\t\tgasPrice: this.options.gasPrice,\n\t\t\t\t\tfrom: this.options.from,\n\t\t\t\t\tinput: this.options.input,\n\t\t\t\t\tdata: this.options.data,\n\t\t\t\t\tprovider: this.currentProvider,\n\t\t\t\t\tsyncWithContext: this.syncWithContext,\n\t\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t\t},\n\t\t\t\tthis.getContextObject(),\n\t\t\t);\n\t\t}\n\t\tif (this.context) newContract.subscribeToContextEvents(this.context);\n\n\t\treturn newContract;\n\t}\n\n\t/**\n\t * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n\t *\n\t * ```ts\n\t * myContract.deploy({\n\t *   input: '0x12345...', // data keyword can be used, too. If input is used, data will be ignored.\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .send({\n\t *   from: '0x1234567890123456789012345678901234567891',\n\t *   gas: 1500000,\n\t *   gasPrice: '30000000000000'\n\t * }, function(error, transactionHash){ ... })\n\t * .on('error', function(error){ ... })\n\t * .on('transactionHash', function(transactionHash){ ... })\n\t * .on('receipt', function(receipt){\n\t *  console.log(receipt.contractAddress) // contains the new contract address\n\t * })\n\t * .on('confirmation', function(confirmationNumber, receipt){ ... })\n\t * .then(function(newContractInstance){\n\t *   console.log(newContractInstance.options.address) // instance with the new contract address\n\t * });\n\t *\n\t *\n\t * // When the data is already set as an option to the contract itself\n\t * myContract.options.data = '0x12345...';\n\t *\n\t * myContract.deploy({\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .send({\n\t *   from: '0x1234567890123456789012345678901234567891',\n\t *   gas: 1500000,\n\t *   gasPrice: '30000000000000'\n\t * })\n\t * .then(function(newContractInstance){\n\t *   console.log(newContractInstance.options.address) // instance with the new contract address\n\t * });\n\t *\n\t *\n\t * // Simply encoding\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .encodeABI();\n\t * > '0x12345...0000012345678765432'\n\t *\n\t *\n\t * // Gas estimation\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .estimateGas(function(err, gas){\n\t *   console.log(gas);\n\t * });\n\t * ```\n\t *\n\t * @returns - The transaction object\n\t */\n\tpublic deploy(deployOptions?: {\n\t\t/**\n\t\t * The byte code of the contract.\n\t\t */\n\t\tdata?: HexString;\n\t\tinput?: HexString;\n\t\t/**\n\t\t * The arguments which get passed to the constructor on deployment.\n\t\t */\n\t\targuments?: ContractConstructorArgs<Abi>;\n\t}) {\n\t\tlet abi = this._jsonInterface.find(j => j.type === 'constructor') as AbiConstructorFragment;\n\t\tif (!abi) {\n\t\t\tabi = {\n\t\t\t\ttype: 'constructor',\n\t\t\t\tinputs: [],\n\t\t\t\tstateMutability: '',\n\t\t\t} as AbiConstructorFragment;\n\t\t}\n\n\t\tconst _input = format(\n\t\t\t{ format: 'bytes' },\n\t\t\tdeployOptions?.input ?? this.options.input,\n\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t);\n\n\t\tconst _data = format(\n\t\t\t{ format: 'bytes' },\n\t\t\tdeployOptions?.data ?? this.options.data,\n\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t);\n\n\t\tif ((!_input || _input.trim() === '0x') && (!_data || _data.trim() === '0x')) {\n\t\t\tthrow new Web3ContractError('contract creation without any data provided.');\n\t\t}\n\n\t\tconst args = deployOptions?.arguments ?? [];\n\n\t\tconst contractOptions: ContractOptions = { ...this.options, input: _input, data: _data };\n\t\tconst deployData = _input ?? _data;\n\t\treturn {\n\t\t\targuments: args,\n\t\t\tsend: (\n\t\t\t\toptions?: PayableTxOptions,\n\t\t\t): Web3PromiEvent<\n\t\t\t\tContract<Abi>,\n\t\t\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t\t\t> => {\n\t\t\t\tconst modifiedOptions = { ...options };\n\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn this._contractMethodDeploySend(\n\t\t\t\t\tabi as AbiFunctionFragment,\n\t\t\t\t\targs as unknown[],\n\t\t\t\t\tmodifiedOptions,\n\t\t\t\t\tcontractOptions,\n\t\t\t\t);\n\t\t\t},\n\t\t\testimateGas: async <ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\t\t\toptions?: PayableCallOptions,\n\t\t\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t\t\t) => {\n\t\t\t\tconst modifiedOptions = { ...options };\n\t\t\t\treturn this._contractMethodEstimateGas({\n\t\t\t\t\tabi: abi as AbiFunctionFragment,\n\t\t\t\t\tparams: args as unknown[],\n\t\t\t\t\treturnFormat,\n\t\t\t\t\toptions: modifiedOptions,\n\t\t\t\t\tcontractOptions,\n\t\t\t\t});\n\t\t\t},\n\t\t\tencodeABI: () =>\n\t\t\t\tencodeMethodABI(\n\t\t\t\t\tabi as AbiFunctionFragment,\n\t\t\t\t\targs as unknown[],\n\t\t\t\t\tformat({ format: 'bytes' }, deployData as Bytes, DEFAULT_RETURN_FORMAT),\n\t\t\t\t),\n\t\t};\n\t}\n\n\t/**\n\t * Gets past events for this contract.\n\t *\n\t * ```ts\n\t * const events = await myContract.getPastEvents('MyEvent', {\n\t *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23\n\t *   fromBlock: 0,\n\t *   toBlock: 'latest'\n\t * });\n\t *\n\t * > [{\n\t *   returnValues: {\n\t *       myIndexedParam: 20,\n\t *       myOtherIndexedParam: '0x123456789...',\n\t *       myNonIndexParam: 'My String'\n\t *   },\n\t *   raw: {\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *   },\n\t *   event: 'MyEvent',\n\t *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *   logIndex: 0,\n\t *   transactionIndex: 0,\n\t *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *   blockNumber: 1234,\n\t *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t * },{\n\t *   ...\n\t * }]\n\t * ```\n\t *\n\t * @param eventName - The name of the event in the contract, or `allEvents` to get all events.\n\t * @param filter - The filter options used to get events.\n\t * @param returnFormat - Return format\n\t * @returns - An array with the past event `Objects`, matching the given event name and filter.\n\t */\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\teventName: keyof ContractEvents<Abi> | 'allEvents' | 'ALLEVENTS',\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilter: Omit<Filter, 'address'>,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\teventName: keyof ContractEvents<Abi> | 'allEvents' | 'ALLEVENTS',\n\t\tfilter: Omit<Filter, 'address'>,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tparam1?:\n\t\t\t| keyof ContractEvents<Abi>\n\t\t\t| 'allEvents'\n\t\t\t| 'ALLEVENTS'\n\t\t\t| Omit<Filter, 'address'>\n\t\t\t| ReturnFormat,\n\t\tparam2?: Omit<Filter, 'address'> | ReturnFormat,\n\t\tparam3?: ReturnFormat,\n\t): Promise<(string | EventLog)[]> {\n\t\tconst eventName = typeof param1 === 'string' ? param1 : ALL_EVENTS;\n\n\t\tconst options =\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\ttypeof param1 !== 'string' && !isDataFormat(param1)\n\t\t\t\t? param1\n\t\t\t\t: !isDataFormat(param2)\n\t\t\t\t? param2\n\t\t\t\t: {};\n\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst returnFormat = isDataFormat(param1)\n\t\t\t? param1\n\t\t\t: isDataFormat(param2)\n\t\t\t? param2\n\t\t\t: param3 ?? DEFAULT_RETURN_FORMAT;\n\n\t\tconst abi =\n\t\t\teventName === 'allEvents' || eventName === ALL_EVENTS\n\t\t\t\t? ALL_EVENTS_ABI\n\t\t\t\t: (this._jsonInterface.find(\n\t\t\t\t\t\tj => 'name' in j && j.name === eventName,\n\t\t\t\t  ) as AbiEventFragment & { signature: string });\n\n\t\tif (!abi) {\n\t\t\tthrow new Web3ContractError(`Event ${eventName} not found.`);\n\t\t}\n\n\t\tconst { fromBlock, toBlock, topics, address } = encodeEventABI(\n\t\t\tthis.options,\n\t\t\tabi,\n\t\t\toptions ?? {},\n\t\t);\n\n\t\tconst logs = await getLogs(this, { fromBlock, toBlock, topics, address }, returnFormat);\n\t\tconst decodedLogs = logs.map(log =>\n\t\t\ttypeof log === 'string'\n\t\t\t\t? log\n\t\t\t\t: decodeEventABI(abi, log as LogsInput, this._jsonInterface, returnFormat),\n\t\t);\n\n\t\tconst filter = options?.filter ?? {};\n\t\tconst filterKeys = Object.keys(filter);\n\n\t\tif (filterKeys.length > 0) {\n\t\t\treturn decodedLogs.filter(log => {\n\t\t\t\tif (typeof log === 'string') return true;\n\n\t\t\t\treturn filterKeys.every((key: string) => {\n\t\t\t\t\tif (Array.isArray(filter[key])) {\n\t\t\t\t\t\treturn (filter[key] as Numbers[]).some(\n\t\t\t\t\t\t\t(v: Numbers) =>\n\t\t\t\t\t\t\t\tString(log.returnValues[key]).toUpperCase() ===\n\t\t\t\t\t\t\t\tString(v).toUpperCase(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst inputAbi = abi.inputs?.filter(input => input.name === key)[0];\n\t\t\t\t\tif (inputAbi?.indexed && inputAbi.type === 'string') {\n\t\t\t\t\t\tconst hashedIndexedString = keccak256(filter[key] as string);\n\t\t\t\t\t\tif (hashedIndexedString === String(log.returnValues[key])) return true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\tString(log.returnValues[key]).toUpperCase() ===\n\t\t\t\t\t\tString(filter[key]).toUpperCase()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn decodedLogs;\n\t}\n\n\tprivate _parseAndSetAddress(value?: Address, returnFormat: DataFormat = DEFAULT_RETURN_FORMAT) {\n\t\tthis._address = value\n\t\t\t? toChecksumAddress(format({ format: 'address' }, value, returnFormat))\n\t\t\t: value;\n\t}\n\n\tprivate _parseAndSetJsonInterface(\n\t\tabis: ContractAbi,\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n\t) {\n\t\tthis._functions = {};\n\t\tthis._methods = {} as ContractMethodsInterface<Abi>;\n\t\tthis._events = {} as ContractEventsInterface<Abi>;\n\n\t\tlet result: ContractAbi = [];\n\n\t\tconst functionsAbi = abis.filter(abi => abi.type !== 'error');\n\t\tconst errorsAbi = abis.filter(abi =>\n\t\t\tisAbiErrorFragment(abi),\n\t\t) as unknown as AbiErrorFragment[];\n\n\t\tfor (const a of functionsAbi) {\n\t\t\tconst abi: Mutable<AbiFragment & { signature: HexString }> = {\n\t\t\t\t...a,\n\t\t\t\tsignature: '',\n\t\t\t};\n\n\t\t\tif (isAbiFunctionFragment(abi)) {\n\t\t\t\tconst methodName = jsonInterfaceMethodToString(abi);\n\t\t\t\tconst methodSignature = encodeFunctionSignature(methodName);\n\t\t\t\tabi.signature = methodSignature;\n\n\t\t\t\t// make constant and payable backwards compatible\n\t\t\t\tabi.constant =\n\t\t\t\t\tabi.stateMutability === 'view' ??\n\t\t\t\t\tabi.stateMutability === 'pure' ??\n\t\t\t\t\tabi.constant;\n\n\t\t\t\tabi.payable = abi.stateMutability === 'payable' ?? abi.payable;\n\t\t\t\tthis._overloadedMethodAbis.set(abi.name, [\n\t\t\t\t\t...(this._overloadedMethodAbis.get(abi.name) ?? []),\n\t\t\t\t\tabi,\n\t\t\t\t]);\n\t\t\t\tconst abiFragment = this._overloadedMethodAbis.get(abi.name) ?? [];\n\t\t\t\tconst contractMethod = this._createContractMethod<\n\t\t\t\t\ttypeof abiFragment,\n\t\t\t\t\tAbiErrorFragment\n\t\t\t\t>(abiFragment, errorsAbi);\n\n\t\t\t\tthis._functions[methodName] = {\n\t\t\t\t\tsignature: methodSignature,\n\t\t\t\t\tmethod: contractMethod,\n\t\t\t\t};\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[abi.name as keyof ContractMethodsInterface<Abi>] = this._functions[\n\t\t\t\t\tmethodName\n\t\t\t\t].method as never;\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[methodName as keyof ContractMethodsInterface<Abi>] = this._functions[\n\t\t\t\t\tmethodName\n\t\t\t\t].method as never;\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[methodSignature as keyof ContractMethodsInterface<Abi>] = this\n\t\t\t\t\t._functions[methodName].method as never;\n\t\t\t} else if (isAbiEventFragment(abi)) {\n\t\t\t\tconst eventName = jsonInterfaceMethodToString(abi);\n\t\t\t\tconst eventSignature = encodeEventSignature(eventName);\n\t\t\t\tconst event = this._createContractEvent(abi, returnFormat);\n\t\t\t\tabi.signature = eventSignature;\n\n\t\t\t\tif (!(eventName in this._events) || abi.name === 'bound') {\n\t\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\t\tthis._events[eventName as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t\t}\n\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\tthis._events[abi.name as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\tthis._events[eventSignature as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t}\n\n\t\t\tresult = [...result, abi];\n\t\t}\n\n\t\tthis._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);\n\t\tthis._jsonInterface = [...result] as unknown as ContractAbiWithSignature;\n\t\tthis._errorsInterface = errorsAbi;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _getAbiParams(abi: AbiFunctionFragment, params: unknown[]): Array<unknown> {\n\t\ttry {\n\t\t\treturn validatorUtils.transformJsonDataToAbiFormat(abi.inputs ?? [], params);\n\t\t} catch (error) {\n\t\t\tthrow new Web3ContractError(\n\t\t\t\t`Invalid parameters for method ${abi.name}: ${(error as Error).message}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _createContractMethod<T extends AbiFunctionFragment[], E extends AbiErrorFragment>(\n\t\tabiArr: T,\n\t\terrorsAbis: E[],\n\t): ContractBoundMethod<T[0]> {\n\t\tconst abi = abiArr[abiArr.length - 1];\n\t\treturn (...params: unknown[]) => {\n\t\t\tlet abiParams!: Array<unknown>;\n\t\t\tconst abis = this._overloadedMethodAbis.get(abi.name) ?? [];\n\t\t\tlet methodAbi: AbiFunctionFragment = abis[0];\n\t\t\tconst internalErrorsAbis = errorsAbis;\n\n\t\t\tconst arrayOfAbis: AbiFunctionFragment[] = abis.filter(\n\t\t\t\t_abi => (_abi.inputs ?? []).length === params.length,\n\t\t\t);\n\n\t\t\tif (abis.length === 1 || arrayOfAbis.length === 0) {\n\t\t\t\tabiParams = this._getAbiParams(methodAbi, params);\n\t\t\t\tvalidator.validate(abi.inputs ?? [], abiParams);\n\t\t\t} else {\n\t\t\t\tconst errors: Web3ValidationErrorObject[] = [];\n\n\t\t\t\tfor (const _abi of arrayOfAbis) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tabiParams = this._getAbiParams(_abi, params);\n\t\t\t\t\t\tvalidator.validate(\n\t\t\t\t\t\t\t_abi.inputs as unknown as ValidationSchemaInput,\n\t\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmethodAbi = _abi;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\terrors.push(e as Web3ValidationErrorObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (errors.length === arrayOfAbis.length) {\n\t\t\t\t\tthrow new Web3ValidatorError(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst methods = {\n\t\t\t\targuments: abiParams,\n\n\t\t\t\tcall: async (\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\tblock?: BlockNumberOrTag,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodCall(\n\t\t\t\t\t\tmethodAbi,\n\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\tinternalErrorsAbis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tblock,\n\t\t\t\t\t),\n\n\t\t\t\tsend: (options?: PayableTxOptions | NonPayableTxOptions) =>\n\t\t\t\t\tthis._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n\n\t\t\t\testimateGas: async <ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodEstimateGas({\n\t\t\t\t\t\tabi: methodAbi,\n\t\t\t\t\t\tparams: abiParams,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t}),\n\n\t\t\t\tencodeABI: () => encodeMethodABI(methodAbi, abiParams),\n\n\t\t\t\tcreateAccessList: async (\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\tblock?: BlockNumberOrTag,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodCreateAccessList(\n\t\t\t\t\t\tmethodAbi,\n\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\tinternalErrorsAbis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tblock,\n\t\t\t\t\t),\n\t\t\t};\n\n\t\t\tif (methodAbi.stateMutability === 'payable') {\n\t\t\t\treturn methods as PayableMethodObject<\n\t\t\t\t\tContractOverloadedMethodInputs<T>,\n\t\t\t\t\tContractOverloadedMethodOutputs<T>\n\t\t\t\t>;\n\t\t\t}\n\t\t\treturn methods as NonPayableMethodObject<\n\t\t\t\tContractOverloadedMethodInputs<T>,\n\t\t\t\tContractOverloadedMethodOutputs<T>\n\t\t\t>;\n\t\t};\n\t}\n\n\tprivate async _contractMethodCall<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tblock?: BlockNumberOrTag,\n\t) {\n\t\tconst tx = getEthTxCallParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: {\n\t\t\t\t...options,\n\t\t\t\tdataInputFill: this.config.contractDataInputFill,\n\t\t\t},\n\t\t\tcontractOptions: {\n\t\t\t\t...this.options,\n\t\t\t\tfrom: this.options.from ?? this.config.defaultAccount,\n\t\t\t},\n\t\t});\n\t\ttry {\n\t\t\tconst result = await call(this, tx, block, DEFAULT_RETURN_FORMAT);\n\t\t\treturn decodeMethodReturn(abi, result);\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.innerError);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _contractMethodCreateAccessList<\n\t\tOptions extends PayableCallOptions | NonPayableCallOptions,\n\t>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tblock?: BlockNumberOrTag,\n\t) {\n\t\tconst tx = getCreateAccessListParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: {\n\t\t\t\t...this.options,\n\t\t\t\tfrom: this.options.from ?? this.config.defaultAccount,\n\t\t\t},\n\t\t});\n\n\t\ttry {\n\t\t\treturn createAccessList(this, tx, block, DEFAULT_RETURN_FORMAT);\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.innerError);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate _contractMethodSend<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tcontractOptions?: ContractOptions,\n\t) {\n\t\tlet modifiedContractOptions = contractOptions ?? this.options;\n\t\tmodifiedContractOptions = {\n\t\t\t...modifiedContractOptions,\n\t\t\tinput: undefined,\n\t\t\tfrom: modifiedContractOptions.from ?? this.defaultAccount ?? undefined,\n\t\t};\n\t\tconst tx = getSendTxParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: modifiedContractOptions,\n\t\t});\n\t\t\n\t\tconst transactionToSend = sendTransaction(this, tx, DEFAULT_RETURN_FORMAT, {\n\t\t\t// TODO Should make this configurable by the user\n\t\t\tcheckRevertBeforeSending: false,\n\t\t\tcontractAbi: this._jsonInterface,\n\t\t});\n\t\t\n\t\t// eslint-disable-next-line no-void\n\t\tvoid transactionToSend.on('error', (error: unknown) => {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.innerError);\n\t\t\t}\n\t\t});\n\t\treturn transactionToSend;\n\t}\n\n\tprivate _contractMethodDeploySend<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\toptions?: Options,\n\t\tcontractOptions?: ContractOptions,\n\t) {\n\t\tlet modifiedContractOptions = contractOptions ?? this.options;\n\t\tmodifiedContractOptions = {\n\t\t\t...modifiedContractOptions,\n\t\t\tfrom: modifiedContractOptions.from ?? this.defaultAccount ?? undefined,\n\t\t};\n\t\tconst tx = getSendTxParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: modifiedContractOptions,\n\t\t});\n\t\treturn sendTransaction(this, tx, DEFAULT_RETURN_FORMAT, {\n\t\t\ttransactionResolver: receipt => {\n\t\t\t\tif (receipt.status === BigInt(0)) {\n\t\t\t\t\tthrow new Web3ContractError(\"code couldn't be stored\", receipt);\n\t\t\t\t}\n\n\t\t\t\tconst newContract = this.clone();\n\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tnewContract.options.address = receipt.contractAddress;\n\t\t\t\treturn newContract;\n\t\t\t},\n\t\t\tcontractAbi: this._jsonInterface,\n\t\t\t// TODO Should make this configurable by the user\n\t\t\tcheckRevertBeforeSending: false,\n\t\t});\n\t}\n\n\tprivate async _contractMethodEstimateGas<\n\t\tOptions extends PayableCallOptions | NonPayableCallOptions,\n\t\tReturnFormat extends DataFormat,\n\t>({\n\t\tabi,\n\t\tparams,\n\t\treturnFormat,\n\t\toptions,\n\t\tcontractOptions,\n\t}: {\n\t\tabi: AbiFunctionFragment;\n\t\tparams: unknown[];\n\t\treturnFormat: ReturnFormat;\n\t\toptions?: Options;\n\t\tcontractOptions?: ContractOptions;\n\t}) {\n\t\tconst tx = getEstimateGasParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: contractOptions ?? this.options,\n\t\t});\n\t\treturn estimateGas(this, tx, BlockTags.LATEST, returnFormat);\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _createContractEvent(\n\t\tabi: AbiEventFragment & { signature: HexString },\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n\t): ContractBoundEvent {\n\t\treturn (...params: unknown[]) => {\n\t\t\tconst { topics, fromBlock } = encodeEventABI(\n\t\t\t\tthis.options,\n\t\t\t\tabi,\n\t\t\t\tparams[0] as EventParameters,\n\t\t\t);\n\t\t\tconst sub = new LogsSubscription(\n\t\t\t\t{\n\t\t\t\t\taddress: this.options.address,\n\t\t\t\t\ttopics,\n\t\t\t\t\tabi,\n\t\t\t\t\tjsonInterface: this._jsonInterface,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tsubscriptionManager: this.subscriptionManager as Web3SubscriptionManager<\n\t\t\t\t\t\tunknown,\n\t\t\t\t\t\tany\n\t\t\t\t\t>,\n\t\t\t\t\treturnFormat,\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!isNullish(fromBlock)) {\n\t\t\t\t// emit past events when fromBlock is defined\n\t\t\t\tthis.getPastEvents(abi.name, { fromBlock, topics }, returnFormat)\n\t\t\t\t\t.then(logs => {\n\t\t\t\t\t\tlogs.forEach(log => sub.emit('data', log as EventLog));\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error: Error) => {\n\t\t\t\t\t\tsub.emit(\n\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\tnew SubscriptionError('Failed to get past events.', error),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tthis.subscriptionManager?.addSubscription(sub).catch((error: Error) => {\n\t\t\t\tsub.emit('error', new SubscriptionError('Failed to subscribe.', error));\n\t\t\t});\n\n\t\t\treturn sub;\n\t\t};\n\t}\n\n\tprotected subscribeToContextEvents<T extends Web3Context>(context: T): void {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst contractThis = this;\n\t\tthis.context = context;\n\n\t\tif (contractThis.syncWithContext) {\n\t\t\tcontext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t\tcontractThis.setConfig({ [event.name]: event.newValue });\n\t\t\t});\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}