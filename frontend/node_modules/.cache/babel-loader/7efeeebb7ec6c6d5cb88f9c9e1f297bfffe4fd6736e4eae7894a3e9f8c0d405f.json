{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { parseAbiParameter } from 'abitype';\nimport { AbiError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSimplifiedStructFormat, mapStructNameAndType, mapStructToCoderFormat } from '../utils.js';\nexport const WORD_SIZE = 32;\nexport function alloc(size = 0) {\n  var _a;\n  if (((_a = globalThis.Buffer) === null || _a === void 0 ? void 0 : _a.alloc) !== undefined) {\n    const buf = globalThis.Buffer.alloc(size);\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0) {\n  var _a;\n  if (((_a = globalThis.Buffer) === null || _a === void 0 ? void 0 : _a.allocUnsafe) !== undefined) {\n    const buf = globalThis.Buffer.allocUnsafe(size);\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return new Uint8Array(size);\n}\nexport function convertExternalAbiParameter(abiParam) {\n  var _a, _b;\n  return Object.assign(Object.assign({}, abiParam), {\n    name: (_a = abiParam.name) !== null && _a !== void 0 ? _a : '',\n    components: (_b = abiParam.components) === null || _b === void 0 ? void 0 : _b.map(c => convertExternalAbiParameter(c))\n  });\n}\nexport function isAbiParameter(param) {\n  return !isNullish(param) && typeof param === 'object' && !isNullish(param.type) && typeof param.type === 'string';\n}\nexport function toAbiParams(abi) {\n  return abi.map(input => {\n    var _a;\n    if (isAbiParameter(input)) {\n      return input;\n    }\n    if (typeof input === 'string') {\n      return convertExternalAbiParameter(parseAbiParameter(input.replace(/tuple/, '')));\n    }\n    if (isSimplifiedStructFormat(input)) {\n      const structName = Object.keys(input)[0];\n      const structInfo = mapStructNameAndType(structName);\n      structInfo.name = (_a = structInfo.name) !== null && _a !== void 0 ? _a : '';\n      return Object.assign(Object.assign({}, structInfo), {\n        components: mapStructToCoderFormat(input[structName])\n      });\n    }\n    throw new AbiError('Invalid abi');\n  });\n}\nexport function extractArrayType(param) {\n  const arrayParenthesisStart = param.type.lastIndexOf('[');\n  const arrayParamType = param.type.substring(0, arrayParenthesisStart);\n  const sizeString = param.type.substring(arrayParenthesisStart);\n  let size = -1;\n  if (sizeString !== '[]') {\n    size = Number(sizeString.slice(1, -1));\n    // eslint-disable-next-line no-restricted-globals\n    if (isNaN(size)) {\n      throw new AbiError('Invalid fixed array size', {\n        size: sizeString\n      });\n    }\n  }\n  return {\n    param: {\n      type: arrayParamType,\n      name: '',\n      components: param.components\n    },\n    size\n  };\n}\n/**\n * Param is dynamic if it's dynamic base type or if some of his children (components, array items)\n * is of dynamic type\n * @param param\n */\nexport function isDynamic(param) {\n  var _a, _b;\n  if (param.type === 'string' || param.type === 'bytes' || param.type.endsWith('[]')) return true;\n  if (param.type === 'tuple') {\n    return (_b = (_a = param.components) === null || _a === void 0 ? void 0 : _a.some(isDynamic)) !== null && _b !== void 0 ? _b : false;\n  }\n  if (param.type.endsWith(']')) {\n    return isDynamic(extractArrayType(param).param);\n  }\n  return false;\n}","map":{"version":3,"names":["parseAbiParameter","AbiError","isNullish","isSimplifiedStructFormat","mapStructNameAndType","mapStructToCoderFormat","WORD_SIZE","alloc","size","_a","globalThis","Buffer","undefined","buf","Uint8Array","buffer","byteOffset","byteLength","allocUnsafe","convertExternalAbiParameter","abiParam","Object","assign","name","components","_b","map","c","isAbiParameter","param","type","toAbiParams","abi","input","replace","structName","keys","structInfo","extractArrayType","arrayParenthesisStart","lastIndexOf","arrayParamType","substring","sizeString","Number","slice","isNaN","isDynamic","endsWith","some"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth-abi\\src\\coders\\utils.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { AbiParameter as ExternalAbiParameter, parseAbiParameter } from 'abitype';\nimport { AbiError } from 'web3-errors';\nimport { AbiInput, AbiParameter, AbiStruct } from 'web3-types';\nimport { isNullish } from 'web3-utils';\nimport {\n\tisSimplifiedStructFormat,\n\tmapStructNameAndType,\n\tmapStructToCoderFormat,\n} from '../utils.js';\n\nexport const WORD_SIZE = 32;\n\nexport function alloc(size = 0): Uint8Array {\n\tif (globalThis.Buffer?.alloc !== undefined) {\n\t\tconst buf = globalThis.Buffer.alloc(size);\n\t\treturn new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n\t}\n\n\treturn new Uint8Array(size);\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0): Uint8Array {\n\tif (globalThis.Buffer?.allocUnsafe !== undefined) {\n\t\tconst buf = globalThis.Buffer.allocUnsafe(size);\n\t\treturn new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n\t}\n\n\treturn new Uint8Array(size);\n}\n\nexport function convertExternalAbiParameter(abiParam: ExternalAbiParameter): AbiParameter {\n\treturn {\n\t\t...abiParam,\n\t\tname: abiParam.name ?? '',\n\t\tcomponents: (abiParam as { components: readonly AbiParameter[] }).components?.map(c =>\n\t\t\tconvertExternalAbiParameter(c),\n\t\t),\n\t};\n}\n\nexport function isAbiParameter(param: unknown): param is AbiParameter {\n\treturn (\n\t\t!isNullish(param) &&\n\t\ttypeof param === 'object' &&\n\t\t!isNullish((param as { type: unknown }).type) &&\n\t\ttypeof (param as { type: unknown }).type === 'string'\n\t);\n}\n\nexport function toAbiParams(abi: ReadonlyArray<AbiInput>): ReadonlyArray<AbiParameter> {\n\treturn abi.map(input => {\n\t\tif (isAbiParameter(input)) {\n\t\t\treturn input;\n\t\t}\n\t\tif (typeof input === 'string') {\n\t\t\treturn convertExternalAbiParameter(parseAbiParameter(input.replace(/tuple/, '')));\n\t\t}\n\n\t\tif (isSimplifiedStructFormat(input)) {\n\t\t\tconst structName = Object.keys(input)[0];\n\t\t\tconst structInfo = mapStructNameAndType(structName);\n\t\t\tstructInfo.name = structInfo.name ?? '';\n\t\t\treturn {\n\t\t\t\t...structInfo,\n\t\t\t\tcomponents: mapStructToCoderFormat(\n\t\t\t\t\tinput[structName as keyof typeof input] as unknown as AbiStruct,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t\tthrow new AbiError('Invalid abi');\n\t});\n}\n\nexport function extractArrayType(param: AbiParameter): { size: number; param: AbiParameter } {\n\tconst arrayParenthesisStart = param.type.lastIndexOf('[');\n\tconst arrayParamType = param.type.substring(0, arrayParenthesisStart);\n\tconst sizeString = param.type.substring(arrayParenthesisStart);\n\tlet size = -1;\n\tif (sizeString !== '[]') {\n\t\tsize = Number(sizeString.slice(1, -1));\n\t\t// eslint-disable-next-line no-restricted-globals\n\t\tif (isNaN(size)) {\n\t\t\tthrow new AbiError('Invalid fixed array size', { size: sizeString });\n\t\t}\n\t}\n\treturn {\n\t\tparam: { type: arrayParamType, name: '', components: param.components },\n\t\tsize,\n\t};\n}\n\n/**\n * Param is dynamic if it's dynamic base type or if some of his children (components, array items)\n * is of dynamic type\n * @param param\n */\nexport function isDynamic(param: AbiParameter): boolean {\n\tif (param.type === 'string' || param.type === 'bytes' || param.type.endsWith('[]')) return true;\n\tif (param.type === 'tuple') {\n\t\treturn param.components?.some(isDynamic) ?? false;\n\t}\n\tif (param.type.endsWith(']')) {\n\t\treturn isDynamic(extractArrayType(param).param);\n\t}\n\treturn false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}