{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { bytesToHex, bytesToUint8Array } from 'web3-utils';\nimport { isBytes } from 'web3-validator';\nimport { alloc, WORD_SIZE } from '../utils.js';\nimport { decodeNumber, encodeNumber } from './number.js';\nconst MAX_STATIC_BYTES_COUNT = 32;\nexport function encodeBytes(param, input) {\n  // hack for odd length hex strings\n  if (typeof input === 'string' && input.length % 2 !== 0) {\n    // eslint-disable-next-line no-param-reassign\n    input += '0';\n  }\n  if (!isBytes(input)) {\n    throw new AbiError('provided input is not valid bytes value', {\n      type: param.type,\n      value: input,\n      name: param.name\n    });\n  }\n  const bytes = bytesToUint8Array(input);\n  const [, size] = param.type.split('bytes');\n  // fixed size\n  if (size) {\n    if (Number(size) > MAX_STATIC_BYTES_COUNT || Number(size) < 1) {\n      throw new AbiError('invalid bytes type. Static byte type can have between 1 and 32 bytes', {\n        type: param.type\n      });\n    }\n    if (Number(size) < bytes.length) {\n      throw new AbiError('provided input size is different than type size', {\n        type: param.type,\n        value: input,\n        name: param.name\n      });\n    }\n    const encoded = alloc(WORD_SIZE);\n    encoded.set(bytes);\n    return {\n      dynamic: false,\n      encoded\n    };\n  }\n  const partsLength = Math.ceil(bytes.length / WORD_SIZE);\n  // one word for length of data + WORD for each part of actual data\n  const encoded = alloc(WORD_SIZE + partsLength * WORD_SIZE);\n  encoded.set(encodeNumber({\n    type: 'uint32',\n    name: ''\n  }, bytes.length).encoded);\n  encoded.set(bytes, WORD_SIZE);\n  return {\n    dynamic: true,\n    encoded\n  };\n}\nexport function decodeBytes(param, bytes) {\n  const [, sizeString] = param.type.split('bytes');\n  let size = Number(sizeString);\n  let remainingBytes = bytes;\n  let partsCount = 1;\n  let consumed = 0;\n  if (!size) {\n    // dynamic bytes\n    const result = decodeNumber({\n      type: 'uint32',\n      name: ''\n    }, remainingBytes);\n    size = Number(result.result);\n    consumed += result.consumed;\n    remainingBytes = result.encoded;\n    partsCount = Math.ceil(size / WORD_SIZE);\n  }\n  if (size > bytes.length) {\n    throw new AbiError('there is not enough data to decode', {\n      type: param.type,\n      encoded: bytes,\n      size\n    });\n  }\n  return {\n    result: bytesToHex(remainingBytes.subarray(0, size)),\n    encoded: remainingBytes.subarray(partsCount * WORD_SIZE),\n    consumed: consumed + partsCount * WORD_SIZE\n  };\n}","map":{"version":3,"names":["AbiError","bytesToHex","bytesToUint8Array","isBytes","alloc","WORD_SIZE","decodeNumber","encodeNumber","MAX_STATIC_BYTES_COUNT","encodeBytes","param","input","length","type","value","name","bytes","size","split","Number","encoded","set","dynamic","partsLength","Math","ceil","decodeBytes","sizeString","remainingBytes","partsCount","consumed","result","subarray"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth-abi\\src\\coders\\base\\bytes.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { AbiParameter, Bytes } from 'web3-types';\nimport { bytesToHex, bytesToUint8Array } from 'web3-utils';\nimport { isBytes, ValidInputTypes } from 'web3-validator';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { alloc, WORD_SIZE } from '../utils.js';\nimport { decodeNumber, encodeNumber } from './number.js';\n\nconst MAX_STATIC_BYTES_COUNT = 32;\n\nexport function encodeBytes(param: AbiParameter, input: unknown): EncoderResult {\n\t// hack for odd length hex strings\n\tif (typeof input === 'string' && input.length % 2 !== 0) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tinput += '0';\n\t}\n\tif (!isBytes(input as ValidInputTypes)) {\n\t\tthrow new AbiError('provided input is not valid bytes value', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t});\n\t}\n\tconst bytes = bytesToUint8Array(input as Bytes);\n\tconst [, size] = param.type.split('bytes');\n\t// fixed size\n\tif (size) {\n\t\tif (Number(size) > MAX_STATIC_BYTES_COUNT || Number(size) < 1) {\n\t\t\tthrow new AbiError(\n\t\t\t\t'invalid bytes type. Static byte type can have between 1 and 32 bytes',\n\t\t\t\t{\n\t\t\t\t\ttype: param.type,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\tif (Number(size) < bytes.length) {\n\t\t\tthrow new AbiError('provided input size is different than type size', {\n\t\t\t\ttype: param.type,\n\t\t\t\tvalue: input,\n\t\t\t\tname: param.name,\n\t\t\t});\n\t\t}\n\t\tconst encoded = alloc(WORD_SIZE);\n\t\tencoded.set(bytes);\n\t\treturn {\n\t\t\tdynamic: false,\n\t\t\tencoded,\n\t\t};\n\t}\n\n\tconst partsLength = Math.ceil(bytes.length / WORD_SIZE);\n\t// one word for length of data + WORD for each part of actual data\n\tconst encoded = alloc(WORD_SIZE + partsLength * WORD_SIZE);\n\n\tencoded.set(encodeNumber({ type: 'uint32', name: '' }, bytes.length).encoded);\n\tencoded.set(bytes, WORD_SIZE);\n\treturn {\n\t\tdynamic: true,\n\t\tencoded,\n\t};\n}\n\nexport function decodeBytes(param: AbiParameter, bytes: Uint8Array): DecoderResult<string> {\n\tconst [, sizeString] = param.type.split('bytes');\n\tlet size = Number(sizeString);\n\tlet remainingBytes = bytes;\n\tlet partsCount = 1;\n\tlet consumed = 0;\n\tif (!size) {\n\t\t// dynamic bytes\n\t\tconst result = decodeNumber({ type: 'uint32', name: '' }, remainingBytes);\n\t\tsize = Number(result.result);\n\t\tconsumed += result.consumed;\n\t\tremainingBytes = result.encoded;\n\t\tpartsCount = Math.ceil(size / WORD_SIZE);\n\t}\n\tif (size > bytes.length) {\n\t\tthrow new AbiError('there is not enough data to decode', {\n\t\t\ttype: param.type,\n\t\t\tencoded: bytes,\n\t\t\tsize,\n\t\t});\n\t}\n\n\treturn {\n\t\tresult: bytesToHex(remainingBytes.subarray(0, size)),\n\t\tencoded: remainingBytes.subarray(partsCount * WORD_SIZE),\n\t\tconsumed: consumed + partsCount * WORD_SIZE,\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}