{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3Context } from 'web3-core';\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport * as rpcMethodsWrappers from './rpc_method_wrappers.js';\nexport class Net extends Web3Context {\n  /**\n   * Gets the current network ID\n   *\n   * @param returnFormat - Return format\n   * @returns A Promise of the network ID.\n   * @example\n   * ```ts\n   * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');\n   * await net.getId();\n   * > 1\n   * ```\n   */\n  getId(returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getId(this, returnFormat);\n    });\n  }\n  /**\n   * Get the number of peers connected to.\n   *\n   * @param returnFormat - Return format\n   * @returns A promise of the number of the peers connected to.\n   * @example\n   * ```ts\n   * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');\n   * await net.getPeerCount();\n   * > 0\n   * ```\n   */\n  getPeerCount(returnFormat = DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getPeerCount(this, returnFormat);\n    });\n  }\n  /**\n   * Check if the node is listening for peers\n   *\n   * @returns A promise of a boolean if the node is listening to peers\n   * @example\n   * ```ts\n   * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');\n   * await net.isListening();\n   * > true\n   * ```\n   */\n  isListening() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.isListening(this);\n    });\n  }\n}","map":{"version":3,"names":["Web3Context","DEFAULT_RETURN_FORMAT","rpcMethodsWrappers","Net","getId","returnFormat","getPeerCount","isListening"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-net\\src\\net.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3Context } from 'web3-core';\nimport { DataFormat, DEFAULT_RETURN_FORMAT, Web3NetAPI } from 'web3-types';\n\nimport * as rpcMethodsWrappers from './rpc_method_wrappers.js';\n\nexport class Net extends Web3Context<Web3NetAPI> {\n\t/**\n\t * Gets the current network ID\n\t *\n\t * @param returnFormat - Return format\n\t * @returns A Promise of the network ID.\n\t * @example\n\t * ```ts\n\t * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');\n\t * await net.getId();\n\t * > 1\n\t * ```\n\t */\n\tpublic async getId<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getId(this, returnFormat);\n\t}\n\n\t/**\n\t * Get the number of peers connected to.\n\t *\n\t * @param returnFormat - Return format\n\t * @returns A promise of the number of the peers connected to.\n\t * @example\n\t * ```ts\n\t * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');\n\t * await net.getPeerCount();\n\t * > 0\n\t * ```\n\t */\n\tpublic async getPeerCount<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getPeerCount(this, returnFormat);\n\t}\n\n\t/**\n\t * Check if the node is listening for peers\n\t *\n\t * @returns A promise of a boolean if the node is listening to peers\n\t * @example\n\t * ```ts\n\t * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');\n\t * await net.isListening();\n\t * > true\n\t * ```\n\t */\n\tpublic async isListening() {\n\t\treturn rpcMethodsWrappers.isListening(this);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,WAAW,QAAQ,WAAW;AACvC,SAAqBC,qBAAqB,QAAoB,YAAY;AAE1E,OAAO,KAAKC,kBAAkB,MAAM,0BAA0B;AAE9D,OAAM,MAAOC,GAAI,SAAQH,WAAuB;EAC/C;;;;;;;;;;;;EAYaI,KAAKA,CACjBC,YAAA,GAA6BJ,qBAAqC;;MAElE,OAAOC,kBAAkB,CAACE,KAAK,CAAC,IAAI,EAAEC,YAAY,CAAC;IACpD,CAAC;;EAED;;;;;;;;;;;;EAYaC,YAAYA,CACxBD,YAAA,GAA6BJ,qBAAqC;;MAElE,OAAOC,kBAAkB,CAACI,YAAY,CAAC,IAAI,EAAED,YAAY,CAAC;IAC3D,CAAC;;EAED;;;;;;;;;;;EAWaE,WAAWA,CAAA;;MACvB,OAAOL,kBAAkB,CAACK,WAAW,CAAC,IAAI,CAAC;IAC5C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}