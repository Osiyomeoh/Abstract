{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth-contract\\src\\types.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContextInitOptions, Web3PromiEvent } from 'web3-core';\nimport {\n\tAccessListResult,\n\tBlockNumberOrTag,\n\tEthExecutionAPI,\n\tHexString,\n\tNumbers,\n\tTransactionReceipt,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tFormatType,\n} from 'web3-types';\nimport { NewHeadsSubscription, SendTransactionEvents } from 'web3-eth';\nimport { LogsSubscription } from './log_subscription.js';\n\nexport type NonPayableTxOptions = NonPayableCallOptions;\nexport type PayableTxOptions = PayableCallOptions;\nexport { ContractAbiWithSignature, EventLog, ContractOptions } from 'web3-types';\n\nexport interface ContractEventOptions {\n\t/**\n\t * Let you filter events by indexed parameters, e.g. `{filter: {myNumber: [12,13]}}` means all events where `myNumber` is `12` or `13`.\n\t */\n\tfilter?: Record<string, unknown>;\n\t/**\n\t * The block number (greater than or equal to) from which to get events on. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized` can also be used. For specific range use {@link Contract.getPastEvents}.\n\t */\n\tfromBlock?: BlockNumberOrTag;\n\t/**\n\t * This allows to manually set the topics for the event filter. If given the filter property and event signature, (topic[0]) will not be set automatically. Each topic can also be a nested array of topics that behaves as `or` operation between the given nested topics.\n\t */\n\ttopics?: string[];\n}\n\nexport interface NonPayableMethodObject<Inputs = unknown[], Outputs = unknown[]> {\n\targuments: Inputs;\n\t/**\n\t * This will call a method and execute its smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n\t *\n\t * ```ts\n\t * // using the promise\n\t * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // MULTI-ARGUMENT RETURN:\n\t * // Solidity\n\t * contract MyContract {\n\t *   function myFunction() returns(uint256 myNumber, string myString) {\n\t *       return (23456, \"Hello!%\");\n\t *   }\n\t * }\n\t *\n\t * // web3.js\n\t * var MyContract = new web3.eth.Contract(abi, address);\n\t * const result = MyContract.methods.myFunction().call()\n\t * console.log(result)\n\t * > Result {\n\t *   myNumber: '23456',\n\t *   myString: 'Hello!%',\n\t *   0: '23456', // these are here as fallbacks if the name is not know or given\n\t *   1: 'Hello!%'\n\t * }\n\t *\n\t *\n\t * // SINGLE-ARGUMENT RETURN:\n\t * // Solidity\n\t * contract MyContract {\n\t *   function myFunction() returns(string myString) {\n\t *       return \"Hello!%\";\n\t *   }\n\t * }\n\t *\n\t * // web3.js\n\t * const MyContract = new web3.eth.Contract(abi, address);\n\t * const result = await MyContract.methods.myFunction().call();\n\t * console.log(result);\n\t * > \"Hello!%\"\n\t * ```\n\t *\n\t * @param tx - The options used for calling.\n\t * @param block - If you pass this parameter it will not use the default block set with contract.defaultBlock. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized can also be used. Useful for requesting data from or replaying transactions in past blocks.\n\t * @returns - The return value(s) of the smart contract method. If it returns a single value, it’s returned as is. If it has multiple return values they are returned as an object with properties and indices.\n\t */\n\n\tcall<SpecialOutput = Outputs>(\n\t\ttx?: NonPayableCallOptions,\n\t\tblock?: BlockNumberOrTag,\n\t): Promise<SpecialOutput>;\n\n\t/**\n\t * This will send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n\t *\n\t * ```ts\n\t * await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t *\n\t * // using the event emitter\n\t * const sendObj = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n\t * sendObj.on('transactionHash', function(hash){\n\t *   ...\n\t * });\n\t *\n\t * sendObj.on('confirmation', function(confirmationNumber, receipt){\n\t *   ...\n\t * });\n\t *\n\t * sendObj.on('receipt', function(receipt){\n\t *   // receipt example\n\t *   console.log(receipt);\n\t *   > {\n\t *       \"transactionHash\": \"0x9fc76417374aa880d4449a1f7f31ec597f00b1f6f3dd2d66f4c9c6c445836d8b\",\n\t *       \"transactionIndex\": 0,\n\t *       \"blockHash\": \"0xef95f2f1ed3ca60b048b4bf67cde2195961e0bba6f70bcbea9a2c4e133e34b46\",\n\t *       \"blockNumber\": 3,\n\t *       \"contractAddress\": \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *       \"cumulativeGasUsed\": 314159,\n\t *       \"gasUsed\": 30234,\n\t *       \"events\": {\n\t *           \"MyEvent\": {\n\t *               returnValues: {\n\t *                   myIndexedParam: 20,\n\t *                   myOtherIndexedParam: '0x123456789...',\n\t *                   myNonIndexParam: 'My String'\n\t *               },\n\t *               raw: {\n\t *                   data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *                   topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *               },\n\t *               event: 'MyEvent',\n\t *               signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *               logIndex: 0,\n\t *               transactionIndex: 0,\n\t *               transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *               blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *               blockNumber: 1234,\n\t *               address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *           },\n\t *           \"MyOtherEvent\": {\n\t *               ...\n\t *           },\n\t *           \"MyMultipleEvent\":[{...}, {...}] // If there are multiple of the same event, they will be in an array\n\t *       }\n\t *   }\n\t * });\n\t *\n\t * sendObj.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n\t *   ...\n\t * });\n\t * ```\n\t *\n\t * @param tx - The options used for sending.\n\t * @returns - Returns a {@link PromiEvent} resolved with transaction receipt.\n\t */\n\tsend(\n\t\ttx?: NonPayableTxOptions,\n\t): Web3PromiEvent<\n\t\tFormatType<TransactionReceipt, typeof DEFAULT_RETURN_FORMAT>,\n\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t>;\n\n\t/**\n\t * Returns the amount of gas consumed by executing the method locally without creating a new transaction on the blockchain.\n\t * The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be\n\t * different when sending the transaction later, as the state of the smart contract can be different at that time.\n\t *\n\t * ```ts\n\t * const gasAmount = await myContract.methods.myMethod(123).estimateGas({gas: 5000000});\n\t * if(gasAmount == 5000000) {\n\t *   console.log('Method ran out of gas');\n\t * }\n\t * ```\n\t *\n\t * @param options  - The options used for calling\n\t * @param returnFormat - The data format you want the output in.\n\t * @returns - The gas amount estimated.\n\t */\n\testimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\toptions?: NonPayableCallOptions,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<FormatType<Numbers, ReturnFormat>>;\n\n\t/**\n\t * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format.\n\t * This can be used to send a transaction, call a method, or pass it into another smart contract’s method as arguments.\n\t * Set the data field on `web3.eth.sendTransaction` options as the encodeABI() result and it is the same as calling the contract method with `contract.myMethod.send()`.\n\t *\n\t * Some use cases for encodeABI() include: preparing a smart contract transaction for a multi signature wallet,\n\t * working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n\t *\n\t * @returns - The encoded ABI byte code to send via a transaction or call.\n\t */\n\tencodeABI(): string;\n\n\t/**\n\t * This method generates an access list for a transaction. You must specify a `from` address and `gas` if it’s not specified in options.\n\t *\n\t * @param options - The options used for createAccessList.\n\t * @param block - If you pass this parameter it will not use the default block set with contract.defaultBlock. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized can also be used. Useful for requesting data from or replaying transactions in past blocks.\n\t * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n\t *\n\t * ```ts\n\t *  const result = await MyContract.methods.myFunction().createAccessList();\n\t *  console.log(result);\n\t *\n\t * > {\n\t *  \"accessList\": [\n\t *     {\n\t *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n\t *       \"storageKeys\": [\n\t *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t *       ]\n\t *     }\n\t *   ],\n\t *   \"gasUsed\": \"0x7671\"\n\t * }\n\t * ```\n\t */\n\tcreateAccessList(\n\t\ttx?: NonPayableCallOptions,\n\t\tblock?: BlockNumberOrTag,\n\t): Promise<AccessListResult>;\n}\n\nexport interface PayableMethodObject<Inputs = unknown[], Outputs = unknown[]> {\n\targuments: Inputs;\n\t/**\n\t * Will call a method and execute its smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n\t *\n\t * ```ts\n\t * // using the promise\n\t * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // MULTI-ARGUMENT RETURN:\n\t * // Solidity\n\t * contract MyContract {\n\t *   function myFunction() returns(uint256 myNumber, string myString) {\n\t *       return (23456, \"Hello!%\");\n\t *   }\n\t * }\n\t *\n\t * // web3.js\n\t * var MyContract = new web3.eth.Contract(abi, address);\n\t * const result = MyContract.methods.myFunction().call()\n\t * console.log(result)\n\t * > Result {\n\t *   myNumber: '23456',\n\t *   myString: 'Hello!%',\n\t *   0: '23456', // these are here as fallbacks if the name is not know or given\n\t *   1: 'Hello!%'\n\t * }\n\t *\n\t *\n\t * // SINGLE-ARGUMENT RETURN:\n\t * // Solidity\n\t * contract MyContract {\n\t *   function myFunction() returns(string myString) {\n\t *       return \"Hello!%\";\n\t *   }\n\t * }\n\t *\n\t * // web3.js\n\t * const MyContract = new web3.eth.Contract(abi, address);\n\t * const result = await MyContract.methods.myFunction().call();\n\t * console.log(result);\n\t * > \"Hello!%\"\n\t * ```\n\t *\n\t * @param tx - The options used for calling.\n\t * @param block - If you pass this parameter it will not use the default block set with contract.defaultBlock. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized can also be used. Useful for requesting data from or replaying transactions in past blocks.\n\t * @returns - The return value(s) of the smart contract method. If it returns a single value, it’s returned as is. If it has multiple return values they are returned as an object with properties and indices.\n\t */\n\tcall<SpecialOutput = Outputs>(\n\t\ttx?: PayableCallOptions,\n\t\tblock?: BlockNumberOrTag,\n\t): Promise<SpecialOutput>;\n\n\t/**\n\t * Will send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n\t *\n\t * ```ts\n\t * await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t *\n\t * // using the event emitter\n\t * const sendObj = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n\t * sendObj.on('transactionHash', function(hash){\n\t *   ...\n\t * });\n\t *\n\t * sendObj.on('confirmation', function(confirmationNumber, receipt){\n\t *   ...\n\t * });\n\t *\n\t * sendObj.on('receipt', function(receipt){\n\t *   // receipt example\n\t *   console.log(receipt);\n\t *   > {\n\t *       \"transactionHash\": \"0x9fc76417374aa880d4449a1f7f31ec597f00b1f6f3dd2d66f4c9c6c445836d8b\",\n\t *       \"transactionIndex\": 0,\n\t *       \"blockHash\": \"0xef95f2f1ed3ca60b048b4bf67cde2195961e0bba6f70bcbea9a2c4e133e34b46\",\n\t *       \"blockNumber\": 3,\n\t *       \"contractAddress\": \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *       \"cumulativeGasUsed\": 314159,\n\t *       \"gasUsed\": 30234,\n\t *       \"events\": {\n\t *           \"MyEvent\": {\n\t *               returnValues: {\n\t *                   myIndexedParam: 20,\n\t *                   myOtherIndexedParam: '0x123456789...',\n\t *                   myNonIndexParam: 'My String'\n\t *               },\n\t *               raw: {\n\t *                   data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *                   topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *               },\n\t *               event: 'MyEvent',\n\t *               signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *               logIndex: 0,\n\t *               transactionIndex: 0,\n\t *               transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *               blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *               blockNumber: 1234,\n\t *               address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *           },\n\t *           \"MyOtherEvent\": {\n\t *               ...\n\t *           },\n\t *           \"MyMultipleEvent\":[{...}, {...}] // If there are multiple of the same event, they will be in an array\n\t *       }\n\t *   }\n\t * });\n\t *\n\t * sendObj.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n\t *   ...\n\t * });\n\t * ```\n\t *\n\t * @param tx - The options used for sending.\n\t * @returns - Returns a {@link PromiEvent} object resolved with transaction receipt.\n\t */\n\tsend(\n\t\ttx?: PayableTxOptions,\n\t): Web3PromiEvent<\n\t\tFormatType<TransactionReceipt, typeof DEFAULT_RETURN_FORMAT>,\n\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t>;\n\n\t/**\n\t * Returns the amount of gas consumed by executing the method locally without creating a new transaction on the blockchain.\n\t * The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be\n\t * different when sending the transaction later, as the state of the smart contract can be different at that time.\n\t *\n\t * ```ts\n\t * const gasAmount = await myContract.methods.myMethod(123).estimateGas({gas: 5000000});\n\t * if(gasAmount == 5000000) {\n\t *   console.log('Method ran out of gas');\n\t * }\n\t * ```\n\t *\n\t * @param options  - The options used for calling\n\t * @param returnFormat - The data format you want the output in.\n\t * @returns - The gas amount estimated.\n\t */\n\testimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\toptions?: PayableCallOptions,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<FormatType<Numbers, ReturnFormat>>;\n\n\t/**\n\t * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format.\n\t * This can be used to send a transaction, call a method, or pass it into another smart contract’s method as arguments.\n\t * Set the data field on `web3.eth.sendTransaction` options as the encodeABI() result and it is the same as calling the contract method with `contract.myMethod.send()`.\n\t *\n\t * Some use cases for encodeABI() include: preparing a smart contract transaction for a multi signature wallet,\n\t * working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n\t *\n\t * @returns - The encoded ABI byte code to send via a transaction or call.\n\t */\n\tencodeABI(): HexString;\n\n\t/**\n\t * This method generates an access list for a transaction. You must specify a `from` address and `gas` if it’s not specified in options.\n\t *\n\t * @param options - The options used for createAccessList.\n\t * @param block - If you pass this parameter it will not use the default block set with contract.defaultBlock. Pre-defined block numbers as `earliest`, `latest`, `pending`, `safe` or `finalized can also be used. Useful for requesting data from or replaying transactions in past blocks.\n\t * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n\t *\n\t * ```ts\n\t *  const result = await MyContract.methods.myFunction().createAccessList();\n\t *  console.log(result);\n\t *\n\t * > {\n\t *  \"accessList\": [\n\t *     {\n\t *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n\t *       \"storageKeys\": [\n\t *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t *       ]\n\t *     }\n\t *   ],\n\t *   \"gasUsed\": \"0x7671\"\n\t * }\n\t *```\n\t */\n\tcreateAccessList(tx?: PayableCallOptions, block?: BlockNumberOrTag): Promise<AccessListResult>;\n}\n\nexport type Web3ContractContext = Partial<\n\tWeb3ContextInitOptions<\n\t\tEthExecutionAPI,\n\t\t{\n\t\t\tlogs: typeof LogsSubscription;\n\t\t\tnewHeads: typeof NewHeadsSubscription;\n\t\t\tnewBlockHeaders: typeof NewHeadsSubscription;\n\t\t}\n\t>\n>;\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}