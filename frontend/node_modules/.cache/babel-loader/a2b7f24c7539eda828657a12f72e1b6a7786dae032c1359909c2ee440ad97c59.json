{"ast":null,"code":"import { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\nconst extraTxTypes = new Map();\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n  constructor() {}\n  static typeToInt(txType) {\n    return Number(uint8ArrayToBigInt(toUint8Array(txType)));\n  }\n  static registerTransactionType(type, txClass) {\n    const txType = TransactionFactory.typeToInt(type);\n    extraTxTypes.set(txType, txClass);\n  }\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  static fromTxData(txData, txOptions = {}) {\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return Transaction.fromTxData(txData, txOptions);\n    }\n    const txType = TransactionFactory.typeToInt(txData.type);\n    if (txType === 0) {\n      return Transaction.fromTxData(txData, txOptions);\n    }\n    if (txType === 1) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      return AccessListEIP2930Transaction.fromTxData(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n    if (txType === 2) {\n      return FeeMarketEIP1559Transaction.fromTxData(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n    const ExtraTransaction = extraTxTypes.get(txType);\n    if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromTxData) {\n      return ExtraTransaction.fromTxData(txData, txOptions);\n    }\n    throw new Error(`Tx instantiation with type ${txType} not supported`);\n  }\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Uint8Array\n   * @param txOptions - The transaction options\n   */\n  static fromSerializedData(data, txOptions = {}) {\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      switch (data[0]) {\n        case 1:\n          return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n        case 2:\n          return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n        default:\n          {\n            const ExtraTransaction = extraTxTypes.get(Number(data[0]));\n            if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromSerializedTx) {\n              return ExtraTransaction.fromSerializedTx(data, txOptions);\n            }\n            throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n          }\n      }\n    } else {\n      return Transaction.fromSerializedTx(data, txOptions);\n    }\n  }\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Uint8Array[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Uint8Array or Uint8Array[]\n   * @param txOptions - The transaction options\n   */\n  static fromBlockBodyData(data, txOptions = {}) {\n    if (data instanceof Uint8Array) {\n      return this.fromSerializedData(data, txOptions);\n    }\n    if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return Transaction.fromValuesArray(data, txOptions);\n    }\n    throw new Error('Cannot decode transaction: unknown type input');\n  }\n}","map":{"version":3,"names":["toUint8Array","uint8ArrayToBigInt","FeeMarketEIP1559Transaction","AccessListEIP2930Transaction","Transaction","extraTxTypes","Map","TransactionFactory","constructor","typeToInt","txType","Number","registerTransactionType","type","txClass","set","fromTxData","txData","txOptions","undefined","ExtraTransaction","get","Error","fromSerializedData","data","fromSerializedTx","fromBlockBodyData","Uint8Array","Array","isArray","fromValuesArray"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth-accounts\\src\\tx\\transactionFactory.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Numbers } from 'web3-types';\nimport { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\nimport type { TypedTransaction } from '../types.js';\n\nimport type {\n\tAccessListEIP2930TxData,\n\tFeeMarketEIP1559TxData,\n\tTxData,\n\tTxOptions,\n} from './types.js';\nimport { BaseTransaction } from './baseTransaction.js';\n\nconst extraTxTypes: Map<Numbers, typeof BaseTransaction<unknown>> = new Map();\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class TransactionFactory {\n\t// It is not possible to instantiate a TransactionFactory object.\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n\tprivate constructor() {}\n\n\tpublic static typeToInt(txType: Numbers) {\n\t\treturn Number(uint8ArrayToBigInt(toUint8Array(txType)));\n\t}\n\n\tpublic static registerTransactionType<NewTxTypeClass extends typeof BaseTransaction<unknown>>(\n\t\ttype: Numbers,\n\t\ttxClass: NewTxTypeClass,\n\t) {\n\t\tconst txType = TransactionFactory.typeToInt(type);\n\t\textraTxTypes.set(txType, txClass);\n\t}\n\n\t/**\n\t * Create a transaction from a `txData` object\n\t *\n\t * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n\t * @param txOptions - Options to pass on to the constructor of the transaction\n\t */\n\tpublic static fromTxData(\n\t\ttxData: TxData | TypedTransaction,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (!('type' in txData) || txData.type === undefined) {\n\t\t\t// Assume legacy transaction\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tconst txType = TransactionFactory.typeToInt(txData.type);\n\t\tif (txType === 0) {\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tif (txType === 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\treturn AccessListEIP2930Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<AccessListEIP2930TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tif (txType === 2) {\n\t\t\treturn FeeMarketEIP1559Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<FeeMarketEIP1559TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tconst ExtraTransaction = extraTxTypes.get(txType);\n\t\tif (ExtraTransaction?.fromTxData) {\n\t\t\treturn ExtraTransaction.fromTxData(txData, txOptions) as TypedTransaction;\n\t\t}\n\n\t\tthrow new Error(`Tx instantiation with type ${txType} not supported`);\n\t}\n\n\t/**\n\t * This method tries to decode serialized data.\n\t *\n\t * @param data - The data Uint8Array\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromSerializedData(\n\t\tdata: Uint8Array,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (data[0] <= 0x7f) {\n\t\t\t// Determine the type.\n\t\t\tswitch (data[0]) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tdefault: {\n\t\t\t\t\tconst ExtraTransaction = extraTxTypes.get(Number(data[0]));\n\t\t\t\t\tif (ExtraTransaction?.fromSerializedTx) {\n\t\t\t\t\t\treturn ExtraTransaction.fromSerializedTx(\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\ttxOptions,\n\t\t\t\t\t\t) as TypedTransaction;\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new Error(`TypedTransaction with ID ${data[0]} unknown`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn Transaction.fromSerializedTx(data, txOptions);\n\t\t}\n\t}\n\n\t/**\n\t * When decoding a BlockBody, in the transactions field, a field is either:\n\t * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n\t * A Uint8Array[] (Legacy Transaction)\n\t * This method returns the right transaction.\n\t *\n\t * @param data - A Uint8Array or Uint8Array[]\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromBlockBodyData(data: Uint8Array | Uint8Array[], txOptions: TxOptions = {}) {\n\t\tif (data instanceof Uint8Array) {\n\t\t\treturn this.fromSerializedData(data, txOptions);\n\t\t}\n\t\tif (Array.isArray(data)) {\n\t\t\t// It is a legacy transaction\n\t\t\treturn Transaction.fromValuesArray(data, txOptions);\n\t\t}\n\t\tthrow new Error('Cannot decode transaction: unknown type input');\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}