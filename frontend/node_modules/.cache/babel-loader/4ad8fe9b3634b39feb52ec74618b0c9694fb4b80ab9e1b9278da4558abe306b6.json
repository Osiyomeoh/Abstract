{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\Dapp\\\\Abstract\\\\frontend\\\\src\\\\Components\\\\WalletDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletDisplay = () => {\n  _s();\n  const [address, setAddress] = useState('');\n  const [balance, setBalance] = useState('');\n  const fetchBalance = async () => {\n    try {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      const bal = await web3.eth.getBalance(address);\n      setBalance(web3.utils.fromWei(bal, 'ether'));\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n\n      // Enhanced error message\n      if (error.message.includes('Failed to fetch')) {\n        alert('Failed to connect to the Ethereum network. Check your provider or network connection.');\n      } else {\n        alert('Failed to fetch balance. Check the console for more details.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: address,\n      onChange: e => setAddress(e.target.value),\n      placeholder: \"Enter Ethereum Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchBalance,\n      children: \"Check Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), balance && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Balance: \", balance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(WalletDisplay, \"lNftjlBd3/VTYt0oxKuDb8ogvM0=\");\n_c = WalletDisplay;\nexport default WalletDisplay;\nvar _c;\n$RefreshReg$(_c, \"WalletDisplay\");","map":{"version":3,"names":["React","useState","Web3","jsxDEV","_jsxDEV","WalletDisplay","_s","address","setAddress","balance","setBalance","fetchBalance","web3","givenProvider","bal","eth","getBalance","utils","fromWei","error","console","message","includes","alert","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/Dapp/Abstract/frontend/src/Components/WalletDisplay.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Web3 from 'web3';\r\n\r\nconst WalletDisplay = () => {\r\n    const [address, setAddress] = useState('');\r\n    const [balance, setBalance] = useState('');\r\n\r\n    const fetchBalance = async () => {\r\n        try {\r\n            const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n            const bal = await web3.eth.getBalance(address);\r\n            setBalance(web3.utils.fromWei(bal, 'ether'));\r\n        } catch (error) {\r\n            console.error('Error fetching balance:', error);\r\n    \r\n            // Enhanced error message\r\n            if (error.message.includes('Failed to fetch')) {\r\n                alert('Failed to connect to the Ethereum network. Check your provider or network connection.');\r\n            } else {\r\n                alert('Failed to fetch balance. Check the console for more details.');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input \r\n                type=\"text\" \r\n                value={address} \r\n                onChange={(e) => setAddress(e.target.value)} \r\n                placeholder=\"Enter Ethereum Address\"\r\n            />\r\n            <button onClick={fetchBalance}>Check Balance</button>\r\n            {balance && <p>Balance: {balance} ETH</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WalletDisplay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMC,IAAI,GAAG,IAAIV,IAAI,CAACA,IAAI,CAACW,aAAa,IAAI,uBAAuB,CAAC;MACpE,MAAMC,GAAG,GAAG,MAAMF,IAAI,CAACG,GAAG,CAACC,UAAU,CAACT,OAAO,CAAC;MAC9CG,UAAU,CAACE,IAAI,CAACK,KAAK,CAACC,OAAO,CAACJ,GAAG,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;;MAE/C;MACA,IAAIA,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC3CC,KAAK,CAAC,uFAAuF,CAAC;MAClG,CAAC,MAAM;QACHA,KAAK,CAAC,8DAA8D,CAAC;MACzE;IACJ;EACJ,CAAC;EAED,oBACInB,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MACIqB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEnB,OAAQ;MACfoB,QAAQ,EAAGC,CAAC,IAAKpB,UAAU,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC5CI,WAAW,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,eACF9B,OAAA;MAAQ+B,OAAO,EAAExB,YAAa;MAAAa,QAAA,EAAC;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACpDzB,OAAO,iBAAIL,OAAA;MAAAoB,QAAA,GAAG,WAAS,EAACf,OAAO,EAAC,MAAI;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEd,CAAC;AAAC5B,EAAA,CAjCID,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AAmCnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}