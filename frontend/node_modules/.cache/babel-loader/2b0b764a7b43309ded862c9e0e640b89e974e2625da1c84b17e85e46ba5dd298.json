{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\Dapp\\\\Abstract\\\\frontend\\\\src\\\\Components\\\\depositFunds.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport SmartWalletABI from './abi/SmartWallet.json'; // Importing ABI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst smartWalletAddress = \"0x8dAF17A20c9DBA35f005b6324F493785D239719d\"; // Replace with your contract's address\n\nconst DepositFunds = () => {\n  _s();\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [web3Instance, setWeb3Instance] = useState(null);\n  const [depositAmount, setDepositAmount] = useState('');\n  const [ownerAddress, setOwnerAddress] = useState(''); // State to store the owner's address\n\n  const checkWalletConnection = async () => {\n    try {\n      // Check if there's an Ethereum provider (wallet) available\n      if (window.ethereum) {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const web3 = new Web3(window.ethereum);\n        setWeb3Instance(web3);\n        setIsWalletConnected(true);\n      } else {\n        setIsWalletConnected(false);\n      }\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n      setIsWalletConnected(false);\n    }\n  };\n  const depositFunds = async () => {\n    if (!isWalletConnected) {\n      alert(\"Please connect your wallet first!\");\n      return;\n    }\n    if (!depositAmount || isNaN(depositAmount)) {\n      alert(\"Please enter a valid deposit amount.\");\n      return;\n    }\n    if (!ownerAddress || !web3Instance.utils.isAddress(ownerAddress)) {\n      alert(\"Please enter a valid owner address.\");\n      return;\n    }\n    try {\n      // Convert the deposit amount to wei\n      const depositAmountWei = web3Instance.utils.toWei(depositAmount, 'ether');\n\n      // Connect to your SmartWallet contract\n      const contract = new web3Instance.eth.Contract(SmartWalletABI.abi, smartWalletAddress);\n\n      // Send the deposit transaction with the owner's address\n      await contract.methods.deposit(ownerAddress, depositAmountWei).send({\n        from: ownerAddress,\n        value: depositAmountWei\n      });\n      alert(`Successfully deposited ${depositAmount} Ether.`);\n    } catch (error) {\n      console.error(\"Error depositing funds:\", error);\n      alert(\"Failed to deposit funds. Check the console for more details.\");\n    }\n  };\n\n  // Define the inline CSS for your input and button\n  const inputStyle = {\n    padding: '10px',\n    margin: '10px',\n    fontSize: '16px'\n  };\n  const buttonStyle = {\n    padding: '10px 20px',\n    background: 'blue',\n    color: 'white',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isWalletConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: ownerAddress,\n        onChange: e => setOwnerAddress(e.target.value),\n        placeholder: \"Enter owner's Ethereum address\",\n        style: inputStyle // Apply input style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: depositAmount,\n        onChange: e => setDepositAmount(e.target.value),\n        placeholder: \"Enter deposit amount in Ether\",\n        style: inputStyle // Apply input style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: depositFunds,\n        style: buttonStyle,\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this), !isWalletConnected && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please connect your wallet to deposit funds.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(DepositFunds, \"UIdPSp3w3kB8NpCUClBLDFlWf7U=\");\n_c = DepositFunds;\nexport default DepositFunds;\nvar _c;\n$RefreshReg$(_c, \"DepositFunds\");","map":{"version":3,"names":["React","useState","Web3","SmartWalletABI","jsxDEV","_jsxDEV","smartWalletAddress","DepositFunds","_s","isWalletConnected","setIsWalletConnected","web3Instance","setWeb3Instance","depositAmount","setDepositAmount","ownerAddress","setOwnerAddress","checkWalletConnection","window","ethereum","request","method","web3","error","console","depositFunds","alert","isNaN","utils","isAddress","depositAmountWei","toWei","contract","eth","Contract","abi","methods","deposit","send","from","value","inputStyle","padding","margin","fontSize","buttonStyle","background","color","border","borderRadius","cursor","children","type","onChange","e","target","placeholder","style","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/Dapp/Abstract/frontend/src/Components/depositFunds.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Web3 from 'web3';\r\nimport SmartWalletABI from './abi/SmartWallet.json'; // Importing ABI\r\n\r\nconst smartWalletAddress = \"0x8dAF17A20c9DBA35f005b6324F493785D239719d\"; // Replace with your contract's address\r\n\r\nconst DepositFunds = () => {\r\n    const [isWalletConnected, setIsWalletConnected] = useState(false);\r\n    const [web3Instance, setWeb3Instance] = useState(null);\r\n    const [depositAmount, setDepositAmount] = useState('');\r\n    const [ownerAddress, setOwnerAddress] = useState(''); // State to store the owner's address\r\n\r\n    const checkWalletConnection = async () => {\r\n        try {\r\n            // Check if there's an Ethereum provider (wallet) available\r\n            if (window.ethereum) {\r\n                await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n                const web3 = new Web3(window.ethereum);\r\n                setWeb3Instance(web3);\r\n                setIsWalletConnected(true);\r\n            } else {\r\n                setIsWalletConnected(false);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error connecting to wallet:\", error);\r\n            setIsWalletConnected(false);\r\n        }\r\n    };\r\n\r\n    const depositFunds = async () => {\r\n        if (!isWalletConnected) {\r\n            alert(\"Please connect your wallet first!\");\r\n            return;\r\n        }\r\n\r\n        if (!depositAmount || isNaN(depositAmount)) {\r\n            alert(\"Please enter a valid deposit amount.\");\r\n            return;\r\n        }\r\n\r\n        if (!ownerAddress || !web3Instance.utils.isAddress(ownerAddress)) {\r\n            alert(\"Please enter a valid owner address.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Convert the deposit amount to wei\r\n            const depositAmountWei = web3Instance.utils.toWei(depositAmount, 'ether');\r\n\r\n            // Connect to your SmartWallet contract\r\n            const contract = new web3Instance.eth.Contract(\r\n                SmartWalletABI.abi,\r\n                smartWalletAddress\r\n            );\r\n\r\n            // Send the deposit transaction with the owner's address\r\n            await contract.methods.deposit(ownerAddress, depositAmountWei).send({\r\n                from: ownerAddress,\r\n                value: depositAmountWei,\r\n            });\r\n\r\n            alert(`Successfully deposited ${depositAmount} Ether.`);\r\n        } catch (error) {\r\n            console.error(\"Error depositing funds:\", error);\r\n            alert(\"Failed to deposit funds. Check the console for more details.\");\r\n        }\r\n    };\r\n\r\n    // Define the inline CSS for your input and button\r\n    const inputStyle = {\r\n        padding: '10px',\r\n        margin: '10px',\r\n        fontSize: '16px',\r\n    };\r\n\r\n    const buttonStyle = {\r\n        padding: '10px 20px',\r\n        background: 'blue',\r\n        color: 'white',\r\n        border: 'none',\r\n        borderRadius: '5px',\r\n        cursor: 'pointer',\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isWalletConnected && (\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={ownerAddress}\r\n                        onChange={(e) => setOwnerAddress(e.target.value)}\r\n                        placeholder=\"Enter owner's Ethereum address\"\r\n                        style={inputStyle} // Apply input style\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        value={depositAmount}\r\n                        onChange={(e) => setDepositAmount(e.target.value)}\r\n                        placeholder=\"Enter deposit amount in Ether\"\r\n                        style={inputStyle} // Apply input style\r\n                    />\r\n                    <button onClick={depositFunds} style={buttonStyle}>Deposit</button> {/* Apply button style */}\r\n                </div>\r\n            )}\r\n\r\n            {!isWalletConnected && (\r\n                <p>Please connect your wallet to deposit funds.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DepositFunds;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}