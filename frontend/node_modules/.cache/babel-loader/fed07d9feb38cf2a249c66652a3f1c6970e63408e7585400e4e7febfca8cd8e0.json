{"ast":null,"code":"export var BlockTags;\n(function (BlockTags) {\n  BlockTags[\"EARLIEST\"] = \"earliest\";\n  BlockTags[\"LATEST\"] = \"latest\";\n  BlockTags[\"PENDING\"] = \"pending\";\n  BlockTags[\"SAFE\"] = \"safe\";\n  BlockTags[\"FINALIZED\"] = \"finalized\";\n})(BlockTags || (BlockTags = {}));\n// This list of hardforks is expected to be in order\n// keep this in mind when making changes to it\nexport var HardforksOrdered;\n(function (HardforksOrdered) {\n  HardforksOrdered[\"chainstart\"] = \"chainstart\";\n  HardforksOrdered[\"frontier\"] = \"frontier\";\n  HardforksOrdered[\"homestead\"] = \"homestead\";\n  HardforksOrdered[\"dao\"] = \"dao\";\n  HardforksOrdered[\"tangerineWhistle\"] = \"tangerineWhistle\";\n  HardforksOrdered[\"spuriousDragon\"] = \"spuriousDragon\";\n  HardforksOrdered[\"byzantium\"] = \"byzantium\";\n  HardforksOrdered[\"constantinople\"] = \"constantinople\";\n  HardforksOrdered[\"petersburg\"] = \"petersburg\";\n  HardforksOrdered[\"istanbul\"] = \"istanbul\";\n  HardforksOrdered[\"muirGlacier\"] = \"muirGlacier\";\n  HardforksOrdered[\"berlin\"] = \"berlin\";\n  HardforksOrdered[\"london\"] = \"london\";\n  HardforksOrdered[\"altair\"] = \"altair\";\n  HardforksOrdered[\"arrowGlacier\"] = \"arrowGlacier\";\n  HardforksOrdered[\"grayGlacier\"] = \"grayGlacier\";\n  HardforksOrdered[\"bellatrix\"] = \"bellatrix\";\n  HardforksOrdered[\"merge\"] = \"merge\";\n  HardforksOrdered[\"capella\"] = \"capella\";\n  HardforksOrdered[\"shanghai\"] = \"shanghai\";\n})(HardforksOrdered || (HardforksOrdered = {}));","map":{"version":3,"names":["BlockTags","HardforksOrdered"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-types\\src\\eth_types.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, HexString, Numbers } from './primitives_types.js';\n\nexport type ValueTypes = 'address' | 'bool' | 'string' | 'int256' | 'uint256' | 'bytes' | 'bigint';\n// Hex encoded 32 bytes\nexport type HexString32Bytes = HexString;\n// Hex encoded 16 bytes\nexport type HexString16Bytes = HexString;\n// Hex encoded 8 bytes\nexport type HexString8Bytes = HexString;\n// Hex encoded 1 byte\nexport type HexStringSingleByte = HexString;\n// Hex encoded 1 byte\nexport type HexStringBytes = HexString;\n// Hex encoded 256 byte\nexport type HexString256Bytes = HexString;\n// Hex encoded unsigned integer\nexport type Uint = HexString;\n// Hex encoded unsigned integer 32 bytes\nexport type Uint256 = HexString;\n// Hex encoded address\nexport type Address = HexString;\n\n// https://github.com/ethereum/execution-apis/blob/main/src/schemas/filter.json#L59\nexport type Topic = HexString32Bytes;\n\nexport type TransactionHash = HexString;\nexport type Uncles = HexString32Bytes[];\nexport enum BlockTags {\n\tEARLIEST = 'earliest',\n\tLATEST = 'latest',\n\tPENDING = 'pending',\n\tSAFE = 'safe',\n\tFINALIZED = 'finalized',\n}\nexport type BlockTag = `${BlockTags}`;\n\nexport type BlockNumberOrTag = Numbers | BlockTag;\n\nexport interface Proof {\n\treadonly address: HexString;\n\treadonly nonce: string;\n\treadonly balance: string;\n}\n\nexport interface TransactionInput {\n\treadonly [key: string]: unknown;\n\treadonly to?: HexString; // If its a contract creation tx then no address wil be specified.\n\treadonly from?: HexString;\n\treadonly data?: string;\n\treadonly input?: string;\n\treadonly gas: HexString;\n\treadonly gasLimit?: string;\n\treadonly gasPrice?: string;\n\treadonly maxPriorityFeePerGas?: string;\n\treadonly maxFeePerGas?: string;\n\treadonly nonce: string;\n\treadonly value: string;\n\treadonly blockNumber?: HexString;\n\treadonly transactionIndex?: HexString;\n\treadonly type?: HexString;\n\treadonly chainId?: HexString;\n}\n\nexport type TransactionOutput = {\n\treadonly [key: string]: unknown;\n\treadonly to?: HexString; // If its a contract creation tx then no address wil be specified.\n\treadonly from?: HexString;\n\treadonly input: string;\n\treadonly gas?: Numbers;\n\treadonly gasLimit?: string;\n\treadonly nonce: Numbers;\n\treadonly value: Numbers;\n\treadonly blockNumber?: Numbers;\n\treadonly transactionIndex?: Numbers;\n} & (\n\t| { maxPriorityFeePerGas: Numbers; maxFeePerGas: Numbers; gasPrice?: never }\n\t| { maxPriorityFeePerGas?: never; maxFeePerGas?: never; gasPrice: Numbers }\n);\n\nexport interface LogsInput {\n\treadonly blockHash?: HexString;\n\treadonly transactionHash?: HexString;\n\treadonly logIndex?: HexString;\n\treadonly id?: string;\n\treadonly blockNumber?: HexString;\n\treadonly transactionIndex?: HexString;\n\treadonly address: HexString;\n\treadonly topics: HexString[];\n\treadonly data: HexString;\n}\nexport interface LogsOutput {\n\treadonly id?: string;\n\treadonly removed: boolean;\n\treadonly logIndex?: Numbers;\n\treadonly transactionIndex?: Numbers;\n\treadonly transactionHash?: HexString32Bytes;\n\treadonly blockHash?: HexString32Bytes;\n\treadonly blockNumber?: Numbers;\n\treadonly address: string;\n\treadonly topics: HexString[];\n\treadonly data: HexString;\n}\n\nexport interface BlockInput {\n\treadonly gasLimit: HexString;\n\treadonly gasUsed: HexString;\n\treadonly size: HexString;\n\treadonly timestamp: HexString;\n\treadonly number?: HexString;\n\treadonly difficulty?: HexString;\n\treadonly totalDifficulty?: HexString;\n\treadonly transactions?: TransactionInput[];\n\treadonly miner?: HexString;\n\treadonly baseFeePerGas?: HexString;\n}\n\nexport interface BlockOutput {\n\treadonly gasLimit: bigint | number;\n\treadonly gasUsed: bigint | number;\n\treadonly size: bigint | number;\n\treadonly timestamp: bigint | number;\n\treadonly number?: bigint | number;\n\treadonly difficulty?: bigint | number;\n\treadonly totalDifficulty?: bigint | number;\n\treadonly transactions?: TransactionOutput[];\n\treadonly miner?: HexString;\n\treadonly baseFeePerGas?: bigint | number;\n\treadonly parentHash?: HexString32Bytes;\n}\n\nexport interface Withdrawals {\n\treadonly index: Numbers;\n\treadonly validatorIndex: Numbers;\n\treadonly address: Address;\n\treadonly amount: Numbers;\n}\n\nexport interface BlockHeaderOutput {\n\treadonly hash?: HexString32Bytes;\n\treadonly parentHash?: HexString32Bytes;\n\treadonly receiptsRoot?: HexString32Bytes;\n\treadonly miner?: HexString;\n\treadonly stateRoot?: HexString32Bytes;\n\treadonly transactionsRoot?: HexString32Bytes;\n\treadonly withdrawalsRoot?: HexString32Bytes;\n\treadonly logsBloom?: Bytes;\n\treadonly difficulty?: Numbers;\n\treadonly number?: Numbers;\n\treadonly gasLimit: Numbers;\n\treadonly gasUsed: Numbers;\n\treadonly timestamp: Numbers;\n\treadonly extraData?: Bytes;\n\treadonly nonce?: Numbers;\n\treadonly sha3Uncles: HexString32Bytes[];\n\treadonly baseFeePerGas?: Numbers;\n\n\t// These fields are returned when the RPC client is Nethermind,\n\t// but aren't available in other clients such as Geth\n\treadonly author?: Address;\n\treadonly totalDifficulty?: Numbers;\n\treadonly size?: Numbers;\n\treadonly excessDataGas?: Numbers;\n\treadonly mixHash?: HexString32Bytes;\n\treadonly transactions?: TransactionOutput[];\n\treadonly uncles?: Uncles;\n\treadonly withdrawals?: Withdrawals[];\n}\n\nexport interface ReceiptInput {\n\treadonly [x: string]: unknown;\n\treadonly blockNumber?: HexString;\n\treadonly transactionIndex?: HexString;\n\treadonly cumulativeGasUsed: HexString;\n\treadonly gasUsed: HexString;\n\treadonly logs?: LogsInput[];\n\treadonly contractAddress?: HexString;\n\treadonly status?: string;\n\treadonly effectiveGasPrice?: HexString;\n}\n\nexport interface ReceiptOutput {\n\treadonly blockNumber?: bigint | number;\n\treadonly transactionIndex?: bigint | number;\n\treadonly cumulativeGasUsed: bigint | number;\n\treadonly gasUsed: bigint | number;\n\treadonly logs?: LogsOutput[];\n\treadonly contractAddress?: HexString;\n\treadonly status: boolean;\n\treadonly effectiveGasPrice?: bigint | number;\n}\n\nexport interface PostInput {\n\treadonly ttl?: HexString;\n\treadonly workToProve?: HexString;\n\treadonly priority?: HexString;\n\treadonly expiry?: HexString;\n\treadonly sent?: HexString;\n\treadonly workProved?: HexString;\n\treadonly topics?: HexString[];\n}\n\nexport interface PostOutput {\n\treadonly ttl?: bigint | number;\n\treadonly workToProve?: bigint | number;\n\treadonly priority?: bigint | number;\n\treadonly expiry?: bigint | number;\n\treadonly sent?: bigint | number;\n\treadonly workProved?: bigint | number;\n\treadonly topics?: string[];\n}\n\nexport interface SyncInput {\n\treadonly startingBlock: HexString;\n\treadonly currentBlock: HexString;\n\treadonly highestBlock: HexString;\n\treadonly knownStates?: HexString;\n\treadonly pulledStates?: HexString;\n}\n\nexport interface SyncOutput {\n\treadonly startingBlock: Numbers;\n\treadonly currentBlock: Numbers;\n\treadonly highestBlock: Numbers;\n\treadonly knownStates?: Numbers;\n\treadonly pulledStates?: Numbers;\n}\n\nexport type Receipt = Record<string, unknown>;\n\ntype FilterOption = Record<string, Numbers | Numbers[] | boolean | boolean[]>;\n\n// https://github.com/ethereum/execution-apis/blob/main/src/schemas/filter.json#L28\nexport interface Filter {\n\treadonly fromBlock?: BlockNumberOrTag;\n\treadonly toBlock?: BlockNumberOrTag;\n\treadonly address?: Address | Address[];\n\treadonly blockHash?: Address;\n\t// Using \"null\" type intentionally to match specifications\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\treadonly topics?: (null | Topic | Topic[])[];\n\treadonly filter?: FilterOption;\n}\n\nexport interface AccessListEntry {\n\treadonly address?: Address;\n\treadonly storageKeys?: HexString32Bytes[];\n}\nexport type AccessList = AccessListEntry[];\n\nexport type AccessListResult = {\n\treadonly accessList?: AccessList;\n\treadonly gasUsed?: Numbers;\n};\n\nexport type ValidChains = 'goerli' | 'kovan' | 'mainnet' | 'rinkeby' | 'ropsten' | 'sepolia';\n\n// This list of hardforks is expected to be in order\n// keep this in mind when making changes to it\nexport enum HardforksOrdered {\n\tchainstart = 'chainstart',\n\tfrontier = 'frontier',\n\thomestead = 'homestead',\n\tdao = 'dao',\n\ttangerineWhistle = 'tangerineWhistle',\n\tspuriousDragon = 'spuriousDragon',\n\tbyzantium = 'byzantium',\n\tconstantinople = 'constantinople',\n\tpetersburg = 'petersburg',\n\tistanbul = 'istanbul',\n\tmuirGlacier = 'muirGlacier',\n\tberlin = 'berlin',\n\tlondon = 'london',\n\taltair = 'altair',\n\tarrowGlacier = 'arrowGlacier',\n\tgrayGlacier = 'grayGlacier',\n\tbellatrix = 'bellatrix',\n\tmerge = 'merge',\n\tcapella = 'capella',\n\tshanghai = 'shanghai',\n}\n\nexport type Hardfork = `${HardforksOrdered}`;\n\nexport interface LogBase<NumberType, ByteType> {\n\treadonly removed?: boolean;\n\treadonly logIndex?: NumberType;\n\treadonly transactionIndex?: NumberType;\n\treadonly transactionHash?: ByteType;\n\treadonly blockHash?: ByteType;\n\treadonly blockNumber?: NumberType;\n\treadonly address?: Address;\n\treadonly data?: ByteType;\n\treadonly topics?: ByteType[];\n\treadonly id?: string;\n}\nexport interface Log extends LogBase<Numbers, Bytes> {\n\treadonly id?: string;\n}\n\nexport interface EventLog {\n\treadonly event: string;\n\treadonly id?: string;\n\treadonly logIndex?: bigint | number | string;\n\treadonly transactionIndex?: bigint | number | string;\n\treadonly transactionHash?: HexString32Bytes;\n\treadonly blockHash?: HexString32Bytes;\n\treadonly blockNumber?: bigint | number | string;\n\treadonly address: string;\n\treadonly topics: HexString[];\n\treadonly data: HexString;\n\treadonly raw?: { data: string; topics: unknown[] };\n\treadonly returnValues: Record<string, unknown>;\n\treadonly signature?: HexString;\n}\n\nexport interface TransactionReceiptBase<numberType, hashByteType, logsBloomByteType, logsType> {\n\treadonly transactionHash: hashByteType;\n\treadonly transactionIndex: numberType;\n\treadonly blockHash: hashByteType;\n\treadonly blockNumber: numberType;\n\treadonly from: Address;\n\treadonly to: Address;\n\treadonly cumulativeGasUsed: numberType;\n\treadonly gasUsed: numberType;\n\treadonly effectiveGasPrice?: numberType;\n\treadonly contractAddress?: Address;\n\treadonly logs: logsType[];\n\treadonly logsBloom: logsBloomByteType;\n\treadonly root: hashByteType;\n\treadonly status: numberType;\n\treadonly type?: numberType;\n\tevents?: { [key: string]: EventLog };\n}\n\nexport type TransactionReceipt = TransactionReceiptBase<Numbers, Bytes, Bytes, Log>;\n\nexport interface CustomChain {\n\tname?: string;\n\tnetworkId: Numbers;\n\tchainId: Numbers;\n}\n\nexport interface Common {\n\tcustomChain: CustomChain;\n\tbaseChain?: ValidChains;\n\thardfork?: Hardfork;\n}\n\ninterface TransactionBase {\n\tvalue?: Numbers;\n\taccessList?: AccessList;\n\tcommon?: Common;\n\tgas?: Numbers;\n\tgasPrice?: Numbers;\n\ttype?: Numbers;\n\tmaxFeePerGas?: Numbers;\n\tmaxPriorityFeePerGas?: Numbers;\n\tdata?: Bytes;\n\tinput?: Bytes;\n\tnonce?: Numbers;\n\tchain?: ValidChains;\n\thardfork?: Hardfork;\n\tchainId?: Numbers;\n\tnetworkId?: Numbers;\n\tgasLimit?: Numbers;\n\tyParity?: Uint;\n\tv?: Numbers;\n\tr?: Bytes;\n\ts?: Bytes;\n}\n\nexport interface Transaction extends TransactionBase {\n\tfrom?: Address;\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tto?: Address | null;\n}\n\nexport interface TransactionForAccessList extends Transaction {\n\tfrom: Address;\n}\n\nexport interface TransactionCall extends Transaction {\n\tto: Address;\n}\n\nexport interface TransactionWithFromLocalWalletIndex extends Omit<Transaction, 'from'> {\n\tfrom: Numbers;\n}\n\nexport interface TransactionWithToLocalWalletIndex extends Omit<Transaction, 'to'> {\n\tto: Numbers;\n}\n\nexport interface TransactionWithFromAndToLocalWalletIndex extends Omit<Transaction, 'from' | 'to'> {\n\tfrom: Numbers;\n\tto: Numbers;\n}\n\nexport interface TransactionInfo extends Transaction {\n\treadonly blockHash?: Bytes;\n\treadonly blockNumber?: Numbers;\n\treadonly from: Address;\n\treadonly hash: Bytes;\n\treadonly transactionIndex?: Numbers;\n}\n\nexport interface PopulatedUnsignedBaseTransaction {\n\tfrom: Address;\n\tto?: Address;\n\tvalue: Numbers;\n\tgas?: Numbers;\n\tgasPrice: Numbers;\n\ttype: Numbers;\n\tinput?: Bytes;\n\tdata?: Bytes;\n\tnonce: Numbers;\n\tnetworkId: Numbers;\n\tchain: ValidChains;\n\thardfork: Hardfork;\n\tchainId: Numbers;\n\tcommon: Common;\n\tgasLimit: Numbers;\n}\n\nexport interface PopulatedUnsignedEip2930Transaction extends PopulatedUnsignedBaseTransaction {\n\taccessList: AccessList;\n}\n\nexport interface PopulatedUnsignedEip1559Transaction extends PopulatedUnsignedEip2930Transaction {\n\tgasPrice: never;\n\tmaxFeePerGas: Numbers;\n\tmaxPriorityFeePerGas: Numbers;\n}\nexport type PopulatedUnsignedTransaction =\n\t| PopulatedUnsignedBaseTransaction\n\t| PopulatedUnsignedEip2930Transaction\n\t| PopulatedUnsignedEip1559Transaction;\n\nexport interface BlockBase<\n\tByteType,\n\tHexStringType,\n\tNumberType,\n\textraDataType,\n\tTransactionTypes,\n\tlogsBloomType,\n> {\n\treadonly parentHash: ByteType;\n\treadonly sha3Uncles: ByteType;\n\treadonly miner: HexStringType;\n\treadonly stateRoot: ByteType;\n\treadonly transactionsRoot: ByteType;\n\treadonly receiptsRoot: ByteType;\n\treadonly logsBloom?: logsBloomType;\n\treadonly difficulty?: NumberType;\n\treadonly number: NumberType;\n\treadonly gasLimit: NumberType;\n\treadonly gasUsed: NumberType;\n\treadonly timestamp: NumberType;\n\treadonly extraData: extraDataType;\n\treadonly mixHash: ByteType;\n\treadonly nonce: NumberType;\n\treadonly totalDifficulty: NumberType;\n\treadonly baseFeePerGas?: NumberType;\n\treadonly size: NumberType;\n\treadonly transactions: TransactionTypes;\n\treadonly uncles: Uncles;\n\treadonly hash?: ByteType;\n}\n\nexport type Block = BlockBase<\n\tBytes,\n\tBytes,\n\tNumbers,\n\tBytes,\n\tTransactionHash[] | TransactionInfo[],\n\tBytes\n>;\n\nexport interface FeeHistoryBase<NumberType> {\n\treadonly oldestBlock: NumberType;\n\treadonly baseFeePerGas: NumberType;\n\treadonly reward: NumberType[][];\n\treadonly gasUsedRatio: NumberType[];\n}\n\nexport type FeeHistory = FeeHistoryBase<Numbers>;\n\nexport interface StorageProof {\n\treadonly key: Bytes;\n\treadonly value: Numbers;\n\treadonly proof: Bytes[];\n}\n\nexport interface AccountObject {\n\treadonly balance: Numbers;\n\treadonly codeHash: Bytes;\n\treadonly nonce: Numbers;\n\treadonly storageHash: Bytes;\n\treadonly accountProof: Bytes[];\n\treadonly storageProof: StorageProof[];\n}\n\nexport interface Eip712TypeDetails {\n\tname: string;\n\ttype: string;\n}\nexport interface Eip712TypedData {\n\treadonly types: {\n\t\tEIP712Domain: Eip712TypeDetails[];\n\t\t[key: string]: Eip712TypeDetails[];\n\t};\n\treadonly primaryType: string;\n\treadonly domain: Record<string, string | number>;\n\treadonly message: Record<string, unknown>;\n}\n"],"mappings":"AA2CA,WAAYA,SAMX;AAND,WAAYA,SAAS;EACpBA,SAAA,yBAAqB;EACrBA,SAAA,qBAAiB;EACjBA,SAAA,uBAAmB;EACnBA,SAAA,iBAAa;EACbA,SAAA,2BAAuB;AACxB,CAAC,EANWA,SAAS,KAATA,SAAS;AAqOrB;AACA;AACA,WAAYC,gBAqBX;AArBD,WAAYA,gBAAgB;EAC3BA,gBAAA,6BAAyB;EACzBA,gBAAA,yBAAqB;EACrBA,gBAAA,2BAAuB;EACvBA,gBAAA,eAAW;EACXA,gBAAA,yCAAqC;EACrCA,gBAAA,qCAAiC;EACjCA,gBAAA,2BAAuB;EACvBA,gBAAA,qCAAiC;EACjCA,gBAAA,6BAAyB;EACzBA,gBAAA,yBAAqB;EACrBA,gBAAA,+BAA2B;EAC3BA,gBAAA,qBAAiB;EACjBA,gBAAA,qBAAiB;EACjBA,gBAAA,qBAAiB;EACjBA,gBAAA,iCAA6B;EAC7BA,gBAAA,+BAA2B;EAC3BA,gBAAA,2BAAuB;EACvBA,gBAAA,mBAAe;EACfA,gBAAA,uBAAmB;EACnBA,gBAAA,yBAAqB;AACtB,CAAC,EArBWA,gBAAgB,KAAhBA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}