{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-types\\src\\eth_abi_types.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Address } from './eth_types.js';\nimport { Bytes, Numbers } from './primitives_types.js';\nimport { FixedSizeArray } from './utility_types.js';\n\ntype _SolidityIndexRange =\n\t| 1\n\t| 2\n\t| 3\n\t| 4\n\t| 5\n\t| 6\n\t| 7\n\t| 8\n\t| 9\n\t| 10\n\t| 11\n\t| 12\n\t| 13\n\t| 14\n\t| 15\n\t| 16\n\t| 17\n\t| 18\n\t| 19\n\t| 20\n\t| 21\n\t| 22\n\t| 25\n\t| 26\n\t| 27\n\t| 28\n\t| 29\n\t| 30;\n\nexport type ConvertToNumber<\n\tT extends string,\n\tRange extends number = _SolidityIndexRange,\n> = Range extends unknown ? (`${Range}` extends T ? Range : never) : never;\n\nexport type Components = {\n\tname: string;\n\ttype: string;\n\tindexed?: boolean;\n\tcomponents?: Components[];\n};\n\nexport interface AbiStruct {\n\t[key: string]: unknown;\n\tname: string;\n\ttype: string;\n}\n\nexport interface AbiCoderStruct extends AbiStruct {\n\t[key: string]: unknown;\n\tcomponents?: Array<AbiStruct>;\n}\n\n// https://docs.soliditylang.org/en/latest/abi-spec.html#json\nexport type AbiParameter = {\n\treadonly name: string;\n\treadonly type: string;\n\treadonly baseType?: string;\n\treadonly indexed?: boolean;\n\treadonly components?: ReadonlyArray<AbiParameter>;\n\treadonly arrayLength?: number;\n\treadonly arrayChildren?: ReadonlyArray<AbiParameter>;\n\treadonly internalType?: string;\n};\n\ntype FragmentTypes = 'constructor' | 'event' | 'function' | 'fallback' | 'receive';\n\nexport type AbiBaseFragment = {\n\t// type will default to string if passed ABI is declared without \"as const\"\n\treadonly type: string | FragmentTypes;\n};\n\n// To assign an ABI which is not declared `as const` need to specify a generic string\n\n// https://docs.soliditylang.org/en/latest/abi-spec.html#json\nexport type AbiConstructorFragment = AbiBaseFragment & {\n\treadonly type: string | 'constructor';\n\treadonly stateMutability: string | 'nonpayable' | 'payable';\n\treadonly inputs?: ReadonlyArray<AbiParameter>;\n};\n\n// https://docs.soliditylang.org/en/latest/abi-spec.html#json\nexport type AbiFunctionFragment = AbiBaseFragment & {\n\treadonly name: string;\n\treadonly type: string | 'function';\n\treadonly stateMutability?: string | 'nonpayable' | 'payable' | 'pure' | 'view';\n\treadonly inputs?: ReadonlyArray<AbiParameter>;\n\treadonly outputs?: ReadonlyArray<AbiParameter>;\n\n\treadonly constant?: boolean; // stateMutability == 'pure' or stateMutability == 'view'\n\treadonly payable?: boolean; // stateMutability == 'payable'\n};\n\nexport type AbiFallbackFragment = AbiBaseFragment & {\n\treadonly name: never;\n\treadonly type: string | 'fallback';\n\treadonly stateMutability: string | 'nonpayable' | 'payable' | 'pure' | 'view';\n\treadonly inputs: never;\n\treadonly outputs: never;\n\n\t// legacy properties\n\treadonly constant?: boolean; // stateMutability == 'pure' or stateMutability == 'view'\n\treadonly payable?: boolean; // stateMutability == 'payable'\n};\n\n// https://docs.soliditylang.org/en/latest/abi-spec.html#json\nexport type AbiEventFragment = AbiBaseFragment & {\n\treadonly name: string;\n\treadonly type: string | 'event';\n\treadonly inputs?: ReadonlyArray<AbiParameter>;\n\treadonly anonymous?: boolean;\n};\n\n// https://docs.soliditylang.org/en/latest/abi-spec.html#errors\nexport type AbiErrorFragment = AbiBaseFragment & {\n\treadonly name: string;\n\treadonly type: string | 'error';\n\treadonly inputs?: ReadonlyArray<AbiParameter>;\n};\n\n// https://docs.soliditylang.org/en/latest/abi-spec.html#json\nexport type AbiFragment =\n\t| AbiConstructorFragment\n\t| AbiFunctionFragment\n\t| AbiEventFragment\n\t| AbiErrorFragment\n\t| AbiFallbackFragment;\n\nexport type ContractAbi = ReadonlyArray<AbiFragment>;\n\nexport type AbiInput =\n\t| string\n\t| AbiParameter\n\t| {\n\t\t\tname: string;\n\t\t\ttype: string;\n\t\t\tcomponents?: Components;\n\t\t\tindex?: boolean;\n\t\t\tinternalType?: string;\n\t  }\n\t| { readonly [key: string]: unknown };\n\n// https://docs.soliditylang.org/en/develop/abi-spec.html#json\nexport type JsonFunctionInterface = {\n\ttype: 'function';\n\tname: string;\n\tinputs: Components[];\n\toutputs?: AbiInput[];\n\tstateMutability?: string;\n};\n\nexport type JsonEventInterface = {\n\ttype: 'event';\n\tname: string;\n\tinputs: Components[];\n\tindexed: boolean;\n\tanonymous: boolean;\n};\n\nexport type FilterAbis<Abis extends ContractAbi, Filter, Abi = Abis[number]> = Abi extends Filter\n\t? Abi\n\t: never;\n\ntype _TypedArray<Type, Size extends string> = Size extends ''\n\t? Type[]\n\t: FixedSizeArray<Type, ConvertToNumber<Size>>;\n\nexport type PrimitiveAddressType<Type extends string> = Type extends `address[${infer Size}]`\n\t? _TypedArray<Address, Size>\n\t: Type extends 'address'\n\t? Address\n\t: never;\n\nexport type PrimitiveStringType<Type extends string> = Type extends `string${string}[${infer Size}]`\n\t? _TypedArray<string, Size>\n\t: Type extends 'string' | `string${string}`\n\t? string\n\t: never;\n\nexport type PrimitiveBooleanType<Type extends string> = Type extends `bool[${infer Size}]`\n\t? _TypedArray<boolean, Size>\n\t: Type extends 'bool'\n\t? boolean\n\t: never;\n\nexport type PrimitiveIntegerType<Type extends string> = Type extends\n\t| `uint${string}[${infer Size}]`\n\t| `int${string}[${infer Size}]`\n\t? _TypedArray<Numbers, Size>\n\t: Type extends 'uint' | 'int' | `int${string}` | `uint${string}`\n\t? Numbers\n\t: never;\n\nexport type PrimitiveBytesType<Type extends string> = Type extends `bytes${string}[${infer Size}]`\n\t? _TypedArray<Bytes, Size>\n\t: Type extends 'bytes' | `bytes${string}`\n\t? Bytes\n\t: never;\n\nexport type PrimitiveTupleType<\n\tType extends string,\n\tTypeComponents extends ReadonlyArray<AbiParameter> | undefined | unknown = [],\n> = TypeComponents extends ReadonlyArray<AbiParameter>\n\t? Type extends 'tuple'\n\t\t? {\n\t\t\t\t// eslint-disable-next-line no-use-before-define\n\t\t\t\t[Param in TypeComponents[number] as Param['name']]: MatchPrimitiveType<\n\t\t\t\t\tParam['type'],\n\t\t\t\t\tParam['components']\n\t\t\t\t>;\n\t\t  }\n\t\t: Type extends `tuple[${infer Size}]`\n\t\t? _TypedArray<\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line no-use-before-define\n\t\t\t\t\t[Param in TypeComponents[number] as Param['name']]: MatchPrimitiveType<\n\t\t\t\t\t\tParam['type'],\n\t\t\t\t\t\tParam['components']\n\t\t\t\t\t>;\n\t\t\t\t},\n\t\t\t\tSize\n\t\t  >\n\t\t: never\n\t: never;\n\ntype ObjectToArray<T extends unknown[]> = T extends [...infer R, infer A]\n\t? Record<R['length'], A> & ObjectToArray<R>\n\t: T;\ntype ArrToObjectWithFunctions<T extends unknown[]> = Array<unknown> & ObjectToArray<T>;\n\nexport type MatchPrimitiveType<\n\tType extends string,\n\tTypeComponents extends ReadonlyArray<AbiParameter> | undefined | unknown,\n> =\n\t| PrimitiveAddressType<Type>\n\t| PrimitiveStringType<Type>\n\t| PrimitiveBooleanType<Type>\n\t| PrimitiveIntegerType<Type>\n\t| PrimitiveBytesType<Type>\n\t| PrimitiveTupleType<Type, TypeComponents>\n\t| never;\n\ntype ContractMethodOutputParametersRecursiveArray<\n\tParams extends ReadonlyArray<unknown> | undefined,\n> =\n\t// check if params are empty array\n\tParams extends readonly []\n\t\t? []\n\t\t: Params extends readonly [infer H, ...infer R] // check if Params is an array\n\t\t? H extends AbiParameter\n\t\t\t? [\n\t\t\t\t\tMatchPrimitiveType<H['type'], H['components']>,\n\t\t\t\t\t...ContractMethodOutputParametersRecursiveArray<R>,\n\t\t\t  ]\n\t\t\t: []\n\t\t: [];\n\ntype ContractMethodOutputParametersRecursiveRecord<\n\tParams extends ReadonlyArray<unknown> | undefined,\n> =\n\t// check if params are empty array\n\tParams extends readonly []\n\t\t? []\n\t\t: Params extends readonly [infer H, ...infer R] // check if Params is an array\n\t\t? H extends AbiParameter\n\t\t\t? H['name'] extends '' // check if output param name is empty string\n\t\t\t\t? ContractMethodOutputParametersRecursiveRecord<R>\n\t\t\t\t: Record<H['name'], MatchPrimitiveType<H['type'], H['components']>> & // sets key-value pair of output param name and type\n\t\t\t\t\t\tContractMethodOutputParametersRecursiveRecord<R>\n\t\t\t: ContractMethodOutputParametersRecursiveRecord<R>\n\t\t: Params extends undefined | unknown // param is not array, check if undefined\n\t\t? []\n\t\t: Params;\n\nexport type ContractMethodOutputParameters<Params extends ReadonlyArray<unknown> | undefined> =\n\t// check if params are empty array\n\tParams extends readonly []\n\t\t? void\n\t\t: Params extends readonly [infer H, ...infer R] // check if Params is an array\n\t\t? R extends readonly [] // if only one output in array\n\t\t\t? H extends AbiParameter\n\t\t\t\t? MatchPrimitiveType<H['type'], H['components']>\n\t\t\t\t: []\n\t\t\t: // if more than one output\n\t\t\t  ArrToObjectWithFunctions<[...ContractMethodOutputParametersRecursiveArray<Params>]> &\n\t\t\t\t\tContractMethodOutputParametersRecursiveRecord<Params>\n\t\t: [];\n\nexport type ContractMethodInputParameters<Params extends ReadonlyArray<unknown> | undefined> =\n\tParams extends readonly []\n\t\t? []\n\t\t: Params extends readonly [infer H, ...infer R]\n\t\t? H extends AbiParameter\n\t\t\t? // TODO: Find a way to set name for tuple item\n\t\t\t  [MatchPrimitiveType<H['type'], H['components']>, ...ContractMethodInputParameters<R>]\n\t\t\t: ContractMethodInputParameters<R>\n\t\t: Params extends undefined | unknown\n\t\t? []\n\t\t: Params;\n\nexport type ContractConstructor<Abis extends ContractAbi> = {\n\t[Abi in FilterAbis<Abis, AbiConstructorFragment & { type: 'constructor' }> as 'constructor']: {\n\t\treadonly Abi: Abi;\n\t\treadonly Inputs: ContractMethodInputParameters<Abi['inputs']>;\n\t};\n}['constructor'];\n\nexport type ContractConstructorArgs<Abis extends ContractAbi> = {\n\t[Abi in FilterAbis<\n\t\tAbis,\n\t\tAbiConstructorFragment & { type: 'constructor' }\n\t> as 'constructor']: ContractMethodInputParameters<Abi['inputs']>;\n}['constructor'];\n\nexport type ContractMethod<Abi extends AbiFunctionFragment> = {\n\treadonly Abi: Abi;\n\n\treadonly Inputs: ContractMethodInputParameters<Abi['inputs']>;\n\treadonly Outputs: ContractMethodOutputParameters<Abi['outputs']>;\n};\n\nexport type ContractMethods<Abis extends ContractAbi> = {\n\t[Abi in FilterAbis<\n\t\tAbis,\n\t\tAbiFunctionFragment & { type: 'function' }\n\t> as Abi['name']]: ContractMethod<Abi>;\n};\n\nexport type ContractEvent<Abi extends AbiEventFragment> = {\n\treadonly Abi: Abi;\n\treadonly Inputs: ContractMethodInputParameters<Abi['inputs']>;\n};\n\nexport type ContractEvents<Abis extends ContractAbi> = {\n\t[Abi in FilterAbis<\n\t\tAbis,\n\t\tAbiEventFragment & { type: 'event' }\n\t> as Abi['name']]: ContractEvent<Abi>;\n};\n\nexport interface DecodedParams extends Record<string, unknown> {\n\t__length__: number;\n}\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}