{"ast":null,"code":"import { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\nimport { TransactionMissingReceiptOrBlockHashError, TransactionReceiptMissingBlockNumberError } from 'web3-errors';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { watchTransactionByPolling } from './watch_transaction_by_pooling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\nexport function watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat) {\n  if (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash)) throw new TransactionMissingReceiptOrBlockHashError({\n    receipt: transactionReceipt,\n    blockHash: format({\n      format: 'bytes32'\n    }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),\n    transactionHash: format({\n      format: 'bytes32'\n    }, transactionHash, returnFormat)\n  });\n  if (!transactionReceipt.blockNumber) throw new TransactionReceiptMissingBlockNumberError({\n    receipt: transactionReceipt\n  });\n  // As we have the receipt, it's the first confirmation that tx is accepted.\n  transactionPromiEvent.emit('confirmation', {\n    confirmations: format({\n      format: 'uint'\n    }, 1, returnFormat),\n    receipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n    latestBlockHash: format({\n      format: 'bytes32'\n    }, transactionReceipt.blockHash, returnFormat)\n  });\n  // so a subscription for newBlockHeaders can be made instead of polling\n  const provider = web3Context.requestManager.provider;\n  if (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n    watchTransactionBySubscription({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      returnFormat\n    });\n  } else {\n    watchTransactionByPolling({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      returnFormat\n    });\n  }\n}","map":{"version":3,"names":["format","isNullish","TransactionMissingReceiptOrBlockHashError","TransactionReceiptMissingBlockNumberError","transactionReceiptSchema","watchTransactionByPolling","watchTransactionBySubscription","watchTransactionForConfirmations","web3Context","transactionPromiEvent","transactionReceipt","transactionHash","returnFormat","blockHash","receipt","blockNumber","emit","confirmations","latestBlockHash","provider","requestManager","supportsSubscriptions"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth\\src\\utils\\watch_transaction_for_confirmations.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, Web3BaseProvider, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\n\nimport {\n\tTransactionMissingReceiptOrBlockHashError,\n\tTransactionReceiptMissingBlockNumberError,\n} from 'web3-errors';\nimport { DataFormat } from 'web3-types';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport {\n\twatchTransactionByPolling,\n\tWeb3PromiEventEventTypeBase,\n} from './watch_transaction_by_pooling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\n\nexport function watchTransactionForConfirmations<\n\tReturnFormat extends DataFormat,\n\tWeb3PromiEventEventType extends Web3PromiEventEventTypeBase<ReturnFormat>,\n\tResolveType = TransactionReceipt,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventType>,\n\ttransactionReceipt: TransactionReceipt,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tif (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash))\n\t\tthrow new TransactionMissingReceiptOrBlockHashError({\n\t\t\treceipt: transactionReceipt,\n\t\t\tblockHash: format({ format: 'bytes32' }, transactionReceipt?.blockHash, returnFormat),\n\t\t\ttransactionHash: format({ format: 'bytes32' }, transactionHash, returnFormat),\n\t\t});\n\n\tif (!transactionReceipt.blockNumber)\n\t\tthrow new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });\n\n\t// As we have the receipt, it's the first confirmation that tx is accepted.\n\ttransactionPromiEvent.emit('confirmation', {\n\t\tconfirmations: format({ format: 'uint' }, 1, returnFormat),\n\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\tlatestBlockHash: format({ format: 'bytes32' }, transactionReceipt.blockHash, returnFormat),\n\t});\n\n\t// so a subscription for newBlockHeaders can be made instead of polling\n\tconst provider: Web3BaseProvider = web3Context.requestManager.provider as Web3BaseProvider;\n\tif (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n\t\twatchTransactionBySubscription({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t} else {\n\t\twatchTransactionByPolling({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t}\n}\n"],"mappings":"AAkBA,SAASA,MAAM,QAAQ,YAAY;AACnC,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,SACCC,yCAAyC,EACzCC,yCAAyC,QACnC,aAAa;AAEpB,SAASC,wBAAwB,QAAQ,eAAe;AACxD,SACCC,yBAAyB,QAEnB,mCAAmC;AAC1C,SAASC,8BAA8B,QAAQ,wCAAwC;AAEvF,OAAM,SAAUC,gCAAgCA,CAK/CC,WAAyC,EACzCC,qBAA2E,EAC3EC,kBAAsC,EACtCC,eAAsB,EACtBC,YAA0B;EAE1B,IAAIX,SAAS,CAACS,kBAAkB,CAAC,IAAIT,SAAS,CAACS,kBAAkB,CAACG,SAAS,CAAC,EAC3E,MAAM,IAAIX,yCAAyC,CAAC;IACnDY,OAAO,EAAEJ,kBAAkB;IAC3BG,SAAS,EAAEb,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAS,CAAE,EAAEU,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEG,SAAS,EAAED,YAAY,CAAC;IACrFD,eAAe,EAAEX,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAS,CAAE,EAAEW,eAAe,EAAEC,YAAY;GAC5E,CAAC;EAEH,IAAI,CAACF,kBAAkB,CAACK,WAAW,EAClC,MAAM,IAAIZ,yCAAyC,CAAC;IAAEW,OAAO,EAAEJ;EAAkB,CAAE,CAAC;EAErF;EACAD,qBAAqB,CAACO,IAAI,CAAC,cAAc,EAAE;IAC1CC,aAAa,EAAEjB,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAM,CAAE,EAAE,CAAC,EAAEY,YAAY,CAAC;IAC1DE,OAAO,EAAEd,MAAM,CAACI,wBAAwB,EAAEM,kBAAkB,EAAEE,YAAY,CAAC;IAC3EM,eAAe,EAAElB,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAS,CAAE,EAAEU,kBAAkB,CAACG,SAAS,EAAED,YAAY;GACzF,CAAC;EAEF;EACA,MAAMO,QAAQ,GAAqBX,WAAW,CAACY,cAAc,CAACD,QAA4B;EAC1F,IAAIA,QAAQ,IAAI,uBAAuB,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,qBAAqB,EAAE,EAAE;IACxFf,8BAA8B,CAAC;MAC9BE,WAAW;MACXE,kBAAkB;MAClBD,qBAAqB;MACrBG;KACA,CAAC;GACF,MAAM;IACNP,yBAAyB,CAAC;MACzBG,WAAW;MACXE,kBAAkB;MAClBD,qBAAqB;MACrBG;KACA,CAAC;;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}