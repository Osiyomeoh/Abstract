{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth\\src\\types.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tContractExecutionError,\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n\tInvalidResponseError,\n} from 'web3-errors';\nimport {\n\tFormatType,\n\tETH_DATA_FORMAT,\n\tDataFormat,\n\tBytes,\n\tContractAbi,\n\tHexString,\n\tNumbers,\n\tTransaction,\n\tTransactionReceipt,\n} from 'web3-types';\n\nexport type InternalTransaction = FormatType<Transaction, typeof ETH_DATA_FORMAT>;\n\nexport type SendTransactionEventsBase<ReturnFormat extends DataFormat, TxType> = {\n\tsending: FormatType<TxType, typeof ETH_DATA_FORMAT>;\n\tsent: FormatType<TxType, typeof ETH_DATA_FORMAT>;\n\ttransactionHash: FormatType<Bytes, ReturnFormat>;\n\treceipt: FormatType<TransactionReceipt, ReturnFormat>;\n\tconfirmation: {\n\t\tconfirmations: FormatType<Numbers, ReturnFormat>;\n\t\treceipt: FormatType<TransactionReceipt, ReturnFormat>;\n\t\tlatestBlockHash: FormatType<Bytes, ReturnFormat>;\n\t};\n\terror:\n\t\t| TransactionRevertedWithoutReasonError<FormatType<TransactionReceipt, ReturnFormat>>\n\t\t| TransactionRevertInstructionError<FormatType<TransactionReceipt, ReturnFormat>>\n\t\t| TransactionRevertWithCustomError<FormatType<TransactionReceipt, ReturnFormat>>\n\t\t| InvalidResponseError\n\t\t| ContractExecutionError;\n};\n\nexport type SendTransactionEvents<ReturnFormat extends DataFormat> = SendTransactionEventsBase<\n\tReturnFormat,\n\tTransaction\n>;\nexport type SendSignedTransactionEvents<ReturnFormat extends DataFormat> =\n\tSendTransactionEventsBase<ReturnFormat, Bytes>;\n\nexport interface SendTransactionOptions<ResolveType = TransactionReceipt> {\n\tignoreGasPricing?: boolean;\n\ttransactionResolver?: (receipt: TransactionReceipt) => ResolveType;\n\tcontractAbi?: ContractAbi;\n\tcheckRevertBeforeSending?: boolean;\n\tignoreFillingGasLimit?: boolean;\n}\n\nexport interface SendSignedTransactionOptions<ResolveType = TransactionReceipt> {\n\ttransactionResolver?: (receipt: TransactionReceipt) => ResolveType;\n\tcontractAbi?: ContractAbi;\n\tcheckRevertBeforeSending?: boolean;\n}\n\nexport interface RevertReason {\n\treason: string;\n\tsignature?: HexString;\n\tdata?: HexString;\n}\n\nexport interface RevertReasonWithCustomError extends RevertReason {\n\tcustomErrorName: string;\n\tcustomErrorDecodedSignature: string;\n\tcustomErrorArguments: Record<string, unknown>;\n}\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}