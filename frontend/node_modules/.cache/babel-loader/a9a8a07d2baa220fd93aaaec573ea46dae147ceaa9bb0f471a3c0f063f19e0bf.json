{"ast":null,"code":"import { isAddress } from './validation/address.js';\nimport { isBlockNumber, isBlockNumberOrTag, isBlockTag } from './validation/block.js';\nimport { isBloom } from './validation/bloom.js';\nimport { isBoolean } from './validation/boolean.js';\nimport { isBytes } from './validation/bytes.js';\nimport { isFilterObject } from './validation/filter.js';\nimport { isHexStrict, isString } from './validation/string.js';\nimport { isNumber, isInt, isUInt } from './validation/numbers.js';\nconst formats = {\n  address: data => isAddress(data),\n  bloom: data => isBloom(data),\n  blockNumber: data => isBlockNumber(data),\n  blockTag: data => isBlockTag(data),\n  blockNumberOrTag: data => isBlockNumberOrTag(data),\n  bool: data => isBoolean(data),\n  bytes: data => isBytes(data),\n  filter: data => isFilterObject(data),\n  hex: data => isHexStrict(data),\n  uint: data => isUInt(data),\n  int: data => isInt(data),\n  number: data => isNumber(data),\n  string: data => isString(data)\n};\n// generate formats for all numbers types\nfor (let bitSize = 8; bitSize <= 256; bitSize += 8) {\n  formats[`int${bitSize}`] = data => isInt(data, {\n    bitSize\n  });\n  formats[`uint${bitSize}`] = data => isUInt(data, {\n    bitSize\n  });\n}\n// generate bytes\nfor (let size = 1; size <= 32; size += 1) {\n  formats[`bytes${size}`] = data => isBytes(data, {\n    size\n  });\n}\nformats.bytes256 = formats.bytes;\nexport default formats;","map":{"version":3,"names":["isAddress","isBlockNumber","isBlockNumberOrTag","isBlockTag","isBloom","isBoolean","isBytes","isFilterObject","isHexStrict","isString","isNumber","isInt","isUInt","formats","address","data","bloom","blockNumber","blockTag","blockNumberOrTag","bool","bytes","filter","hex","uint","int","number","string","bitSize","size","bytes256"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-validator\\src\\formats.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Filter } from 'web3-types';\nimport { ValidInputTypes } from './types.js';\nimport { isAddress } from './validation/address.js';\nimport { isBlockNumber, isBlockNumberOrTag, isBlockTag } from './validation/block.js';\nimport { isBloom } from './validation/bloom.js';\nimport { isBoolean } from './validation/boolean.js';\nimport { isBytes } from './validation/bytes.js';\nimport { isFilterObject } from './validation/filter.js';\nimport { isHexStrict, isString } from './validation/string.js';\nimport { isNumber, isInt, isUInt } from './validation/numbers.js';\n\nconst formats: { [key: string]: (data: unknown) => boolean } = {\n\taddress: (data: unknown) => isAddress(data as ValidInputTypes),\n\tbloom: (data: unknown) => isBloom(data as ValidInputTypes),\n\tblockNumber: (data: unknown) => isBlockNumber(data as string | number | bigint),\n\tblockTag: (data: unknown) => isBlockTag(data as string),\n\tblockNumberOrTag: (data: unknown) => isBlockNumberOrTag(data as string | number | bigint),\n\tbool: (data: unknown) => isBoolean(data as ValidInputTypes),\n\tbytes: (data: unknown) => isBytes(data as ValidInputTypes | Uint8Array | number[]),\n\tfilter: (data: unknown) => isFilterObject(data as Filter),\n\thex: (data: unknown) => isHexStrict(data as ValidInputTypes),\n\tuint: (data: unknown) => isUInt(data as ValidInputTypes),\n\tint: (data: unknown) => isInt(data as ValidInputTypes),\n\tnumber: (data: unknown) => isNumber(data as ValidInputTypes),\n\tstring: (data: unknown) => isString(data as ValidInputTypes),\n};\n// generate formats for all numbers types\nfor (let bitSize = 8; bitSize <= 256; bitSize += 8) {\n\tformats[`int${bitSize}`] = data => isInt(data as ValidInputTypes, { bitSize });\n\tformats[`uint${bitSize}`] = data => isUInt(data as ValidInputTypes, { bitSize });\n}\n// generate bytes\nfor (let size = 1; size <= 32; size += 1) {\n\tformats[`bytes${size}`] = data =>\n\t\tisBytes(data as ValidInputTypes | Uint8Array | number[], { size });\n}\nformats.bytes256 = formats.bytes;\n\nexport default formats;\n"],"mappings":"AAkBA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,aAAa,EAAEC,kBAAkB,EAAEC,UAAU,QAAQ,uBAAuB;AACrF,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,WAAW,EAAEC,QAAQ,QAAQ,wBAAwB;AAC9D,SAASC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,QAAQ,yBAAyB;AAEjE,MAAMC,OAAO,GAAkD;EAC9DC,OAAO,EAAGC,IAAa,IAAKf,SAAS,CAACe,IAAuB,CAAC;EAC9DC,KAAK,EAAGD,IAAa,IAAKX,OAAO,CAACW,IAAuB,CAAC;EAC1DE,WAAW,EAAGF,IAAa,IAAKd,aAAa,CAACc,IAAgC,CAAC;EAC/EG,QAAQ,EAAGH,IAAa,IAAKZ,UAAU,CAACY,IAAc,CAAC;EACvDI,gBAAgB,EAAGJ,IAAa,IAAKb,kBAAkB,CAACa,IAAgC,CAAC;EACzFK,IAAI,EAAGL,IAAa,IAAKV,SAAS,CAACU,IAAuB,CAAC;EAC3DM,KAAK,EAAGN,IAAa,IAAKT,OAAO,CAACS,IAA+C,CAAC;EAClFO,MAAM,EAAGP,IAAa,IAAKR,cAAc,CAACQ,IAAc,CAAC;EACzDQ,GAAG,EAAGR,IAAa,IAAKP,WAAW,CAACO,IAAuB,CAAC;EAC5DS,IAAI,EAAGT,IAAa,IAAKH,MAAM,CAACG,IAAuB,CAAC;EACxDU,GAAG,EAAGV,IAAa,IAAKJ,KAAK,CAACI,IAAuB,CAAC;EACtDW,MAAM,EAAGX,IAAa,IAAKL,QAAQ,CAACK,IAAuB,CAAC;EAC5DY,MAAM,EAAGZ,IAAa,IAAKN,QAAQ,CAACM,IAAuB;CAC3D;AACD;AACA,KAAK,IAAIa,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAI,GAAG,EAAEA,OAAO,IAAI,CAAC,EAAE;EACnDf,OAAO,CAAC,MAAMe,OAAO,EAAE,CAAC,GAAGb,IAAI,IAAIJ,KAAK,CAACI,IAAuB,EAAE;IAAEa;EAAO,CAAE,CAAC;EAC9Ef,OAAO,CAAC,OAAOe,OAAO,EAAE,CAAC,GAAGb,IAAI,IAAIH,MAAM,CAACG,IAAuB,EAAE;IAAEa;EAAO,CAAE,CAAC;;AAEjF;AACA,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,EAAE,EAAEA,IAAI,IAAI,CAAC,EAAE;EACzChB,OAAO,CAAC,QAAQgB,IAAI,EAAE,CAAC,GAAGd,IAAI,IAC7BT,OAAO,CAACS,IAA+C,EAAE;IAAEc;EAAI,CAAE,CAAC;;AAEpEhB,OAAO,CAACiB,QAAQ,GAAGjB,OAAO,CAACQ,KAAK;AAEhC,eAAeR,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}