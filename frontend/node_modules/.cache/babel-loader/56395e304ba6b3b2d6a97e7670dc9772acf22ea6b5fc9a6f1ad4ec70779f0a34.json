{"ast":null,"code":"import { bytesToHex } from 'web3-utils';\nimport { setLengthLeft, toUint8Array } from '../common/utils.js';\nimport { isAccessList } from './types.js';\nexport const checkMaxInitCodeSize = (common, length) => {\n  const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n  if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n    throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);\n  }\n};\nexport const getAccessListData = accessList => {\n  let AccessListJSON;\n  let uint8arrayAccessList;\n  if (isAccessList(accessList)) {\n    AccessListJSON = accessList;\n    const newAccessList = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < accessList.length; i += 1) {\n      const item = accessList[i];\n      const addressBytes = toUint8Array(item.address);\n      const storageItems = [];\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let index = 0; index < item.storageKeys.length; index += 1) {\n        storageItems.push(toUint8Array(item.storageKeys[index]));\n      }\n      newAccessList.push([addressBytes, storageItems]);\n    }\n    uint8arrayAccessList = newAccessList;\n  } else {\n    uint8arrayAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n    // build the JSON\n    const json = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < uint8arrayAccessList.length; i += 1) {\n      const data = uint8arrayAccessList[i];\n      const address = bytesToHex(data[0]);\n      const storageKeys = [];\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let item = 0; item < data[1].length; item += 1) {\n        storageKeys.push(bytesToHex(data[1][item]));\n      }\n      const jsonItem = {\n        address,\n        storageKeys\n      };\n      json.push(jsonItem);\n    }\n    AccessListJSON = json;\n  }\n  return {\n    AccessListJSON,\n    accessList: uint8arrayAccessList\n  };\n};\nexport const verifyAccessList = accessList => {\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let key = 0; key < accessList.length; key += 1) {\n    const accessListItem = accessList[key];\n    const address = accessListItem[0];\n    const storageSlots = accessListItem[1];\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n    if (accessListItem[2] !== undefined) {\n      throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n    }\n    if (address.length !== 20) {\n      throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1) {\n      if (storageSlots[storageSlot].length !== 32) {\n        throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n      }\n    }\n  }\n};\nexport const getAccessListJSON = accessList => {\n  const accessListJSON = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let index = 0; index < accessList.length; index += 1) {\n    const item = accessList[index];\n    const JSONItem = {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n      address: bytesToHex(setLengthLeft(item[0], 20)),\n      storageKeys: []\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/prefer-optional-chain\n    const storageSlots = item && item[1];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let slot = 0; slot < storageSlots.length; slot += 1) {\n      const storageSlot = storageSlots[slot];\n      JSONItem.storageKeys.push(bytesToHex(setLengthLeft(storageSlot, 32)));\n    }\n    accessListJSON.push(JSONItem);\n  }\n  return accessListJSON;\n};\nexport const getDataFeeEIP2930 = (accessList, common) => {\n  const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n  const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n  let slots = 0;\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let index = 0; index < accessList.length; index += 1) {\n    const item = accessList[index];\n    const storageSlots = item[1];\n    slots += storageSlots.length;\n  }\n  const addresses = accessList.length;\n  return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n};","map":{"version":3,"names":["bytesToHex","setLengthLeft","toUint8Array","isAccessList","checkMaxInitCodeSize","common","length","maxInitCodeSize","param","BigInt","Error","getAccessListData","accessList","AccessListJSON","uint8arrayAccessList","newAccessList","i","item","addressBytes","address","storageItems","index","storageKeys","push","json","data","jsonItem","verifyAccessList","key","accessListItem","storageSlots","undefined","storageSlot","getAccessListJSON","accessListJSON","JSONItem","slot","getDataFeeEIP2930","accessListStorageKeyCost","accessListAddressCost","slots","addresses","Number"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-eth-accounts\\src\\tx\\utils.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { HexString } from 'web3-types';\nimport { bytesToHex } from 'web3-utils';\nimport { setLengthLeft, toUint8Array } from '../common/utils.js';\nimport type { AccessList, AccessListUint8Array, AccessListItem } from './types.js';\nimport { isAccessList } from './types.js';\n\nimport type { Common } from '../common/common.js';\n\nexport const checkMaxInitCodeSize = (common: Common, length: number) => {\n\tconst maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n\tif (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n\t\tthrow new Error(\n\t\t\t`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\n\t\t\t\t'vm',\n\t\t\t\t'maxInitCodeSize',\n\t\t\t)}`,\n\t\t);\n\t}\n};\n\nexport const getAccessListData = (accessList: AccessListUint8Array | AccessList) => {\n\tlet AccessListJSON;\n\tlet uint8arrayAccessList;\n\tif (isAccessList(accessList)) {\n\t\tAccessListJSON = accessList;\n\t\tconst newAccessList: AccessListUint8Array = [];\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let i = 0; i < accessList.length; i += 1) {\n\t\t\tconst item: AccessListItem = accessList[i];\n\t\t\tconst addressBytes = toUint8Array(item.address);\n\t\t\tconst storageItems: Uint8Array[] = [];\n\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\t\tfor (let index = 0; index < item.storageKeys.length; index += 1) {\n\t\t\t\tstorageItems.push(toUint8Array(item.storageKeys[index]));\n\t\t\t}\n\t\t\tnewAccessList.push([addressBytes, storageItems]);\n\t\t}\n\t\tuint8arrayAccessList = newAccessList;\n\t} else {\n\t\tuint8arrayAccessList = accessList ?? [];\n\t\t// build the JSON\n\t\tconst json: AccessList = [];\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let i = 0; i < uint8arrayAccessList.length; i += 1) {\n\t\t\tconst data = uint8arrayAccessList[i];\n\t\t\tconst address = bytesToHex(data[0]);\n\t\t\tconst storageKeys: string[] = [];\n\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\t\tfor (let item = 0; item < data[1].length; item += 1) {\n\t\t\t\tstorageKeys.push(bytesToHex(data[1][item]));\n\t\t\t}\n\t\t\tconst jsonItem: AccessListItem = {\n\t\t\t\taddress,\n\t\t\t\tstorageKeys,\n\t\t\t};\n\t\t\tjson.push(jsonItem);\n\t\t}\n\t\tAccessListJSON = json;\n\t}\n\n\treturn {\n\t\tAccessListJSON,\n\t\taccessList: uint8arrayAccessList,\n\t};\n};\n\nexport const verifyAccessList = (accessList: AccessListUint8Array) => {\n\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\tfor (let key = 0; key < accessList.length; key += 1) {\n\t\tconst accessListItem = accessList[key];\n\t\tconst address = accessListItem[0];\n\t\tconst storageSlots = accessListItem[1];\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n\t\tif ((<any>accessListItem)[2] !== undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t'Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.',\n\t\t\t);\n\t\t}\n\t\tif (address.length !== 20) {\n\t\t\tthrow new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1) {\n\t\t\tif (storageSlots[storageSlot].length !== 32) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Invalid EIP-2930 transaction: storage slot length should be 32 bytes',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const getAccessListJSON = (\n\taccessList: AccessListUint8Array,\n): {\n\taddress: HexString;\n\tstorageKeys: HexString[];\n}[] => {\n\tconst accessListJSON: { address: HexString; storageKeys: HexString[] }[] = [];\n\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\tfor (let index = 0; index < accessList.length; index += 1) {\n\t\tconst item: any = accessList[index];\n\t\tconst JSONItem: { address: HexString; storageKeys: HexString[] } = {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n\t\t\taddress: bytesToHex(setLengthLeft(<Uint8Array>item[0], 20)),\n\t\t\tstorageKeys: [],\n\t\t};\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/prefer-optional-chain\n\t\tconst storageSlots: Uint8Array[] = item && item[1];\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let slot = 0; slot < storageSlots.length; slot += 1) {\n\t\t\tconst storageSlot = storageSlots[slot];\n\t\t\tJSONItem.storageKeys.push(bytesToHex(setLengthLeft(storageSlot, 32)));\n\t\t}\n\t\taccessListJSON.push(JSONItem);\n\t}\n\treturn accessListJSON;\n};\n\nexport const getDataFeeEIP2930 = (accessList: AccessListUint8Array, common: Common): number => {\n\tconst accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n\tconst accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n\n\tlet slots = 0;\n\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\tfor (let index = 0; index < accessList.length; index += 1) {\n\t\tconst item = accessList[index];\n\t\tconst storageSlots = item[1];\n\t\tslots += storageSlots.length;\n\t}\n\n\tconst addresses = accessList.length;\n\treturn addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n};\n"],"mappings":"AAiBA,SAASA,UAAU,QAAQ,YAAY;AACvC,SAASC,aAAa,EAAEC,YAAY,QAAQ,oBAAoB;AAEhE,SAASC,YAAY,QAAQ,YAAY;AAIzC,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,MAAc,EAAEC,MAAc,KAAI;EACtE,MAAMC,eAAe,GAAGF,MAAM,CAACG,KAAK,CAAC,IAAI,EAAE,iBAAiB,CAAC;EAC7D,IAAID,eAAe,IAAIE,MAAM,CAACH,MAAM,CAAC,GAAGC,eAAe,EAAE;IACxD,MAAM,IAAIG,KAAK,CACd,6DAA6DJ,MAAM,qBAAqBD,MAAM,CAACG,KAAK,CACnG,IAAI,EACJ,iBAAiB,CACjB,EAAE,CACH;;AAEH,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAIC,UAA6C,IAAI;EAClF,IAAIC,cAAc;EAClB,IAAIC,oBAAoB;EACxB,IAAIX,YAAY,CAACS,UAAU,CAAC,EAAE;IAC7BC,cAAc,GAAGD,UAAU;IAC3B,MAAMG,aAAa,GAAyB,EAAE;IAC9C;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACN,MAAM,EAAEU,CAAC,IAAI,CAAC,EAAE;MAC9C,MAAMC,IAAI,GAAmBL,UAAU,CAACI,CAAC,CAAC;MAC1C,MAAME,YAAY,GAAGhB,YAAY,CAACe,IAAI,CAACE,OAAO,CAAC;MAC/C,MAAMC,YAAY,GAAiB,EAAE;MACrC;MACA,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGJ,IAAI,CAACK,WAAW,CAAChB,MAAM,EAAEe,KAAK,IAAI,CAAC,EAAE;QAChED,YAAY,CAACG,IAAI,CAACrB,YAAY,CAACe,IAAI,CAACK,WAAW,CAACD,KAAK,CAAC,CAAC,CAAC;;MAEzDN,aAAa,CAACQ,IAAI,CAAC,CAACL,YAAY,EAAEE,YAAY,CAAC,CAAC;;IAEjDN,oBAAoB,GAAGC,aAAa;GACpC,MAAM;IACND,oBAAoB,GAAGF,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,EAAE;IACvC;IACA,MAAMY,IAAI,GAAe,EAAE;IAC3B;IACA,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,oBAAoB,CAACR,MAAM,EAAEU,CAAC,IAAI,CAAC,EAAE;MACxD,MAAMS,IAAI,GAAGX,oBAAoB,CAACE,CAAC,CAAC;MACpC,MAAMG,OAAO,GAAGnB,UAAU,CAACyB,IAAI,CAAC,CAAC,CAAC,CAAC;MACnC,MAAMH,WAAW,GAAa,EAAE;MAChC;MACA,KAAK,IAAIL,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGQ,IAAI,CAAC,CAAC,CAAC,CAACnB,MAAM,EAAEW,IAAI,IAAI,CAAC,EAAE;QACpDK,WAAW,CAACC,IAAI,CAACvB,UAAU,CAACyB,IAAI,CAAC,CAAC,CAAC,CAACR,IAAI,CAAC,CAAC,CAAC;;MAE5C,MAAMS,QAAQ,GAAmB;QAChCP,OAAO;QACPG;OACA;MACDE,IAAI,CAACD,IAAI,CAACG,QAAQ,CAAC;;IAEpBb,cAAc,GAAGW,IAAI;;EAGtB,OAAO;IACNX,cAAc;IACdD,UAAU,EAAEE;GACZ;AACF,CAAC;AAED,OAAO,MAAMa,gBAAgB,GAAIf,UAAgC,IAAI;EACpE;EACA,KAAK,IAAIgB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGhB,UAAU,CAACN,MAAM,EAAEsB,GAAG,IAAI,CAAC,EAAE;IACpD,MAAMC,cAAc,GAAGjB,UAAU,CAACgB,GAAG,CAAC;IACtC,MAAMT,OAAO,GAAGU,cAAc,CAAC,CAAC,CAAC;IACjC,MAAMC,YAAY,GAAGD,cAAc,CAAC,CAAC,CAAC;IACtC;IACA,IAAUA,cAAe,CAAC,CAAC,CAAC,KAAKE,SAAS,EAAE;MAC3C,MAAM,IAAIrB,KAAK,CACd,sGAAsG,CACtG;;IAEF,IAAIS,OAAO,CAACb,MAAM,KAAK,EAAE,EAAE;MAC1B,MAAM,IAAII,KAAK,CAAC,iEAAiE,CAAC;;IAEnF;IACA,KAAK,IAAIsB,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAGF,YAAY,CAACxB,MAAM,EAAE0B,WAAW,IAAI,CAAC,EAAE;MAC9E,IAAIF,YAAY,CAACE,WAAW,CAAC,CAAC1B,MAAM,KAAK,EAAE,EAAE;QAC5C,MAAM,IAAII,KAAK,CACd,sEAAsE,CACtE;;;;AAIL,CAAC;AAED,OAAO,MAAMuB,iBAAiB,GAC7BrB,UAAgC,IAI3B;EACL,MAAMsB,cAAc,GAAuD,EAAE;EAC7E;EACA,KAAK,IAAIb,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGT,UAAU,CAACN,MAAM,EAAEe,KAAK,IAAI,CAAC,EAAE;IAC1D,MAAMJ,IAAI,GAAQL,UAAU,CAACS,KAAK,CAAC;IACnC,MAAMc,QAAQ,GAAqD;MAClE;MACAhB,OAAO,EAAEnB,UAAU,CAACC,aAAa,CAAagB,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MAC3DK,WAAW,EAAE;KACb;IACD;IACA,MAAMQ,YAAY,GAAiBb,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC;IAClD;IACA,KAAK,IAAImB,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGN,YAAY,CAACxB,MAAM,EAAE8B,IAAI,IAAI,CAAC,EAAE;MACzD,MAAMJ,WAAW,GAAGF,YAAY,CAACM,IAAI,CAAC;MACtCD,QAAQ,CAACb,WAAW,CAACC,IAAI,CAACvB,UAAU,CAACC,aAAa,CAAC+B,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;;IAEtEE,cAAc,CAACX,IAAI,CAACY,QAAQ,CAAC;;EAE9B,OAAOD,cAAc;AACtB,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAGA,CAACzB,UAAgC,EAAEP,MAAc,KAAY;EAC7F,MAAMiC,wBAAwB,GAAGjC,MAAM,CAACG,KAAK,CAAC,WAAW,EAAE,0BAA0B,CAAC;EACtF,MAAM+B,qBAAqB,GAAGlC,MAAM,CAACG,KAAK,CAAC,WAAW,EAAE,uBAAuB,CAAC;EAEhF,IAAIgC,KAAK,GAAG,CAAC;EACb;EACA,KAAK,IAAInB,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGT,UAAU,CAACN,MAAM,EAAEe,KAAK,IAAI,CAAC,EAAE;IAC1D,MAAMJ,IAAI,GAAGL,UAAU,CAACS,KAAK,CAAC;IAC9B,MAAMS,YAAY,GAAGb,IAAI,CAAC,CAAC,CAAC;IAC5BuB,KAAK,IAAIV,YAAY,CAACxB,MAAM;;EAG7B,MAAMmC,SAAS,GAAG7B,UAAU,CAACN,MAAM;EACnC,OAAOmC,SAAS,GAAGC,MAAM,CAACH,qBAAqB,CAAC,GAAGC,KAAK,GAAGE,MAAM,CAACJ,wBAAwB,CAAC;AAC5F,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}