{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @module Utils\n */\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { utf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { InvalidAddressError, InvalidBooleanError, InvalidBytesError, InvalidLargeValueError, InvalidSizeError, InvalidStringError, InvalidUnsignedIntegerError } from 'web3-errors';\nimport { isAddress, isNullish, isHexStrict } from 'web3-validator';\nimport { bytesToUint8Array, bytesToHex, hexToBytes, toBigInt, toHex, toNumber, utf8ToHex } from './converters.js';\nimport { leftPad, rightPad, toTwosComplement } from './string_manipulation.js';\nconst SHA3_EMPTY_BYTES = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * computes the Keccak-256 hash of the input and returns a hexstring\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.sha3('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3(''));\n * > undefined\n * ```\n */\nexport const sha3 = data => {\n  let updatedData;\n  if (typeof data === 'string') {\n    if (data.startsWith('0x') && isHexStrict(data)) {\n      updatedData = hexToBytes(data);\n    } else {\n      updatedData = utf8ToBytes(data);\n    }\n  } else {\n    updatedData = data;\n  }\n  const hash = bytesToHex(keccak256(updatedData));\n  // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n  return hash === SHA3_EMPTY_BYTES ? undefined : hash;\n};\n/**\n * Will calculate the sha3 of the input but does return the hash value instead of null if for example a empty string is passed.\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * conosle.log(web3.utils.sha3Raw('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3Raw(''));\n * > 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n * ```\n */\nexport const sha3Raw = data => {\n  const hash = sha3(data);\n  if (isNullish(hash)) {\n    return SHA3_EMPTY_BYTES;\n  }\n  return hash;\n};\n/**\n * A wrapper for ethereum-cryptography/keccak256 to allow hashing a `string` and a `bigint` in addition to `UInt8Array`\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.keccak256Wrapper('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.keccak256Wrapper(1));\n * > 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6\n *\n * console.log(web3.utils.keccak256Wrapper(0xaf12fd));\n * > 0x358640fd4719fa923525d74ab5ae80a594301aba5543e3492b052bf4598b794c\n * ```\n */\nexport const keccak256Wrapper = data => {\n  let processedData;\n  if (typeof data === 'bigint' || typeof data === 'number') {\n    processedData = utf8ToBytes(data.toString());\n  } else if (Array.isArray(data)) {\n    processedData = new Uint8Array(data);\n  } else if (typeof data === 'string' && !isHexStrict(data)) {\n    processedData = utf8ToBytes(data);\n  } else {\n    processedData = bytesToUint8Array(data);\n  }\n  return bytesToHex(keccak256(processedData));\n};\nexport { keccak256Wrapper as keccak256 };\n/**\n * returns type and value\n * @param arg - the input to return the type and value\n * @returns - the type and value of the input\n */\nconst getType = arg => {\n  if (Array.isArray(arg)) {\n    throw new Error('Autodetection of array types is not supported.');\n  }\n  let type;\n  let value;\n  // if type is given\n  if (typeof arg === 'object' && ('t' in arg || 'type' in arg) && ('v' in arg || 'value' in arg)) {\n    type = 't' in arg ? arg.t : arg.type;\n    value = 'v' in arg ? arg.v : arg.value;\n    type = type.toLowerCase() === 'bigint' ? 'int' : type;\n  } else if (typeof arg === 'bigint') {\n    return ['int', arg];\n  }\n  // otherwise try to guess the type\n  else {\n    type = toHex(arg, true);\n    value = toHex(arg);\n    if (!type.startsWith('int') && !type.startsWith('uint')) {\n      type = 'bytes';\n    }\n  }\n  if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n    value = toBigInt(value);\n  }\n  return [type, value];\n};\n/**\n * returns the type with size if uint or int\n * @param name - the input to return the type with size\n * @returns - the type with size of the input\n */\nconst elementaryName = name => {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  }\n  if (name === 'int') {\n    return 'int256';\n  }\n  if (name.startsWith('uint[')) {\n    return `uint256'${name.slice(4)}`;\n  }\n  if (name === 'uint') {\n    return 'uint256';\n  }\n  return name;\n};\n/**\n * returns the size of the value of type 'byte'\n */\nconst parseTypeN = (value, typeLength) => {\n  const typesize = /^(\\d+).*$/.exec(value.slice(typeLength));\n  return typesize ? parseInt(typesize[1], 10) : 0;\n};\n/**\n * returns the bit length of the value\n * @param value - the input to return the bit length\n * @returns - the bit length of the input\n */\nconst bitLength = value => {\n  const updatedVal = value.toString(2);\n  return updatedVal.length;\n};\n/**\n * Pads the value based on size and type\n * returns a string of the padded value\n * @param type - the input to pad\n * @returns = the padded value\n */\nconst solidityPack = (type, val) => {\n  const value = val.toString();\n  if (type === 'string') {\n    if (typeof val === 'string') return utf8ToHex(val);\n    throw new InvalidStringError(val);\n  }\n  if (type === 'bool' || type === 'boolean') {\n    if (typeof val === 'boolean') return val ? '01' : '00';\n    throw new InvalidBooleanError(val);\n  }\n  if (type === 'address') {\n    if (!isAddress(value)) {\n      throw new InvalidAddressError(value);\n    }\n    return value;\n  }\n  const name = elementaryName(type);\n  if (type.startsWith('uint')) {\n    const size = parseTypeN(name, 'uint'.length);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new InvalidSizeError(value);\n    }\n    const num = toNumber(value);\n    if (bitLength(num) > size) {\n      throw new InvalidLargeValueError(value);\n    }\n    if (num < BigInt(0)) {\n      throw new InvalidUnsignedIntegerError(value);\n    }\n    return size ? leftPad(num.toString(16), size / 8 * 2) : num.toString(16);\n  }\n  if (type.startsWith('int')) {\n    const size = parseTypeN(name, 'int'.length);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new InvalidSizeError(type);\n    }\n    const num = toNumber(value);\n    if (bitLength(num) > size) {\n      throw new InvalidLargeValueError(value);\n    }\n    if (num < BigInt(0)) {\n      return toTwosComplement(num.toString(), size / 8 * 2);\n    }\n    return size ? leftPad(num.toString(16), size / 4) : num.toString(16);\n  }\n  if (name === 'bytes') {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new InvalidBytesError(value);\n    }\n    return value;\n  }\n  if (type.startsWith('bytes')) {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new InvalidBytesError(value);\n    }\n    const size = parseTypeN(type, 'bytes'.length);\n    if (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, '').length / 2) {\n      throw new InvalidBytesError(value);\n    }\n    return rightPad(value, size * 2);\n  }\n  return '';\n};\n/**\n * returns a string of the tightly packed value given based on the type\n * @param arg - the input to return the tightly packed value\n * @returns - the tightly packed value\n */\nexport const processSolidityEncodePackedArgs = arg => {\n  const [type, val] = getType(arg);\n  // array case\n  if (Array.isArray(val)) {\n    // go through each element of the array and use map function to create new hexarg list\n    const hexArg = val.map(v => solidityPack(type, v).replace('0x', ''));\n    return hexArg.join('');\n  }\n  const hexArg = solidityPack(type, val);\n  return hexArg.replace('0x', '');\n};\n/**\n * Encode packed arguments to a hexstring\n */\nexport const encodePacked = (...values) => {\n  const hexArgs = values.map(processSolidityEncodePackedArgs);\n  return `0x${hexArgs.join('').toLowerCase()}`;\n};\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, or null if input is empty\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n *  console.log([{ type: 'string', value: '31323334' }]);\n * console.log(web3.utils.soliditySha3({ type: \"string\", value: \"31323334\" }));\n * > 0xf15f8da2ad27e486d632dc37d24912f634398918d6f9913a0a0ff84e388be62b\n * ```\n */\nexport const soliditySha3 = (...values) => sha3(encodePacked(...values));\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, if input is empty will return `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470`\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n * console.log(web3.utils.soliditySha3Raw({ type: \"string\", value: \"helloworld\" }))\n * > 0xfa26db7ca85ead399216e7c6316bc50ed24393c3122b582735e7f3b0f91b93f0\n * ```\n */\nexport const soliditySha3Raw = (...values) => sha3Raw(encodePacked(...values));\n/**\n * Get slot number for storage long string in contract. Basically for getStorage method\n * returns slotNumber where will data placed\n * @param mainSlotNumber - the slot number where will be stored hash of long string\n * @returns - the slot number where will be stored long string\n */\nexport const getStorageSlotNumForLongString = mainSlotNumber => sha3(`0x${(typeof mainSlotNumber === 'number' ? mainSlotNumber.toString() : mainSlotNumber).padStart(64, '0')}`);","map":{"version":3,"names":["keccak256","utf8ToBytes","InvalidAddressError","InvalidBooleanError","InvalidBytesError","InvalidLargeValueError","InvalidSizeError","InvalidStringError","InvalidUnsignedIntegerError","isAddress","isNullish","isHexStrict","bytesToUint8Array","bytesToHex","hexToBytes","toBigInt","toHex","toNumber","utf8ToHex","leftPad","rightPad","toTwosComplement","SHA3_EMPTY_BYTES","sha3","data","updatedData","startsWith","hash","undefined","sha3Raw","keccak256Wrapper","processedData","toString","Array","isArray","Uint8Array","getType","arg","Error","type","value","t","v","toLowerCase","test","elementaryName","name","slice","parseTypeN","typeLength","typesize","exec","parseInt","bitLength","updatedVal","length","solidityPack","val","size","num","BigInt","replace","processSolidityEncodePackedArgs","hexArg","map","join","encodePacked","values","hexArgs","soliditySha3","soliditySha3Raw","getStorageSlotNumForLongString","mainSlotNumber","padStart"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-utils\\src\\hash.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @module Utils\n */\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { utf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport {\n\tInvalidAddressError,\n\tInvalidBooleanError,\n\tInvalidBytesError,\n\tInvalidLargeValueError,\n\tInvalidSizeError,\n\tInvalidStringError,\n\tInvalidUnsignedIntegerError,\n} from 'web3-errors';\nimport {\n\tBytes,\n\tEncodingTypes,\n\tNumbers,\n\tSha3Input,\n\tTypedObject,\n\tTypedObjectAbbreviated,\n} from 'web3-types';\nimport { isAddress, isNullish, isHexStrict } from 'web3-validator';\nimport {\n\tbytesToUint8Array,\n\tbytesToHex,\n\thexToBytes,\n\ttoBigInt,\n\ttoHex,\n\ttoNumber,\n\tutf8ToHex,\n} from './converters.js';\nimport { leftPad, rightPad, toTwosComplement } from './string_manipulation.js';\n\n\nconst SHA3_EMPTY_BYTES = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\n/**\n * computes the Keccak-256 hash of the input and returns a hexstring\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.sha3('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3(''));\n * > undefined\n * ```\n */\nexport const sha3 = (data: Bytes): string | undefined => {\n\tlet updatedData: Uint8Array;\n\n\tif (typeof data === 'string') {\n\t\tif (data.startsWith('0x') && isHexStrict(data)) {\n\t\t\tupdatedData = hexToBytes(data);\n\t\t} else {\n\t\t\tupdatedData = utf8ToBytes(data);\n\t\t}\n\t} else {\n\t\tupdatedData = data;\n\t}\n\tconst hash = bytesToHex(keccak256(updatedData));\n\n\t// EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n\treturn hash === SHA3_EMPTY_BYTES ? undefined : hash;\n};\n\n/**\n * Will calculate the sha3 of the input but does return the hash value instead of null if for example a empty string is passed.\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * conosle.log(web3.utils.sha3Raw('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3Raw(''));\n * > 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n * ```\n */\nexport const sha3Raw = (data: Bytes): string => {\n\tconst hash = sha3(data);\n\tif (isNullish(hash)) {\n\t\treturn SHA3_EMPTY_BYTES;\n\t}\n\n\treturn hash;\n};\n\n/**\n * A wrapper for ethereum-cryptography/keccak256 to allow hashing a `string` and a `bigint` in addition to `UInt8Array`\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.keccak256Wrapper('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.keccak256Wrapper(1));\n * > 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6\n *\n * console.log(web3.utils.keccak256Wrapper(0xaf12fd));\n * > 0x358640fd4719fa923525d74ab5ae80a594301aba5543e3492b052bf4598b794c\n * ```\n */\nexport const keccak256Wrapper = (\n\tdata: Bytes | Numbers | string | ReadonlyArray<number>,\n): string => {\n\tlet processedData;\n\tif (typeof data === 'bigint' || typeof data === 'number') {\n\t\tprocessedData = utf8ToBytes(data.toString());\n\t} else if (Array.isArray(data)) {\n\t\tprocessedData = new Uint8Array(data);\n\t} else if (typeof data === 'string' && !isHexStrict(data)) {\n\t\tprocessedData = utf8ToBytes(data);\n\t} else {\n\t\tprocessedData = bytesToUint8Array(data as Bytes);\n\t}\n\treturn bytesToHex(keccak256(processedData));\n};\n\nexport { keccak256Wrapper as keccak256 };\n\n/**\n * returns type and value\n * @param arg - the input to return the type and value\n * @returns - the type and value of the input\n */\nconst getType = (arg: Sha3Input): [string, EncodingTypes] => {\n\tif (Array.isArray(arg)) {\n\t\tthrow new Error('Autodetection of array types is not supported.');\n\t}\n\n\tlet type;\n\tlet value;\n\t// if type is given\n\tif (\n\t\ttypeof arg === 'object' &&\n\t\t('t' in arg || 'type' in arg) &&\n\t\t('v' in arg || 'value' in arg)\n\t) {\n\t\ttype = 't' in arg ? arg.t : arg.type;\n\t\tvalue = 'v' in arg ? arg.v : arg.value;\n\n\t\ttype = type.toLowerCase() === 'bigint' ? 'int' : type;\n\t} else if (typeof arg === 'bigint') {\n\t\treturn ['int', arg];\n\t}\n\t// otherwise try to guess the type\n\telse {\n\t\ttype = toHex(arg, true);\n\t\tvalue = toHex(arg);\n\n\t\tif (!type.startsWith('int') && !type.startsWith('uint')) {\n\t\t\ttype = 'bytes';\n\t\t}\n\t}\n\n\tif (\n\t\t(type.startsWith('int') || type.startsWith('uint')) &&\n\t\ttypeof value === 'string' &&\n\t\t!/^(-)?0x/i.test(value)\n\t) {\n\t\tvalue = toBigInt(value);\n\t}\n\treturn [type, value];\n};\n\n/**\n * returns the type with size if uint or int\n * @param name - the input to return the type with size\n * @returns - the type with size of the input\n */\nconst elementaryName = (name: string): string => {\n\tif (name.startsWith('int[')) {\n\t\treturn `int256${name.slice(3)}`;\n\t}\n\tif (name === 'int') {\n\t\treturn 'int256';\n\t}\n\tif (name.startsWith('uint[')) {\n\t\treturn `uint256'${name.slice(4)}`;\n\t}\n\tif (name === 'uint') {\n\t\treturn 'uint256';\n\t}\n\treturn name;\n};\n\n/**\n * returns the size of the value of type 'byte'\n */\nconst parseTypeN = (value: string, typeLength: number): number => {\n\tconst typesize = /^(\\d+).*$/.exec(value.slice(typeLength));\n\treturn typesize ? parseInt(typesize[1], 10) : 0;\n};\n\n/**\n * returns the bit length of the value\n * @param value - the input to return the bit length\n * @returns - the bit length of the input\n */\nconst bitLength = (value: bigint | number): number => {\n\tconst updatedVal = value.toString(2);\n\treturn updatedVal.length;\n};\n\n/**\n * Pads the value based on size and type\n * returns a string of the padded value\n * @param type - the input to pad\n * @returns = the padded value\n */\nconst solidityPack = (type: string, val: EncodingTypes): string => {\n\tconst value = val.toString();\n\tif (type === 'string') {\n\t\tif (typeof val === 'string') return utf8ToHex(val);\n\t\tthrow new InvalidStringError(val);\n\t}\n\tif (type === 'bool' || type === 'boolean') {\n\t\tif (typeof val === 'boolean') return val ? '01' : '00';\n\t\tthrow new InvalidBooleanError(val);\n\t}\n\n\tif (type === 'address') {\n\t\tif (!isAddress(value)) {\n\t\t\tthrow new InvalidAddressError(value);\n\t\t}\n\t\treturn value;\n\t}\n\tconst name = elementaryName(type);\n\tif (type.startsWith('uint')) {\n\t\tconst size = parseTypeN(name, 'uint'.length);\n\n\t\tif (size % 8 || size < 8 || size > 256) {\n\t\t\tthrow new InvalidSizeError(value);\n\t\t}\n\t\tconst num = toNumber(value);\n\t\tif (bitLength(num) > size) {\n\t\t\tthrow new InvalidLargeValueError(value);\n\t\t}\n\t\tif (num < BigInt(0)) {\n\t\t\tthrow new InvalidUnsignedIntegerError(value);\n\t\t}\n\n\t\treturn size ? leftPad(num.toString(16), (size / 8) * 2) : num.toString(16);\n\t}\n\n\tif (type.startsWith('int')) {\n\t\tconst size = parseTypeN(name, 'int'.length);\n\t\tif (size % 8 || size < 8 || size > 256) {\n\t\t\tthrow new InvalidSizeError(type);\n\t\t}\n\n\t\tconst num = toNumber(value);\n\t\tif (bitLength(num) > size) {\n\t\t\tthrow new InvalidLargeValueError(value);\n\t\t}\n\t\tif (num < BigInt(0)) {\n\t\t\treturn toTwosComplement(num.toString(), (size / 8) * 2);\n\t\t}\n\t\treturn size ? leftPad(num.toString(16), size / 4) : num.toString(16);\n\t}\n\n\tif (name === 'bytes') {\n\t\tif (value.replace(/^0x/i, '').length % 2 !== 0) {\n\t\t\tthrow new InvalidBytesError(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tif (type.startsWith('bytes')) {\n\t\tif (value.replace(/^0x/i, '').length % 2 !== 0) {\n\t\t\tthrow new InvalidBytesError(value);\n\t\t}\n\n\t\tconst size = parseTypeN(type, 'bytes'.length);\n\n\t\tif (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, '').length / 2) {\n\t\t\tthrow new InvalidBytesError(value);\n\t\t}\n\n\t\treturn rightPad(value, size * 2);\n\t}\n\treturn '';\n};\n\n/**\n * returns a string of the tightly packed value given based on the type\n * @param arg - the input to return the tightly packed value\n * @returns - the tightly packed value\n */\nexport const processSolidityEncodePackedArgs = (arg: Sha3Input): string => {\n\tconst [type, val] = getType(arg);\n\n\t// array case\n\tif (Array.isArray(val)) {\n\t\t// go through each element of the array and use map function to create new hexarg list\n\t\tconst hexArg = val.map((v: Numbers | boolean) => solidityPack(type, v).replace('0x', ''));\n\t\treturn hexArg.join('');\n\t}\n\n\tconst hexArg = solidityPack(type, val);\n\treturn hexArg.replace('0x', '');\n};\n\n/**\n * Encode packed arguments to a hexstring\n */\nexport const encodePacked = (...values: Sha3Input[]): string => {\n\tconst hexArgs = values.map(processSolidityEncodePackedArgs);\n\treturn `0x${hexArgs.join('').toLowerCase()}`;\n};\n\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, or null if input is empty\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n *  console.log([{ type: 'string', value: '31323334' }]);\n * console.log(web3.utils.soliditySha3({ type: \"string\", value: \"31323334\" }));\n * > 0xf15f8da2ad27e486d632dc37d24912f634398918d6f9913a0a0ff84e388be62b\n * ```\n */\nexport const soliditySha3 = (...values: Sha3Input[]): string | undefined =>\n\tsha3(encodePacked(...values));\n\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, if input is empty will return `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470`\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n * console.log(web3.utils.soliditySha3Raw({ type: \"string\", value: \"helloworld\" }))\n * > 0xfa26db7ca85ead399216e7c6316bc50ed24393c3122b582735e7f3b0f91b93f0\n * ```\n */\nexport const soliditySha3Raw = (...values: TypedObject[] | TypedObjectAbbreviated[]): string =>\n\tsha3Raw(encodePacked(...values));\n\n/**\n * Get slot number for storage long string in contract. Basically for getStorage method\n * returns slotNumber where will data placed\n * @param mainSlotNumber - the slot number where will be stored hash of long string\n * @returns - the slot number where will be stored long string\n */\nexport const getStorageSlotNumForLongString = (mainSlotNumber: number | string) =>\n\tsha3(\n\t\t`0x${(typeof mainSlotNumber === 'number'\n\t\t\t? mainSlotNumber.toString()\n\t\t\t: mainSlotNumber\n\t\t).padStart(64, '0')}`,\n\t);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}