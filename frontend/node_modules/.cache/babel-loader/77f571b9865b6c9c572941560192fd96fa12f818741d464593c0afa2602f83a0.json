{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { utf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { uint8ArrayToHexString } from '../utils.js';\nimport { isHexStrict } from './string.js';\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n */\nexport const checkAddressCheckSum = data => {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(data)) return false;\n  const address = data.slice(2);\n  const updatedData = utf8ToBytes(address.toLowerCase());\n  const addressHash = uint8ArrayToHexString(keccak256(updatedData)).slice(2);\n  for (let i = 0; i < 40; i += 1) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n */\nexport const isAddress = (value, checkChecksum = true) => {\n  if (typeof value !== 'string' && !(value instanceof Uint8Array)) {\n    return false;\n  }\n  let valueToCheck;\n  if (value instanceof Uint8Array) {\n    valueToCheck = uint8ArrayToHexString(value);\n  } else if (typeof value === 'string' && !isHexStrict(value)) {\n    valueToCheck = value.toLowerCase().startsWith('0x') ? value : `0x${value}`;\n  } else {\n    valueToCheck = value;\n  }\n  // check if it has the basic requirements of an address\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) {\n    return false;\n  }\n  // If it's ALL lowercase or ALL upppercase\n  if (/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) || /^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)) {\n    return true;\n    // Otherwise check each case\n  }\n  return checkChecksum ? checkAddressCheckSum(valueToCheck) : true;\n};","map":{"version":3,"names":["keccak256","utf8ToBytes","uint8ArrayToHexString","isHexStrict","checkAddressCheckSum","data","test","address","slice","updatedData","toLowerCase","addressHash","i","parseInt","toUpperCase","isAddress","value","checkChecksum","Uint8Array","valueToCheck","startsWith"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-validator\\src\\validation\\address.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { utf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { ValidInputTypes } from '../types.js';\nimport { uint8ArrayToHexString } from '../utils.js';\nimport { isHexStrict } from './string.js';\n\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n */\nexport const checkAddressCheckSum = (data: string): boolean => {\n\tif (!/^(0x)?[0-9a-f]{40}$/i.test(data)) return false;\n\tconst address = data.slice(2);\n\tconst updatedData = utf8ToBytes(address.toLowerCase());\n\n\tconst addressHash = uint8ArrayToHexString(keccak256(updatedData)).slice(2);\n\n\tfor (let i = 0; i < 40; i += 1) {\n\t\t// the nth letter should be uppercase if the nth digit of casemap is 1\n\t\tif (\n\t\t\t(parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\n\t\t\t(parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n */\nexport const isAddress = (value: ValidInputTypes, checkChecksum = true) => {\n\tif (typeof value !== 'string' && !(value instanceof Uint8Array)) {\n\t\treturn false;\n\t}\n\n\tlet valueToCheck: string;\n\n\tif (value instanceof Uint8Array) {\n\t\tvalueToCheck = uint8ArrayToHexString(value);\n\t} else if (typeof value === 'string' && !isHexStrict(value)) {\n\t\tvalueToCheck = value.toLowerCase().startsWith('0x') ? value : `0x${value}`;\n\t} else {\n\t\tvalueToCheck = value;\n\t}\n\n\t// check if it has the basic requirements of an address\n\tif (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) {\n\t\treturn false;\n\t}\n\t// If it's ALL lowercase or ALL upppercase\n\tif (\n\t\t/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) ||\n\t\t/^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)\n\t) {\n\t\treturn true;\n\t\t// Otherwise check each case\n\t}\n\treturn checkChecksum ? checkAddressCheckSum(valueToCheck) : true;\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAASA,SAAS,QAAQ,iCAAiC;AAC3D,SAASC,WAAW,QAAQ,gCAAgC;AAE5D,SAASC,qBAAqB,QAAQ,aAAa;AACnD,SAASC,WAAW,QAAQ,aAAa;AAEzC;;;AAGA,OAAO,MAAMC,oBAAoB,GAAIC,IAAY,IAAa;EAC7D,IAAI,CAAC,sBAAsB,CAACC,IAAI,CAACD,IAAI,CAAC,EAAE,OAAO,KAAK;EACpD,MAAME,OAAO,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;EAC7B,MAAMC,WAAW,GAAGR,WAAW,CAACM,OAAO,CAACG,WAAW,EAAE,CAAC;EAEtD,MAAMC,WAAW,GAAGT,qBAAqB,CAACF,SAAS,CAACS,WAAW,CAAC,CAAC,CAACD,KAAK,CAAC,CAAC,CAAC;EAE1E,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC/B;IACA,IACEC,QAAQ,CAACF,WAAW,CAACC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAIL,OAAO,CAACK,CAAC,CAAC,CAACE,WAAW,EAAE,KAAKP,OAAO,CAACK,CAAC,CAAC,IAC3EC,QAAQ,CAACF,WAAW,CAACC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAIL,OAAO,CAACK,CAAC,CAAC,CAACF,WAAW,EAAE,KAAKH,OAAO,CAACK,CAAC,CAAE,EAC7E;MACD,OAAO,KAAK;;;EAGd,OAAO,IAAI;AACZ,CAAC;AAED;;;AAGA,OAAO,MAAMG,SAAS,GAAGA,CAACC,KAAsB,EAAEC,aAAa,GAAG,IAAI,KAAI;EACzE,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAI,EAAEA,KAAK,YAAYE,UAAU,CAAC,EAAE;IAChE,OAAO,KAAK;;EAGb,IAAIC,YAAoB;EAExB,IAAIH,KAAK,YAAYE,UAAU,EAAE;IAChCC,YAAY,GAAGjB,qBAAqB,CAACc,KAAK,CAAC;GAC3C,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACb,WAAW,CAACa,KAAK,CAAC,EAAE;IAC5DG,YAAY,GAAGH,KAAK,CAACN,WAAW,EAAE,CAACU,UAAU,CAAC,IAAI,CAAC,GAAGJ,KAAK,GAAG,KAAKA,KAAK,EAAE;GAC1E,MAAM;IACNG,YAAY,GAAGH,KAAK;;EAGrB;EACA,IAAI,CAAC,sBAAsB,CAACV,IAAI,CAACa,YAAY,CAAC,EAAE;IAC/C,OAAO,KAAK;;EAEb;EACA,IACC,wBAAwB,CAACb,IAAI,CAACa,YAAY,CAAC,IAC3C,wBAAwB,CAACb,IAAI,CAACa,YAAY,CAAC,EAC1C;IACD,OAAO,IAAI;IACX;;EAED,OAAOF,aAAa,GAAGb,oBAAoB,CAACe,YAAY,CAAC,GAAG,IAAI;AACjE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}