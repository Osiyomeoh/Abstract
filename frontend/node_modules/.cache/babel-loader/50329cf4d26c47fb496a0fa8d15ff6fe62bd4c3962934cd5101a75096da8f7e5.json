{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ERR_RAW_TX_UNDEFINED, ERR_TX, ERR_TX_BLOCK_TIMEOUT, ERR_TX_CONTRACT_NOT_STORED, ERR_TX_CHAIN_ID_MISMATCH, ERR_TX_DATA_AND_INPUT, ERR_TX_GAS_MISMATCH, ERR_TX_CHAIN_MISMATCH, ERR_TX_HARDFORK_MISMATCH, ERR_TX_INVALID_CALL, ERR_TX_INVALID_CHAIN_INFO, ERR_TX_INVALID_FEE_MARKET_GAS, ERR_TX_INVALID_FEE_MARKET_GAS_PRICE, ERR_TX_INVALID_LEGACY_FEE_MARKET, ERR_TX_INVALID_LEGACY_GAS, ERR_TX_INVALID_NONCE_OR_CHAIN_ID, ERR_TX_INVALID_OBJECT, ERR_TX_INVALID_SENDER, ERR_TX_INVALID_RECEIVER, ERR_TX_LOCAL_WALLET_NOT_AVAILABLE, ERR_TX_MISSING_CHAIN_INFO, ERR_TX_MISSING_CUSTOM_CHAIN, ERR_TX_MISSING_CUSTOM_CHAIN_ID, ERR_TX_MISSING_GAS, ERR_TX_NO_CONTRACT_ADDRESS, ERR_TX_NOT_FOUND, ERR_TX_OUT_OF_GAS, ERR_TX_POLLING_TIMEOUT, ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER, ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL, ERR_TX_REVERT_INSTRUCTION, ERR_TX_REVERT_TRANSACTION, ERR_TX_REVERT_WITHOUT_REASON, ERR_TX_SEND_TIMEOUT, ERR_TX_SIGNING, ERR_TX_UNABLE_TO_POPULATE_NONCE, ERR_TX_UNSUPPORTED_EIP_1559, ERR_TX_UNSUPPORTED_TYPE, ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR, ERR_TX_INVALID_PROPERTIES_FOR_TYPE, ERR_TX_MISSING_GAS_INNER_ERROR, ERR_TX_GAS_MISMATCH_INNER_ERROR } from '../error_codes.js';\nimport { InvalidValueError, BaseWeb3Error } from '../web3_error_base.js';\nexport class TransactionError extends BaseWeb3Error {\n  constructor(message, receipt) {\n    super(message);\n    this.receipt = receipt;\n    this.code = ERR_TX;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      receipt: this.receipt\n    });\n  }\n}\nexport class RevertInstructionError extends BaseWeb3Error {\n  constructor(reason, signature) {\n    super(`Your request got reverted with the following reason string: ${reason}`);\n    this.reason = reason;\n    this.signature = signature;\n    this.code = ERR_TX_REVERT_INSTRUCTION;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      signature: this.signature\n    });\n  }\n}\nexport class TransactionRevertInstructionError extends BaseWeb3Error {\n  constructor(reason, signature, receipt, data) {\n    super(`Transaction has been reverted by the EVM${receipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`}`);\n    this.reason = reason;\n    this.signature = signature;\n    this.receipt = receipt;\n    this.data = data;\n    this.code = ERR_TX_REVERT_TRANSACTION;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      signature: this.signature,\n      receipt: this.receipt,\n      data: this.data\n    });\n  }\n}\n/**\n * This error is used when a transaction to a smart contract fails and\n * a custom user error (https://blog.soliditylang.org/2021/04/21/custom-errors/)\n * is able to be parsed from the revert reason\n */\nexport class TransactionRevertWithCustomError extends TransactionRevertInstructionError {\n  constructor(reason, customErrorName, customErrorDecodedSignature, customErrorArguments, signature, receipt, data) {\n    super(reason);\n    this.reason = reason;\n    this.customErrorName = customErrorName;\n    this.customErrorDecodedSignature = customErrorDecodedSignature;\n    this.customErrorArguments = customErrorArguments;\n    this.signature = signature;\n    this.receipt = receipt;\n    this.data = data;\n    this.code = ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      customErrorName: this.customErrorName,\n      customErrorDecodedSignature: this.customErrorDecodedSignature,\n      customErrorArguments: this.customErrorArguments,\n      signature: this.signature,\n      receipt: this.receipt,\n      data: this.data\n    });\n  }\n}\nexport class NoContractAddressFoundError extends TransactionError {\n  constructor(receipt) {\n    super(\"The transaction receipt didn't contain a contract address.\", receipt);\n    this.code = ERR_TX_NO_CONTRACT_ADDRESS;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      receipt: this.receipt\n    });\n  }\n}\nexport class ContractCodeNotStoredError extends TransactionError {\n  constructor(receipt) {\n    super(\"The contract code couldn't be stored, please check your gas limit.\", receipt);\n    this.code = ERR_TX_CONTRACT_NOT_STORED;\n  }\n}\nexport class TransactionRevertedWithoutReasonError extends TransactionError {\n  constructor(receipt) {\n    super(`Transaction has been reverted by the EVM${receipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`}`, receipt);\n    this.code = ERR_TX_REVERT_WITHOUT_REASON;\n  }\n}\nexport class TransactionOutOfGasError extends TransactionError {\n  constructor(receipt) {\n    super(`Transaction ran out of gas. Please provide more gas:\\n ${JSON.stringify(receipt, undefined, 2)}`, receipt);\n    this.code = ERR_TX_OUT_OF_GAS;\n  }\n}\nexport class UndefinedRawTransactionError extends TransactionError {\n  constructor() {\n    super(`Raw transaction undefined`);\n    this.code = ERR_RAW_TX_UNDEFINED;\n  }\n}\nexport class TransactionNotFound extends TransactionError {\n  constructor() {\n    super('Transaction not found');\n    this.code = ERR_TX_NOT_FOUND;\n  }\n}\nexport class InvalidTransactionWithSender extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction with invalid sender');\n    this.code = ERR_TX_INVALID_SENDER;\n  }\n}\nexport class InvalidTransactionWithReceiver extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction with invalid receiver');\n    this.code = ERR_TX_INVALID_RECEIVER;\n  }\n}\nexport class InvalidTransactionCall extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction call');\n    this.code = ERR_TX_INVALID_CALL;\n  }\n}\nexport class MissingCustomChainError extends InvalidValueError {\n  constructor() {\n    super('MissingCustomChainError', 'If tx.common is provided it must have tx.common.customChain');\n    this.code = ERR_TX_MISSING_CUSTOM_CHAIN;\n  }\n}\nexport class MissingCustomChainIdError extends InvalidValueError {\n  constructor() {\n    super('MissingCustomChainIdError', 'If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId');\n    this.code = ERR_TX_MISSING_CUSTOM_CHAIN_ID;\n  }\n}\nexport class ChainIdMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value),\n    // https://github.com/ChainSafe/web3.js/blob/8783f4d64e424456bdc53b34ef1142d0a7cee4d7/packages/web3-eth-accounts/src/index.js#L176\n    'Chain Id doesnt match in tx.chainId tx.common.customChain.chainId');\n    this.code = ERR_TX_CHAIN_ID_MISMATCH;\n  }\n}\nexport class ChainMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value), 'Chain doesnt match in tx.chain tx.common.basechain');\n    this.code = ERR_TX_CHAIN_MISMATCH;\n  }\n}\nexport class HardforkMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value), 'hardfork doesnt match in tx.hardfork tx.common.hardfork');\n    this.code = ERR_TX_HARDFORK_MISMATCH;\n  }\n}\nexport class CommonOrChainAndHardforkError extends InvalidValueError {\n  constructor() {\n    super('CommonOrChainAndHardforkError', 'Please provide the common object or the chain and hardfork property but not all together.');\n    this.code = ERR_TX_INVALID_CHAIN_INFO;\n  }\n}\nexport class MissingChainOrHardforkError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super('MissingChainOrHardforkError', `When specifying chain and hardfork, both values must be defined. Received \"chain\": ${(_a = value.chain) !== null && _a !== void 0 ? _a : 'undefined'}, \"hardfork\": ${(_b = value.hardfork) !== null && _b !== void 0 ? _b : 'undefined'}`);\n    this.code = ERR_TX_MISSING_CHAIN_INFO;\n  }\n}\nexport class MissingGasInnerError extends BaseWeb3Error {\n  constructor() {\n    super('Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions');\n    this.code = ERR_TX_MISSING_GAS_INNER_ERROR;\n  }\n}\nexport class MissingGasError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b, _c, _d;\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : 'undefined'}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : 'undefined'}`, '\"gas\" is missing');\n    this.code = ERR_TX_MISSING_GAS;\n    this.innerError = new MissingGasInnerError();\n  }\n}\nexport class TransactionGasMismatchInnerError extends BaseWeb3Error {\n  constructor() {\n    super('Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions, not both');\n    this.code = ERR_TX_GAS_MISMATCH_INNER_ERROR;\n  }\n}\nexport class TransactionGasMismatchError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b, _c, _d;\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : 'undefined'}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : 'undefined'}`, 'transaction must specify legacy or fee market gas properties, not both');\n    this.code = ERR_TX_GAS_MISMATCH;\n    this.innerError = new TransactionGasMismatchInnerError();\n  }\n}\nexport class InvalidGasOrGasPrice extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}`, 'Gas or gasPrice is lower than 0');\n    this.code = ERR_TX_INVALID_LEGACY_GAS;\n  }\n}\nexport class InvalidMaxPriorityFeePerGasOrMaxFeePerGas extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : 'undefined'}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : 'undefined'}`, 'maxPriorityFeePerGas or maxFeePerGas is lower than 0');\n    this.code = ERR_TX_INVALID_FEE_MARKET_GAS;\n  }\n}\nexport class Eip1559GasPriceError extends InvalidValueError {\n  constructor(value) {\n    super(value, \"eip-1559 transactions don't support gasPrice\");\n    this.code = ERR_TX_INVALID_FEE_MARKET_GAS_PRICE;\n  }\n}\nexport class UnsupportedFeeMarketError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : 'undefined'}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : 'undefined'}`, \"pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas\");\n    this.code = ERR_TX_INVALID_LEGACY_FEE_MARKET;\n  }\n}\nexport class InvalidTransactionObjectError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction object');\n    this.code = ERR_TX_INVALID_OBJECT;\n  }\n}\nexport class InvalidNonceOrChainIdError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`nonce: ${(_a = value.nonce) !== null && _a !== void 0 ? _a : 'undefined'}, chainId: ${(_b = value.chainId) !== null && _b !== void 0 ? _b : 'undefined'}`, 'Nonce or chainId is lower than 0');\n    this.code = ERR_TX_INVALID_NONCE_OR_CHAIN_ID;\n  }\n}\nexport class UnableToPopulateNonceError extends InvalidValueError {\n  constructor() {\n    super('UnableToPopulateNonceError', 'unable to populate nonce, no from address available');\n    this.code = ERR_TX_UNABLE_TO_POPULATE_NONCE;\n  }\n}\nexport class Eip1559NotSupportedError extends InvalidValueError {\n  constructor() {\n    super('Eip1559NotSupportedError', \"Network doesn't support eip-1559\");\n    this.code = ERR_TX_UNSUPPORTED_EIP_1559;\n  }\n}\nexport class UnsupportedTransactionTypeError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'unsupported transaction type');\n    this.code = ERR_TX_UNSUPPORTED_TYPE;\n  }\n}\nexport class TransactionDataAndInputError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`data: ${(_a = value.data) !== null && _a !== void 0 ? _a : 'undefined'}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : 'undefined'}`, 'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    this.code = ERR_TX_DATA_AND_INPUT;\n  }\n}\nexport class TransactionSendTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`The connected Ethereum Node did not respond within ${value.numberOfSeconds} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!\\n\\tTransaction Hash: ${value.transactionHash ? value.transactionHash.toString() : 'not available'}`);\n    this.code = ERR_TX_SEND_TIMEOUT;\n  }\n}\nfunction transactionTimeoutHint(transactionHash) {\n  return `Please make sure your transaction was properly sent and there are no previous pending transaction for the same account. However, be aware that it might still be mined!\\n\\tTransaction Hash: ${transactionHash ? transactionHash.toString() : 'not available'}`;\n}\nexport class TransactionPollingTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`Transaction was not mined within ${value.numberOfSeconds} seconds. ${transactionTimeoutHint(value.transactionHash)}`);\n    this.code = ERR_TX_POLLING_TIMEOUT;\n  }\n}\nexport class TransactionBlockTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`Transaction started at ${value.starterBlockNumber} but was not mined within ${value.numberOfBlocks} blocks. ${transactionTimeoutHint(value.transactionHash)}`);\n    this.code = ERR_TX_BLOCK_TIMEOUT;\n  }\n}\nexport class TransactionMissingReceiptOrBlockHashError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`receipt: ${JSON.stringify(value.receipt)}, blockHash: ${(_a = value.blockHash) === null || _a === void 0 ? void 0 : _a.toString()}, transactionHash: ${(_b = value.transactionHash) === null || _b === void 0 ? void 0 : _b.toString()}`, `Receipt missing or blockHash null`);\n    this.code = ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL;\n  }\n}\nexport class TransactionReceiptMissingBlockNumberError extends InvalidValueError {\n  constructor(value) {\n    super(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);\n    this.code = ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER;\n  }\n}\nexport class TransactionSigningError extends BaseWeb3Error {\n  constructor(errorDetails) {\n    super(`Invalid signature. \"${errorDetails}\"`);\n    this.code = ERR_TX_SIGNING;\n  }\n}\nexport class LocalWalletNotAvailableError extends InvalidValueError {\n  constructor() {\n    super('LocalWalletNotAvailableError', `Attempted to index account in local wallet, but no wallet is available`);\n    this.code = ERR_TX_LOCAL_WALLET_NOT_AVAILABLE;\n  }\n}\nexport class InvalidPropertiesForTransactionTypeError extends BaseWeb3Error {\n  constructor(validationError, txType) {\n    const invalidPropertyNames = [];\n    validationError.forEach(error => invalidPropertyNames.push(error.keyword));\n    super(`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(', ')}`);\n    this.code = ERR_TX_INVALID_PROPERTIES_FOR_TYPE;\n  }\n}","map":{"version":3,"names":["ERR_RAW_TX_UNDEFINED","ERR_TX","ERR_TX_BLOCK_TIMEOUT","ERR_TX_CONTRACT_NOT_STORED","ERR_TX_CHAIN_ID_MISMATCH","ERR_TX_DATA_AND_INPUT","ERR_TX_GAS_MISMATCH","ERR_TX_CHAIN_MISMATCH","ERR_TX_HARDFORK_MISMATCH","ERR_TX_INVALID_CALL","ERR_TX_INVALID_CHAIN_INFO","ERR_TX_INVALID_FEE_MARKET_GAS","ERR_TX_INVALID_FEE_MARKET_GAS_PRICE","ERR_TX_INVALID_LEGACY_FEE_MARKET","ERR_TX_INVALID_LEGACY_GAS","ERR_TX_INVALID_NONCE_OR_CHAIN_ID","ERR_TX_INVALID_OBJECT","ERR_TX_INVALID_SENDER","ERR_TX_INVALID_RECEIVER","ERR_TX_LOCAL_WALLET_NOT_AVAILABLE","ERR_TX_MISSING_CHAIN_INFO","ERR_TX_MISSING_CUSTOM_CHAIN","ERR_TX_MISSING_CUSTOM_CHAIN_ID","ERR_TX_MISSING_GAS","ERR_TX_NO_CONTRACT_ADDRESS","ERR_TX_NOT_FOUND","ERR_TX_OUT_OF_GAS","ERR_TX_POLLING_TIMEOUT","ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER","ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL","ERR_TX_REVERT_INSTRUCTION","ERR_TX_REVERT_TRANSACTION","ERR_TX_REVERT_WITHOUT_REASON","ERR_TX_SEND_TIMEOUT","ERR_TX_SIGNING","ERR_TX_UNABLE_TO_POPULATE_NONCE","ERR_TX_UNSUPPORTED_EIP_1559","ERR_TX_UNSUPPORTED_TYPE","ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR","ERR_TX_INVALID_PROPERTIES_FOR_TYPE","ERR_TX_MISSING_GAS_INNER_ERROR","ERR_TX_GAS_MISMATCH_INNER_ERROR","InvalidValueError","BaseWeb3Error","TransactionError","constructor","message","receipt","code","toJSON","Object","assign","RevertInstructionError","reason","signature","TransactionRevertInstructionError","data","undefined","convertToString","TransactionRevertWithCustomError","customErrorName","customErrorDecodedSignature","customErrorArguments","NoContractAddressFoundError","ContractCodeNotStoredError","TransactionRevertedWithoutReasonError","TransactionOutOfGasError","JSON","stringify","UndefinedRawTransactionError","TransactionNotFound","InvalidTransactionWithSender","value","InvalidTransactionWithReceiver","InvalidTransactionCall","MissingCustomChainError","MissingCustomChainIdError","ChainIdMismatchError","ChainMismatchError","HardforkMismatchError","CommonOrChainAndHardforkError","MissingChainOrHardforkError","_a","chain","_b","hardfork","MissingGasInnerError","MissingGasError","gas","gasPrice","_c","maxPriorityFeePerGas","_d","maxFeePerGas","innerError","TransactionGasMismatchInnerError","TransactionGasMismatchError","InvalidGasOrGasPrice","InvalidMaxPriorityFeePerGasOrMaxFeePerGas","Eip1559GasPriceError","UnsupportedFeeMarketError","InvalidTransactionObjectError","InvalidNonceOrChainIdError","nonce","chainId","UnableToPopulateNonceError","Eip1559NotSupportedError","UnsupportedTransactionTypeError","TransactionDataAndInputError","input","TransactionSendTimeoutError","numberOfSeconds","transactionHash","toString","transactionTimeoutHint","TransactionPollingTimeoutError","TransactionBlockTimeoutError","starterBlockNumber","numberOfBlocks","TransactionMissingReceiptOrBlockHashError","blockHash","TransactionReceiptMissingBlockNumberError","TransactionSigningError","errorDetails","LocalWalletNotAvailableError","InvalidPropertiesForTransactionTypeError","validationError","txType","invalidPropertyNames","forEach","error","push","keyword","join"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-errors\\src\\errors\\transaction_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n\tBytes,\n\tHexString,\n\tNumbers,\n\tTransactionReceipt,\n\tWeb3ValidationErrorObject,\n} from 'web3-types';\nimport {\n\tERR_RAW_TX_UNDEFINED,\n\tERR_TX,\n\tERR_TX_BLOCK_TIMEOUT,\n\tERR_TX_CONTRACT_NOT_STORED,\n\tERR_TX_CHAIN_ID_MISMATCH,\n\tERR_TX_DATA_AND_INPUT,\n\tERR_TX_GAS_MISMATCH,\n\tERR_TX_CHAIN_MISMATCH,\n\tERR_TX_HARDFORK_MISMATCH,\n\tERR_TX_INVALID_CALL,\n\tERR_TX_INVALID_CHAIN_INFO,\n\tERR_TX_INVALID_FEE_MARKET_GAS,\n\tERR_TX_INVALID_FEE_MARKET_GAS_PRICE,\n\tERR_TX_INVALID_LEGACY_FEE_MARKET,\n\tERR_TX_INVALID_LEGACY_GAS,\n\tERR_TX_INVALID_NONCE_OR_CHAIN_ID,\n\tERR_TX_INVALID_OBJECT,\n\tERR_TX_INVALID_SENDER,\n\tERR_TX_INVALID_RECEIVER,\n\tERR_TX_LOCAL_WALLET_NOT_AVAILABLE,\n\tERR_TX_MISSING_CHAIN_INFO,\n\tERR_TX_MISSING_CUSTOM_CHAIN,\n\tERR_TX_MISSING_CUSTOM_CHAIN_ID,\n\tERR_TX_MISSING_GAS,\n\tERR_TX_NO_CONTRACT_ADDRESS,\n\tERR_TX_NOT_FOUND,\n\tERR_TX_OUT_OF_GAS,\n\tERR_TX_POLLING_TIMEOUT,\n\tERR_TX_RECEIPT_MISSING_BLOCK_NUMBER,\n\tERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL,\n\tERR_TX_REVERT_INSTRUCTION,\n\tERR_TX_REVERT_TRANSACTION,\n\tERR_TX_REVERT_WITHOUT_REASON,\n\tERR_TX_SEND_TIMEOUT,\n\tERR_TX_SIGNING,\n\tERR_TX_UNABLE_TO_POPULATE_NONCE,\n\tERR_TX_UNSUPPORTED_EIP_1559,\n\tERR_TX_UNSUPPORTED_TYPE,\n\tERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR,\n\tERR_TX_INVALID_PROPERTIES_FOR_TYPE,\n\tERR_TX_MISSING_GAS_INNER_ERROR,\n\tERR_TX_GAS_MISMATCH_INNER_ERROR,\n} from '../error_codes.js';\nimport { InvalidValueError, BaseWeb3Error } from '../web3_error_base.js';\n\nexport class TransactionError<ReceiptType = TransactionReceipt> extends BaseWeb3Error {\n\tpublic code = ERR_TX;\n\n\tpublic constructor(message: string, public receipt?: ReceiptType) {\n\t\tsuper(message);\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), receipt: this.receipt };\n\t}\n}\n\nexport class RevertInstructionError extends BaseWeb3Error {\n\tpublic code = ERR_TX_REVERT_INSTRUCTION;\n\n\tpublic constructor(public reason: string, public signature: string) {\n\t\tsuper(`Your request got reverted with the following reason string: ${reason}`);\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), reason: this.reason, signature: this.signature };\n\t}\n}\n\nexport class TransactionRevertInstructionError<\n\tReceiptType = TransactionReceipt,\n> extends BaseWeb3Error {\n\tpublic code = ERR_TX_REVERT_TRANSACTION;\n\n\tpublic constructor(\n\t\tpublic reason: string,\n\t\tpublic signature?: string,\n\t\tpublic receipt?: ReceiptType,\n\t\tpublic data?: string,\n\t) {\n\t\tsuper(\n\t\t\t`Transaction has been reverted by the EVM${\n\t\t\t\treceipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`\n\t\t\t}`,\n\t\t);\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\treason: this.reason,\n\t\t\tsignature: this.signature,\n\t\t\treceipt: this.receipt,\n\t\t\tdata: this.data,\n\t\t};\n\t}\n}\n\n/**\n * This error is used when a transaction to a smart contract fails and\n * a custom user error (https://blog.soliditylang.org/2021/04/21/custom-errors/)\n * is able to be parsed from the revert reason\n */\nexport class TransactionRevertWithCustomError<\n\tReceiptType = TransactionReceipt,\n> extends TransactionRevertInstructionError<ReceiptType> {\n\tpublic code = ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR;\n\n\tpublic constructor(\n\t\tpublic reason: string,\n\t\tpublic customErrorName: string,\n\t\tpublic customErrorDecodedSignature: string,\n\t\tpublic customErrorArguments: Record<string, unknown>,\n\t\tpublic signature?: string,\n\t\tpublic receipt?: ReceiptType,\n\t\tpublic data?: string,\n\t) {\n\t\tsuper(reason);\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\treason: this.reason,\n\t\t\tcustomErrorName: this.customErrorName,\n\t\t\tcustomErrorDecodedSignature: this.customErrorDecodedSignature,\n\t\t\tcustomErrorArguments: this.customErrorArguments,\n\t\t\tsignature: this.signature,\n\t\t\treceipt: this.receipt,\n\t\t\tdata: this.data,\n\t\t};\n\t}\n}\n\nexport class NoContractAddressFoundError extends TransactionError {\n\tpublic constructor(receipt: TransactionReceipt) {\n\t\tsuper(\"The transaction receipt didn't contain a contract address.\", receipt);\n\t\tthis.code = ERR_TX_NO_CONTRACT_ADDRESS;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), receipt: this.receipt };\n\t}\n}\n\nexport class ContractCodeNotStoredError extends TransactionError {\n\tpublic constructor(receipt: TransactionReceipt) {\n\t\tsuper(\"The contract code couldn't be stored, please check your gas limit.\", receipt);\n\t\tthis.code = ERR_TX_CONTRACT_NOT_STORED;\n\t}\n}\n\nexport class TransactionRevertedWithoutReasonError<\n\tReceiptType = TransactionReceipt,\n> extends TransactionError<ReceiptType> {\n\tpublic constructor(receipt?: ReceiptType) {\n\t\tsuper(\n\t\t\t`Transaction has been reverted by the EVM${\n\t\t\t\treceipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`\n\t\t\t}`,\n\t\t\treceipt,\n\t\t);\n\t\tthis.code = ERR_TX_REVERT_WITHOUT_REASON;\n\t}\n}\n\nexport class TransactionOutOfGasError extends TransactionError {\n\tpublic constructor(receipt: TransactionReceipt) {\n\t\tsuper(\n\t\t\t`Transaction ran out of gas. Please provide more gas:\\n ${JSON.stringify(\n\t\t\t\treceipt,\n\t\t\t\tundefined,\n\t\t\t\t2,\n\t\t\t)}`,\n\t\t\treceipt,\n\t\t);\n\t\tthis.code = ERR_TX_OUT_OF_GAS;\n\t}\n}\n\nexport class UndefinedRawTransactionError extends TransactionError {\n\tpublic constructor() {\n\t\tsuper(`Raw transaction undefined`);\n\t\tthis.code = ERR_RAW_TX_UNDEFINED;\n\t}\n}\nexport class TransactionNotFound extends TransactionError {\n\tpublic constructor() {\n\t\tsuper('Transaction not found');\n\t\tthis.code = ERR_TX_NOT_FOUND;\n\t}\n}\n\nexport class InvalidTransactionWithSender extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_SENDER;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid transaction with invalid sender');\n\t}\n}\nexport class InvalidTransactionWithReceiver extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_RECEIVER;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid transaction with invalid receiver');\n\t}\n}\nexport class InvalidTransactionCall extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_CALL;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid transaction call');\n\t}\n}\n\nexport class MissingCustomChainError extends InvalidValueError {\n\tpublic code = ERR_TX_MISSING_CUSTOM_CHAIN;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'MissingCustomChainError',\n\t\t\t'If tx.common is provided it must have tx.common.customChain',\n\t\t);\n\t}\n}\n\nexport class MissingCustomChainIdError extends InvalidValueError {\n\tpublic code = ERR_TX_MISSING_CUSTOM_CHAIN_ID;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'MissingCustomChainIdError',\n\t\t\t'If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId',\n\t\t);\n\t}\n}\n\nexport class ChainIdMismatchError extends InvalidValueError {\n\tpublic code = ERR_TX_CHAIN_ID_MISMATCH;\n\n\tpublic constructor(value: { txChainId: unknown; customChainId: unknown }) {\n\t\tsuper(\n\t\t\tJSON.stringify(value),\n\t\t\t// https://github.com/ChainSafe/web3.js/blob/8783f4d64e424456bdc53b34ef1142d0a7cee4d7/packages/web3-eth-accounts/src/index.js#L176\n\t\t\t'Chain Id doesnt match in tx.chainId tx.common.customChain.chainId',\n\t\t);\n\t}\n}\n\nexport class ChainMismatchError extends InvalidValueError {\n\tpublic code = ERR_TX_CHAIN_MISMATCH;\n\n\tpublic constructor(value: { txChain: unknown; baseChain: unknown }) {\n\t\tsuper(JSON.stringify(value), 'Chain doesnt match in tx.chain tx.common.basechain');\n\t}\n}\n\nexport class HardforkMismatchError extends InvalidValueError {\n\tpublic code = ERR_TX_HARDFORK_MISMATCH;\n\n\tpublic constructor(value: { txHardfork: unknown; commonHardfork: unknown }) {\n\t\tsuper(JSON.stringify(value), 'hardfork doesnt match in tx.hardfork tx.common.hardfork');\n\t}\n}\n\nexport class CommonOrChainAndHardforkError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_CHAIN_INFO;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'CommonOrChainAndHardforkError',\n\t\t\t'Please provide the common object or the chain and hardfork property but not all together.',\n\t\t);\n\t}\n}\n\nexport class MissingChainOrHardforkError extends InvalidValueError {\n\tpublic code = ERR_TX_MISSING_CHAIN_INFO;\n\n\tpublic constructor(value: { chain: string | undefined; hardfork: string | undefined }) {\n\t\tsuper(\n\t\t\t'MissingChainOrHardforkError',\n\t\t\t`When specifying chain and hardfork, both values must be defined. Received \"chain\": ${\n\t\t\t\tvalue.chain ?? 'undefined'\n\t\t\t}, \"hardfork\": ${value.hardfork ?? 'undefined'}`,\n\t\t);\n\t}\n}\n\nexport class MissingGasInnerError extends BaseWeb3Error {\n\tpublic code = ERR_TX_MISSING_GAS_INNER_ERROR;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions',\n\t\t);\n\t}\n}\n\nexport class MissingGasError extends InvalidValueError {\n\tpublic code = ERR_TX_MISSING_GAS;\n\n\tpublic constructor(value: {\n\t\tgas: Numbers | undefined;\n\t\tgasPrice: Numbers | undefined;\n\t\tmaxPriorityFeePerGas: Numbers | undefined;\n\t\tmaxFeePerGas: Numbers | undefined;\n\t}) {\n\t\tsuper(\n\t\t\t`gas: ${value.gas ?? 'undefined'}, gasPrice: ${\n\t\t\t\tvalue.gasPrice ?? 'undefined'\n\t\t\t}, maxPriorityFeePerGas: ${value.maxPriorityFeePerGas ?? 'undefined'}, maxFeePerGas: ${\n\t\t\t\tvalue.maxFeePerGas ?? 'undefined'\n\t\t\t}`,\n\t\t\t'\"gas\" is missing',\n\t\t);\n\t\tthis.innerError = new MissingGasInnerError();\n\t}\n}\n\nexport class TransactionGasMismatchInnerError extends BaseWeb3Error {\n\tpublic code = ERR_TX_GAS_MISMATCH_INNER_ERROR;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions, not both',\n\t\t);\n\t}\n}\n\nexport class TransactionGasMismatchError extends InvalidValueError {\n\tpublic code = ERR_TX_GAS_MISMATCH;\n\n\tpublic constructor(value: {\n\t\tgas: Numbers | undefined;\n\t\tgasPrice: Numbers | undefined;\n\t\tmaxPriorityFeePerGas: Numbers | undefined;\n\t\tmaxFeePerGas: Numbers | undefined;\n\t}) {\n\t\tsuper(\n\t\t\t`gas: ${value.gas ?? 'undefined'}, gasPrice: ${\n\t\t\t\tvalue.gasPrice ?? 'undefined'\n\t\t\t}, maxPriorityFeePerGas: ${value.maxPriorityFeePerGas ?? 'undefined'}, maxFeePerGas: ${\n\t\t\t\tvalue.maxFeePerGas ?? 'undefined'\n\t\t\t}`,\n\t\t\t'transaction must specify legacy or fee market gas properties, not both',\n\t\t);\n\t\tthis.innerError = new TransactionGasMismatchInnerError();\n\t}\n}\n\nexport class InvalidGasOrGasPrice extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_LEGACY_GAS;\n\n\tpublic constructor(value: { gas: Numbers | undefined; gasPrice: Numbers | undefined }) {\n\t\tsuper(\n\t\t\t`gas: ${value.gas ?? 'undefined'}, gasPrice: ${value.gasPrice ?? 'undefined'}`,\n\t\t\t'Gas or gasPrice is lower than 0',\n\t\t);\n\t}\n}\n\nexport class InvalidMaxPriorityFeePerGasOrMaxFeePerGas extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_FEE_MARKET_GAS;\n\n\tpublic constructor(value: {\n\t\tmaxPriorityFeePerGas: Numbers | undefined;\n\t\tmaxFeePerGas: Numbers | undefined;\n\t}) {\n\t\tsuper(\n\t\t\t`maxPriorityFeePerGas: ${value.maxPriorityFeePerGas ?? 'undefined'}, maxFeePerGas: ${\n\t\t\t\tvalue.maxFeePerGas ?? 'undefined'\n\t\t\t}`,\n\t\t\t'maxPriorityFeePerGas or maxFeePerGas is lower than 0',\n\t\t);\n\t}\n}\n\nexport class Eip1559GasPriceError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_FEE_MARKET_GAS_PRICE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, \"eip-1559 transactions don't support gasPrice\");\n\t}\n}\n\nexport class UnsupportedFeeMarketError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_LEGACY_FEE_MARKET;\n\n\tpublic constructor(value: {\n\t\tmaxPriorityFeePerGas: Numbers | undefined;\n\t\tmaxFeePerGas: Numbers | undefined;\n\t}) {\n\t\tsuper(\n\t\t\t`maxPriorityFeePerGas: ${value.maxPriorityFeePerGas ?? 'undefined'}, maxFeePerGas: ${\n\t\t\t\tvalue.maxFeePerGas ?? 'undefined'\n\t\t\t}`,\n\t\t\t\"pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas\",\n\t\t);\n\t}\n}\n\nexport class InvalidTransactionObjectError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_OBJECT;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid transaction object');\n\t}\n}\n\nexport class InvalidNonceOrChainIdError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_NONCE_OR_CHAIN_ID;\n\n\tpublic constructor(value: { nonce: Numbers | undefined; chainId: Numbers | undefined }) {\n\t\tsuper(\n\t\t\t`nonce: ${value.nonce ?? 'undefined'}, chainId: ${value.chainId ?? 'undefined'}`,\n\t\t\t'Nonce or chainId is lower than 0',\n\t\t);\n\t}\n}\n\nexport class UnableToPopulateNonceError extends InvalidValueError {\n\tpublic code = ERR_TX_UNABLE_TO_POPULATE_NONCE;\n\n\tpublic constructor() {\n\t\tsuper('UnableToPopulateNonceError', 'unable to populate nonce, no from address available');\n\t}\n}\n\nexport class Eip1559NotSupportedError extends InvalidValueError {\n\tpublic code = ERR_TX_UNSUPPORTED_EIP_1559;\n\n\tpublic constructor() {\n\t\tsuper('Eip1559NotSupportedError', \"Network doesn't support eip-1559\");\n\t}\n}\n\nexport class UnsupportedTransactionTypeError extends InvalidValueError {\n\tpublic code = ERR_TX_UNSUPPORTED_TYPE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'unsupported transaction type');\n\t}\n}\n\nexport class TransactionDataAndInputError extends InvalidValueError {\n\tpublic code = ERR_TX_DATA_AND_INPUT;\n\n\tpublic constructor(value: { data: HexString | undefined; input: HexString | undefined }) {\n\t\tsuper(\n\t\t\t`data: ${value.data ?? 'undefined'}, input: ${value.input ?? 'undefined'}`,\n\t\t\t'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.',\n\t\t);\n\t}\n}\n\nexport class TransactionSendTimeoutError extends BaseWeb3Error {\n\tpublic code = ERR_TX_SEND_TIMEOUT;\n\n\tpublic constructor(value: { numberOfSeconds: number; transactionHash?: Bytes }) {\n\t\tsuper(\n\t\t\t`The connected Ethereum Node did not respond within ${\n\t\t\t\tvalue.numberOfSeconds\n\t\t\t} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!\\n\\tTransaction Hash: ${\n\t\t\t\tvalue.transactionHash ? value.transactionHash.toString() : 'not available'\n\t\t\t}`,\n\t\t);\n\t}\n}\n\nfunction transactionTimeoutHint(transactionHash?: Bytes) {\n\treturn `Please make sure your transaction was properly sent and there are no previous pending transaction for the same account. However, be aware that it might still be mined!\\n\\tTransaction Hash: ${\n\t\ttransactionHash ? transactionHash.toString() : 'not available'\n\t}`;\n}\n\nexport class TransactionPollingTimeoutError extends BaseWeb3Error {\n\tpublic code = ERR_TX_POLLING_TIMEOUT;\n\n\tpublic constructor(value: { numberOfSeconds: number; transactionHash: Bytes }) {\n\t\tsuper(\n\t\t\t`Transaction was not mined within ${\n\t\t\t\tvalue.numberOfSeconds\n\t\t\t} seconds. ${transactionTimeoutHint(value.transactionHash)}`,\n\t\t);\n\t}\n}\n\nexport class TransactionBlockTimeoutError extends BaseWeb3Error {\n\tpublic code = ERR_TX_BLOCK_TIMEOUT;\n\n\tpublic constructor(value: {\n\t\tstarterBlockNumber: number;\n\t\tnumberOfBlocks: number;\n\t\ttransactionHash?: Bytes;\n\t}) {\n\t\tsuper(\n\t\t\t`Transaction started at ${value.starterBlockNumber} but was not mined within ${\n\t\t\t\tvalue.numberOfBlocks\n\t\t\t} blocks. ${transactionTimeoutHint(value.transactionHash)}`,\n\t\t);\n\t}\n}\n\nexport class TransactionMissingReceiptOrBlockHashError extends InvalidValueError {\n\tpublic code = ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL;\n\n\tpublic constructor(value: {\n\t\treceipt: TransactionReceipt;\n\t\tblockHash: Bytes;\n\t\ttransactionHash: Bytes;\n\t}) {\n\t\tsuper(\n\t\t\t`receipt: ${JSON.stringify(\n\t\t\t\tvalue.receipt,\n\t\t\t)}, blockHash: ${value.blockHash?.toString()}, transactionHash: ${value.transactionHash?.toString()}`,\n\t\t\t`Receipt missing or blockHash null`,\n\t\t);\n\t}\n}\n\nexport class TransactionReceiptMissingBlockNumberError extends InvalidValueError {\n\tpublic code = ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER;\n\n\tpublic constructor(value: { receipt: TransactionReceipt }) {\n\t\tsuper(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);\n\t}\n}\n\nexport class TransactionSigningError extends BaseWeb3Error {\n\tpublic code = ERR_TX_SIGNING;\n\tpublic constructor(errorDetails: string) {\n\t\tsuper(`Invalid signature. \"${errorDetails}\"`);\n\t}\n}\n\nexport class LocalWalletNotAvailableError extends InvalidValueError {\n\tpublic code = ERR_TX_LOCAL_WALLET_NOT_AVAILABLE;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'LocalWalletNotAvailableError',\n\t\t\t`Attempted to index account in local wallet, but no wallet is available`,\n\t\t);\n\t}\n}\nexport class InvalidPropertiesForTransactionTypeError extends BaseWeb3Error {\n\tpublic code = ERR_TX_INVALID_PROPERTIES_FOR_TYPE;\n\n\tpublic constructor(\n\t\tvalidationError: Web3ValidationErrorObject[],\n\t\ttxType: '0x0' | '0x1' | '0x2',\n\t) {\n\t\tconst invalidPropertyNames: string[] = [];\n\t\tvalidationError.forEach(error => invalidPropertyNames.push(error.keyword));\n\t\tsuper(\n\t\t\t`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(\n\t\t\t\t', ',\n\t\t\t)}`,\n\t\t);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}