{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nexport const getAccounts = requestManager => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_listAccounts',\n    params: []\n  });\n});\nexport const newAccount = (requestManager, password) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_newAccount',\n    params: [password]\n  });\n});\nexport const unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_unlockAccount',\n    params: [address, password, unlockDuration]\n  });\n});\nexport const lockAccount = (requestManager, address) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_lockAccount',\n    params: [address]\n  });\n});\nexport const importRawKey = (requestManager, keyData, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_importRawKey',\n    params: [keyData, passphrase]\n  });\n});\nexport const sendTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_sendTransaction',\n    params: [tx, passphrase]\n  });\n});\nexport const signTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_signTransaction',\n    params: [tx, passphrase]\n  });\n});\nexport const sign = (requestManager, data, address, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_sign',\n    params: [data, address, passphrase]\n  });\n});\nexport const ecRecover = (requestManager, signedData, signature) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_ecRecover',\n    params: [signedData, signature]\n  });\n});","map":{"version":3,"names":["getAccounts","requestManager","__awaiter","send","method","params","newAccount","password","unlockAccount","address","unlockDuration","lockAccount","importRawKey","keyData","passphrase","sendTransaction","tx","signTransaction","sign","data","ecRecover","signedData","signature"],"sources":["C:\\Users\\USER\\Documents\\Dapp\\Abstract\\frontend\\node_modules\\web3-rpc-methods\\src\\personal_rpc_methods.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3RequestManager } from 'web3-core';\nimport { Address, EthPersonalAPI, HexString, Transaction } from 'web3-types';\n\nexport const getAccounts = async (requestManager: Web3RequestManager<EthPersonalAPI>) =>\n\trequestManager.send({\n\t\tmethod: 'personal_listAccounts',\n\t\tparams: [],\n\t});\n\nexport const newAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tpassword: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_newAccount',\n\t\tparams: [password],\n\t});\n\nexport const unlockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n\tpassword: string,\n\tunlockDuration: number,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_unlockAccount',\n\t\tparams: [address, password, unlockDuration],\n\t});\n\nexport const lockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_lockAccount',\n\t\tparams: [address],\n\t});\n\nexport const importRawKey = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tkeyData: HexString,\n\tpassphrase: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_importRawKey',\n\t\tparams: [keyData, passphrase],\n\t});\n\nexport const sendTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_sendTransaction',\n\t\tparams: [tx, passphrase],\n\t});\n\nexport const signTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_signTransaction',\n\t\tparams: [tx, passphrase],\n\t});\n\nexport const sign = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tdata: HexString,\n\taddress: Address,\n\tpassphrase: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_sign',\n\t\tparams: [data, address, passphrase],\n\t});\n\nexport const ecRecover = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tsignedData: HexString,\n\tsignature: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_ecRecover',\n\t\tparams: [signedData, signature],\n\t});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,MAAMA,WAAW,GAAUC,cAAkD,IAAIC,SAAA;EACvF,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,uBAAuB;IAC/BC,MAAM,EAAE;GACR,CAAC;EAAA;AAEH,OAAO,MAAMC,UAAU,GAAGA,CACzBL,cAAkD,EAClDM,QAAgB,KACbL,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,qBAAqB;IAC7BC,MAAM,EAAE,CAACE,QAAQ;GACjB,CAAC;EAAA;AAEH,OAAO,MAAMC,aAAa,GAAGA,CAC5BP,cAAkD,EAClDQ,OAAgB,EAChBF,QAAgB,EAChBG,cAAsB,KACnBR,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,wBAAwB;IAChCC,MAAM,EAAE,CAACI,OAAO,EAAEF,QAAQ,EAAEG,cAAc;GAC1C,CAAC;EAAA;AAEH,OAAO,MAAMC,WAAW,GAAGA,CAC1BV,cAAkD,EAClDQ,OAAgB,KACbP,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,sBAAsB;IAC9BC,MAAM,EAAE,CAACI,OAAO;GAChB,CAAC;EAAA;AAEH,OAAO,MAAMG,YAAY,GAAGA,CAC3BX,cAAkD,EAClDY,OAAkB,EAClBC,UAAkB,KACfZ,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,uBAAuB;IAC/BC,MAAM,EAAE,CAACQ,OAAO,EAAEC,UAAU;GAC5B,CAAC;EAAA;AAEH,OAAO,MAAMC,eAAe,GAAGA,CAC9Bd,cAAkD,EAClDe,EAAe,EACfF,UAAkB,KACfZ,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,0BAA0B;IAClCC,MAAM,EAAE,CAACW,EAAE,EAAEF,UAAU;GACvB,CAAC;EAAA;AAEH,OAAO,MAAMG,eAAe,GAAGA,CAC9BhB,cAAkD,EAClDe,EAAe,EACfF,UAAkB,KACfZ,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,0BAA0B;IAClCC,MAAM,EAAE,CAACW,EAAE,EAAEF,UAAU;GACvB,CAAC;EAAA;AAEH,OAAO,MAAMI,IAAI,GAAGA,CACnBjB,cAAkD,EAClDkB,IAAe,EACfV,OAAgB,EAChBK,UAAkB,KACfZ,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,eAAe;IACvBC,MAAM,EAAE,CAACc,IAAI,EAAEV,OAAO,EAAEK,UAAU;GAClC,CAAC;EAAA;AAEH,OAAO,MAAMM,SAAS,GAAGA,CACxBnB,cAAkD,EAClDoB,UAAqB,EACrBC,SAAiB,KACdpB,SAAA;EACH,OAAAD,cAAc,CAACE,IAAI,CAAC;IACnBC,MAAM,EAAE,oBAAoB;IAC5BC,MAAM,EAAE,CAACgB,UAAU,EAAEC,SAAS;GAC9B,CAAC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}